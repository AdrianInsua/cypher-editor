// Generated from cypher-editor-support/src/_generated/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CypherListener = require('./CypherListener').CypherListener;
var grammarFileName = "Cypher.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u009c\u0a72\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0003\u0002\u0006\u0002\u019a\n\u0002\r\u0002\u000e\u0002",
    "\u019b\u0003\u0002\u0003\u0002\u0003\u0003\u0005\u0003\u01a1\n\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u01a5\n\u0003\u0003\u0003\u0005",
    "\u0003\u01a8\n\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u01ac\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u01b1\n\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u01b7\n\u0005",
    "\f\u0005\u000e\u0005\u01ba\u000b\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0007\u0006\u01bf\n\u0006\f\u0006\u000e\u0006\u01c2\u000b\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01ce\n",
    "\u0007\u0003\b\u0003\b\u0005\b\u01d2\n\b\u0003\b\u0003\b\u0005\b\u01d6",
    "\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0005\n",
    "\u01df\n\n\u0003\n\u0003\n\u0003\n\u0005\n\u01e4\n\n\u0003\n\u0003\n",
    "\u0005\n\u01e8\n\n\u0003\n\u0005\n\u01eb\n\n\u0003\n\u0005\n\u01ee\n",
    "\n\u0003\u000b\u0003\u000b\u0003\f\u0005\f\u01f3\n\f\u0003\f\u0003\f",
    "\u0005\f\u01f7\n\f\u0003\r\u0003\r\u0003\r\u0007\r\u01fc\n\r\f\r\u000e",
    "\r\u01ff\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u020e\n\u0010\f\u0010\u000e",
    "\u0010\u0211\u000b\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u0225\n\u0016\f\u0016\u000e\u0016",
    "\u0228\u000b\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u022f\n\u0017\u0005\u0017\u0231\n\u0017\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u0235\n\u0018\u0003\u0018\u0007\u0018\u0238",
    "\n\u0018\f\u0018\u000e\u0018\u023b\u000b\u0018\u0003\u0019\u0006\u0019",
    "\u023e\n\u0019\r\u0019\u000e\u0019\u023f\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0246\n\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u024a\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u024e",
    "\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0252\n\u001b\u0007\u001b",
    "\u0254\n\u001b\f\u001b\u000e\u001b\u0257\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u025d\n\u001b\u0003\u001b",
    "\u0005\u001b\u0260\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u0264",
    "\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0268\n\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u026e\n\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u0272\n\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u0276\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u027a",
    "\n\u001d\u0007\u001d\u027c\n\u001d\f\u001d\u000e\u001d\u027f\u000b\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0285\n",
    "\u001d\u0003\u001d\u0005\u001d\u0288\n\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0290\n",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u0299\n\u001f\u0003 \u0003 \u0003 \u0005",
    " \u029e\n \u0006 \u02a0\n \r \u000e \u02a1\u0003 \u0005 \u02a5\n \u0003",
    "!\u0003!\u0003!\u0007!\u02aa\n!\f!\u000e!\u02ad\u000b!\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0005#\u02b4\n#\u0007#\u02b6\n#\f#\u000e#\u02b9",
    "\u000b#\u0003$\u0003$\u0003$\u0005$\u02be\n$\u0003%\u0003%\u0003%\u0005",
    "%\u02c3\n%\u0003%\u0003%\u0007%\u02c7\n%\f%\u000e%\u02ca\u000b%\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0005)\u02d4\n",
    ")\u0003)\u0003)\u0005)\u02d8\n)\u0003)\u0003)\u0003*\u0003*\u0005*\u02de",
    "\n*\u0003+\u0003+\u0005+\u02e2\n+\u0003,\u0003,\u0005,\u02e6\n,\u0003",
    ",\u0007,\u02e9\n,\f,\u000e,\u02ec\u000b,\u0003-\u0003-\u0005-\u02f0",
    "\n-\u0003-\u0003-\u0003.\u0003.\u0005.\u02f6\n.\u0003.\u0007.\u02f9",
    "\n.\f.\u000e.\u02fc\u000b.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u0305\n/\u00030\u00030\u00050\u0309\n0\u00030\u0007",
    "0\u030c\n0\f0\u000e0\u030f\u000b0\u00031\u00031\u00031\u00031\u0005",
    "1\u0315\n1\u00031\u00031\u00031\u00051\u031a\n1\u00031\u00051\u031d",
    "\n1\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00052\u032d\n2\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u0339\n3\u00034\u0003",
    "4\u00034\u00034\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u0003",
    "6\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00039\u0003",
    "9\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003",
    ";\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0003>\u0003>\u0005>\u0367\n>\u0003>\u0003>\u0005>\u036b\n>\u0003",
    ">\u0003>\u0005>\u036f\n>\u0003>\u0003>\u0005>\u0373\n>\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0003?\u0005?\u037b\n?\u0003?\u0003?\u0005?\u037f",
    "\n?\u0003?\u0003?\u0003?\u0005?\u0384\n?\u0003?\u0003?\u0005?\u0388",
    "\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0005@\u0396\n@\u0003@\u0003@\u0005@\u039a\n@\u0003",
    "@\u0003@\u0003@\u0005@\u039f\n@\u0003@\u0003@\u0005@\u03a3\n@\u0003",
    "@\u0003@\u0003@\u0003@\u0005@\u03a9\n@\u0003@\u0003@\u0005@\u03ad\n",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003",
    "A\u0003A\u0003A\u0005A\u03bb\nA\u0003A\u0003A\u0003A\u0003A\u0003A\u0005",
    "A\u03c2\nA\u0003A\u0003A\u0003A\u0003A\u0005A\u03c8\nA\u0003A\u0003",
    "A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0005B\u03d2\nB\u0003B\u0003",
    "B\u0005B\u03d6\nB\u0003B\u0003B\u0003B\u0003B\u0005B\u03dc\nB\u0003",
    "B\u0003B\u0003B\u0003B\u0003C\u0003C\u0005C\u03e4\nC\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u03ef\nC\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u03f5\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u0401\nC\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u0407\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u0413\nC\u0003C\u0003C\u0005C\u0417\nC\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0421\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u042e\nD\u0003E\u0003E\u0005E\u0432\nE\u0003E\u0003E\u0005",
    "E\u0436\nE\u0003E\u0003E\u0007E\u043a\nE\fE\u000eE\u043d\u000bE\u0003",
    "E\u0005E\u0440\nE\u0003E\u0005E\u0443\nE\u0003F\u0003F\u0005F\u0447",
    "\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0005G\u0451",
    "\nG\u0003G\u0003G\u0003G\u0007G\u0456\nG\fG\u000eG\u0459\u000bG\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005",
    "H\u0465\nH\u0003I\u0003I\u0005I\u0469\nI\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003J\u0005J\u0471\nJ\u0003J\u0003J\u0003K\u0003K\u0005K\u0477",
    "\nK\u0003K\u0003K\u0005K\u047b\nK\u0003K\u0003K\u0005K\u047f\nK\u0003",
    "K\u0007K\u0482\nK\fK\u000eK\u0485\u000bK\u0003L\u0003L\u0005L\u0489",
    "\nL\u0003L\u0003L\u0005L\u048d\nL\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u0493\nL\u0003L\u0003L\u0005L\u0497\nL\u0003L\u0003L\u0003L\u0003",
    "L\u0005L\u049d\nL\u0003L\u0003L\u0005L\u04a1\nL\u0003L\u0003L\u0003",
    "L\u0003L\u0005L\u04a7\nL\u0003L\u0003L\u0005L\u04ab\nL\u0003M\u0003",
    "M\u0005M\u04af\nM\u0003M\u0003M\u0005M\u04b3\nM\u0003M\u0003M\u0005",
    "M\u04b7\nM\u0003M\u0003M\u0005M\u04bb\nM\u0003M\u0007M\u04be\nM\fM\u000e",
    "M\u04c1\u000bM\u0003N\u0003N\u0003N\u0003N\u0005N\u04c7\nN\u0003N\u0003",
    "N\u0005N\u04cb\nN\u0003N\u0007N\u04ce\nN\fN\u000eN\u04d1\u000bN\u0003",
    "O\u0003O\u0003O\u0003O\u0005O\u04d7\nO\u0003P\u0003P\u0005P\u04db\n",
    "P\u0003P\u0003P\u0005P\u04df\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0005P\u04e7\nP\u0003P\u0003P\u0003P\u0006P\u04ec\nP\rP\u000eP\u04ed",
    "\u0003P\u0005P\u04f1\nP\u0003P\u0003P\u0003Q\u0003Q\u0005Q\u04f7\nQ",
    "\u0003Q\u0005Q\u04fa\nQ\u0003Q\u0003Q\u0003Q\u0005Q\u04ff\nQ\u0003Q",
    "\u0005Q\u0502\nQ\u0003R\u0003R\u0005R\u0506\nR\u0003R\u0005R\u0509\n",
    "R\u0003R\u0005R\u050c\nR\u0003R\u0003R\u0003S\u0003S\u0003S\u0005S\u0513",
    "\nS\u0003S\u0003S\u0005S\u0517\nS\u0003S\u0003S\u0005S\u051b\nS\u0003",
    "T\u0003T\u0005T\u051f\nT\u0003T\u0003T\u0005T\u0523\nT\u0003T\u0007",
    "T\u0526\nT\fT\u000eT\u0529\u000bT\u0003T\u0003T\u0005T\u052d\nT\u0003",
    "T\u0003T\u0005T\u0531\nT\u0003T\u0007T\u0534\nT\fT\u000eT\u0537\u000b",
    "T\u0005T\u0539\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u0542\nU\u0003V\u0003V\u0003V\u0003V\u0005V\u0548\nV\u0003V\u0005",
    "V\u054b\nV\u0003W\u0003W\u0005W\u054f\nW\u0003W\u0005W\u0552\nW\u0003",
    "X\u0003X\u0003X\u0003Y\u0003Y\u0005Y\u0559\nY\u0003Y\u0005Y\u055c\n",
    "Y\u0003Y\u0005Y\u055f\nY\u0003Y\u0003Y\u0005Y\u0563\nY\u0003Y\u0007",
    "Y\u0566\nY\fY\u000eY\u0569\u000bY\u0003Y\u0005Y\u056c\nY\u0003Y\u0003",
    "Y\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0574\nZ\u0003Z\u0003Z\u0005Z\u0578",
    "\nZ\u0003Z\u0007Z\u057b\nZ\fZ\u000eZ\u057e\u000bZ\u0003Z\u0003Z\u0005",
    "Z\u0582\nZ\u0003[\u0003[\u0005[\u0586\n[\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003_",
    "\u0003_\u0003_\u0003_\u0005_\u0598\n_\u0003_\u0003_\u0005_\u059c\n_",
    "\u0003_\u0007_\u059f\n_\f_\u000e_\u05a2\u000b_\u0003`\u0003`\u0003`",
    "\u0003`\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0005b\u05ae\nb\u0003",
    "b\u0003b\u0005b\u05b2\nb\u0005b\u05b4\nb\u0003c\u0005c\u05b7\nc\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u05c0\nc\u0003c\u0003",
    "c\u0005c\u05c4\nc\u0003c\u0003c\u0005c\u05c8\nc\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u05d4\nc\u0003",
    "c\u0003c\u0005c\u05d8\nc\u0003c\u0007c\u05db\nc\fc\u000ec\u05de\u000b",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u05e7\nc\u0003",
    "d\u0003d\u0003d\u0003d\u0005d\u05ed\nd\u0003d\u0003d\u0005d\u05f1\n",
    "d\u0003d\u0007d\u05f4\nd\fd\u000ed\u05f7\u000bd\u0003d\u0005d\u05fa",
    "\nd\u0003e\u0003e\u0005e\u05fe\ne\u0003e\u0003e\u0005e\u0602\ne\u0003",
    "e\u0003e\u0003f\u0003f\u0005f\u0608\nf\u0003g\u0003g\u0005g\u060c\n",
    "g\u0003g\u0003g\u0003g\u0005g\u0611\ng\u0003h\u0003h\u0003h\u0003h\u0005",
    "h\u0617\nh\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0620",
    "\ni\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0629\n",
    "j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0005k\u0631\nk\u0003k\u0003",
    "k\u0003l\u0003l\u0005l\u0637\nl\u0003l\u0003l\u0005l\u063b\nl\u0003",
    "l\u0007l\u063e\nl\fl\u000el\u0641\u000bl\u0003m\u0003m\u0003m\u0003",
    "m\u0003n\u0003n\u0005n\u0649\nn\u0003n\u0003n\u0005n\u064d\nn\u0003",
    "n\u0007n\u0650\nn\fn\u000en\u0653\u000bn\u0003o\u0003o\u0005o\u0657",
    "\no\u0003o\u0003o\u0005o\u065b\no\u0003o\u0003o\u0003o\u0005o\u0660",
    "\no\u0003p\u0003p\u0005p\u0664\np\u0003q\u0003q\u0005q\u0668\nq\u0003",
    "q\u0007q\u066b\nq\fq\u000eq\u066e\u000bq\u0003q\u0003q\u0003q\u0003",
    "q\u0005q\u0674\nq\u0003r\u0003r\u0005r\u0678\nr\u0003r\u0003r\u0005",
    "r\u067c\nr\u0005r\u067e\nr\u0003r\u0003r\u0005r\u0682\nr\u0005r\u0684",
    "\nr\u0003r\u0003r\u0005r\u0688\nr\u0005r\u068a\nr\u0003r\u0003r\u0003",
    "s\u0003s\u0005s\u0690\ns\u0003s\u0003s\u0003t\u0003t\u0005t\u0696\n",
    "t\u0003t\u0005t\u0699\nt\u0003t\u0005t\u069c\nt\u0003t\u0003t\u0003",
    "u\u0003u\u0005u\u06a2\nu\u0003u\u0003u\u0003u\u0005u\u06a7\nu\u0003",
    "v\u0003v\u0005v\u06ab\nv\u0003v\u0003v\u0003v\u0005v\u06b0\nv\u0003",
    "w\u0003w\u0005w\u06b4\nw\u0003w\u0003w\u0005w\u06b8\nw\u0005w\u06ba",
    "\nw\u0003w\u0003w\u0005w\u06be\nw\u0005w\u06c0\nw\u0003w\u0005w\u06c3",
    "\nw\u0003w\u0003w\u0005w\u06c7\nw\u0005w\u06c9\nw\u0003w\u0003w\u0003",
    "x\u0003x\u0005x\u06cf\nx\u0003y\u0003y\u0005y\u06d3\ny\u0003y\u0003",
    "y\u0003z\u0003z\u0005z\u06d9\nz\u0003z\u0003z\u0007z\u06dd\nz\fz\u000e",
    "z\u06e0\u000bz\u0003{\u0003{\u0003{\u0003|\u0005|\u06e6\n|\u0003|\u0003",
    "|\u0003}\u0003}\u0005}\u06ec\n}\u0003}\u0007}\u06ef\n}\f}\u000e}\u06f2",
    "\u000b}\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0005\u007f\u06f9",
    "\n\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u06fd\n\u007f\u0005\u007f",
    "\u06ff\n\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0703\n\u007f\u0003",
    "\u007f\u0003\u007f\u0005\u007f\u0707\n\u007f\u0005\u007f\u0709\n\u007f",
    "\u0005\u007f\u070b\n\u007f\u0003\u0080\u0003\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0007\u0083\u0718\n\u0083\f\u0083\u000e\u0083\u071b",
    "\u000b\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0007\u0084\u0722\n\u0084\f\u0084\u000e\u0084\u0725\u000b\u0084\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u072c",
    "\n\u0085\f\u0085\u000e\u0085\u072f\u000b\u0085\u0003\u0086\u0003\u0086",
    "\u0005\u0086\u0733\n\u0086\u0007\u0086\u0735\n\u0086\f\u0086\u000e\u0086",
    "\u0738\u000b\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0005",
    "\u0087\u073e\n\u0087\u0003\u0087\u0007\u0087\u0741\n\u0087\f\u0087\u000e",
    "\u0087\u0744\u000b\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u0748\n",
    "\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u074c\n\u0088\u0003\u0088",
    "\u0003\u0088\u0005\u0088\u0750\n\u0088\u0003\u0088\u0003\u0088\u0005",
    "\u0088\u0754\n\u0088\u0003\u0088\u0007\u0088\u0757\n\u0088\f\u0088\u000e",
    "\u0088\u075a\u000b\u0088\u0003\u0089\u0003\u0089\u0005\u0089\u075e\n",
    "\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0762\n\u0089\u0003\u0089",
    "\u0003\u0089\u0005\u0089\u0766\n\u0089\u0003\u0089\u0003\u0089\u0005",
    "\u0089\u076a\n\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u076e\n\u0089",
    "\u0003\u0089\u0003\u0089\u0005\u0089\u0772\n\u0089\u0003\u0089\u0007",
    "\u0089\u0775\n\u0089\f\u0089\u000e\u0089\u0778\u000b\u0089\u0003\u008a",
    "\u0003\u008a\u0005\u008a\u077c\n\u008a\u0003\u008a\u0003\u008a\u0005",
    "\u008a\u0780\n\u008a\u0003\u008a\u0007\u008a\u0783\n\u008a\f\u008a\u000e",
    "\u008a\u0786\u000b\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u078a\n",
    "\u008b\u0007\u008b\u078c\n\u008b\f\u008b\u000e\u008b\u078f\u000b\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0005\u008c\u0795\n",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005",
    "\u008c\u079c\n\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u07a0\n\u008c",
    "\u0003\u008c\u0003\u008c\u0005\u008c\u07a4\n\u008c\u0003\u008c\u0003",
    "\u008c\u0005\u008c\u07a8\n\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u07b7\n",
    "\u008c\u0003\u008c\u0005\u008c\u07ba\n\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0007\u008c\u07c7\n\u008c\f\u008c",
    "\u000e\u008c\u07ca\u000b\u008c\u0003\u008d\u0003\u008d\u0005\u008d\u07ce",
    "\n\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u07d2\n\u008d\u0007\u008d",
    "\u07d4\n\u008d\f\u008d\u000e\u008d\u07d7\u000b\u008d\u0003\u008e\u0003",
    "\u008e\u0005\u008e\u07db\n\u008e\u0003\u008e\u0003\u008e\u0005\u008e",
    "\u07df\n\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u07e3\n\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0005",
    "\u0090\u07eb\n\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u07ef\n\u0090",
    "\u0003\u0090\u0003\u0090\u0005\u0090\u07f3\n\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0005\u0092\u07fb",
    "\n\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u07ff\n\u0092\u0003\u0092",
    "\u0003\u0092\u0005\u0092\u0803\n\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0005\u0094\u080b\n\u0094",
    "\u0003\u0094\u0003\u0094\u0005\u0094\u080f\n\u0094\u0003\u0094\u0003",
    "\u0094\u0005\u0094\u0813\n\u0094\u0003\u0094\u0003\u0094\u0003\u0095",
    "\u0003\u0095\u0003\u0096\u0003\u0096\u0005\u0096\u081b\n\u0096\u0003",
    "\u0096\u0003\u0096\u0005\u0096\u081f\n\u0096\u0003\u0096\u0003\u0096",
    "\u0005\u0096\u0823\n\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003",
    "\u0097\u0003\u0098\u0003\u0098\u0005\u0098\u082b\n\u0098\u0003\u0098",
    "\u0003\u0098\u0005\u0098\u082f\n\u0098\u0003\u0098\u0003\u0098\u0005",
    "\u0098\u0833\n\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u083b\n\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u083f\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u0843\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0847\n\u009a\u0003",
    "\u009a\u0005\u009a\u084a\n\u009a\u0003\u009a\u0005\u009a\u084d\n\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c",
    "\u0005\u009c\u0855\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0859",
    "\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u085d\n\u009c\u0003\u009c",
    "\u0003\u009c\u0005\u009c\u0861\n\u009c\u0003\u009c\u0003\u009c\u0005",
    "\u009c\u0865\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0869\n\u009c",
    "\u0003\u009c\u0003\u009c\u0005\u009c\u086d\n\u009c\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u0871\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u0875\n\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u087d\n\u009e\u0003\u009e\u0003\u009e",
    "\u0005\u009e\u0881\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0885",
    "\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e",
    "\u088b\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u088f\n\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u0893\n\u009e\u0003\u009e\u0003\u009e",
    "\u0005\u009e\u0897\n\u009e\u0003\u009f\u0003\u009f\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005",
    "\u00a1\u08a2\n\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u08a6\n\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0005\u00a1\u08aa\n\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u08bc\n\u00a1\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0005\u00a2\u08c5\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u08cd\n\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0005\u00a5\u08d1\n\u00a5\u0003\u00a5\u0003\u00a5\u0005",
    "\u00a5\u08d5\n\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u08d9\n\u00a5",
    "\u0007\u00a5\u08db\n\u00a5\f\u00a5\u000e\u00a5\u08de\u000b\u00a5\u0005",
    "\u00a5\u08e0\n\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6",
    "\u0005\u00a6\u08e6\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005",
    "\u00a6\u08eb\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6",
    "\u08f0\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u08f5",
    "\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u08fa\n\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u08ff\n\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0904\n\u00a6\u0003\u00a6",
    "\u0005\u00a6\u0907\n\u00a6\u0003\u00a7\u0003\u00a7\u0005\u00a7\u090b",
    "\n\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u090f\n\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0915\n\u00a8\u0003",
    "\u00a8\u0006\u00a8\u0918\n\u00a8\r\u00a8\u000e\u00a8\u0919\u0003\u00a9",
    "\u0003\u00a9\u0005\u00a9\u091e\n\u00a9\u0003\u00a9\u0005\u00a9\u0921",
    "\n\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u092b\n\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0005\u00ab\u092f\n\u00ab\u0003\u00ab\u0003\u00ab",
    "\u0005\u00ab\u0933\n\u00ab\u0005\u00ab\u0935\n\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0005\u00ab\u0939\n\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab",
    "\u093d\n\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0941\n\u00ab\u0007",
    "\u00ab\u0943\n\u00ab\f\u00ab\u000e\u00ab\u0946\u000b\u00ab\u0005\u00ab",
    "\u0948\n\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003",
    "\u00af\u0005\u00af\u0955\n\u00af\u0003\u00af\u0003\u00af\u0005\u00af",
    "\u0959\n\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u095d\n\u00af\u0003",
    "\u00af\u0005\u00af\u0960\n\u00af\u0003\u00af\u0005\u00af\u0963\n\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0969\n",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u096d\n\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0005\u00b0\u0971\n\u00b0\u0005\u00b0\u0973\n\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0005\u00b0\u0977\n\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0005\u00b0\u097b\n\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u097f",
    "\n\u00b0\u0005\u00b0\u0981\n\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0",
    "\u0985\n\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0989\n\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0005\u00b1\u098f\n\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0995\n",
    "\u00b2\u0003\u00b2\u0006\u00b2\u0998\n\u00b2\r\u00b2\u000e\u00b2\u0999",
    "\u0003\u00b2\u0003\u00b2\u0005\u00b2\u099e\n\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0005\u00b2\u09a2\n\u00b2\u0003\u00b2\u0006\u00b2\u09a5\n\u00b2",
    "\r\u00b2\u000e\u00b2\u09a6\u0005\u00b2\u09a9\n\u00b2\u0003\u00b2\u0005",
    "\u00b2\u09ac\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u09b0\n\u00b2",
    "\u0003\u00b2\u0005\u00b2\u09b3\n\u00b2\u0003\u00b2\u0005\u00b2\u09b6",
    "\n\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0005\u00b3",
    "\u09bc\n\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u09c0\n\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0005\u00b3\u09c4\n\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0005\u00b5\u09cc\n",
    "\u00b5\u0003\u00b6\u0003\u00b6\u0005\u00b6\u09d0\n\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0005\u00b6\u09d4\n\u00b6\u0003\u00b6\u0003\u00b6\u0005",
    "\u00b6\u09d8\n\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u09dc\n\u00b6",
    "\u0007\u00b6\u09de\n\u00b6\f\u00b6\u000e\u00b6\u09e1\u000b\u00b6\u0005",
    "\u00b6\u09e3\n\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7",
    "\u0005\u00b7\u09e9\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u09ed",
    "\n\u00b7\u0003\u00b7\u0005\u00b7\u09f0\n\u00b7\u0003\u00b7\u0005\u00b7",
    "\u09f3\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u09f7\n\u00b7\u0003",
    "\u00b7\u0007\u00b7\u09fa\n\u00b7\f\u00b7\u000e\u00b7\u09fd\u000b\u00b7",
    "\u0003\u00b7\u0005\u00b7\u0a00\n\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0a08\n\u00b8",
    "\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0a0c\n\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0005\u00b9\u0a10\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0a1e\n\u00bd\u0003",
    "\u00be\u0003\u00be\u0005\u00be\u0a22\n\u00be\u0003\u00be\u0003\u00be",
    "\u0005\u00be\u0a26\n\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0a2f\n\u00c0",
    "\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0a33\n\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0005\u00c1\u0a37\n\u00c1\u0003\u00c1\u0007\u00c1\u0a3a\n\u00c1",
    "\f\u00c1\u000e\u00c1\u0a3d\u000b\u00c1\u0003\u00c2\u0003\u00c2\u0005",
    "\u00c2\u0a41\n\u00c2\u0003\u00c2\u0006\u00c2\u0a44\n\u00c2\r\u00c2\u000e",
    "\u00c2\u0a45\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0a4a\n\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0005\u00c3\u0a4e\n\u00c3\u0003\u00c3\u0007\u00c3",
    "\u0a51\n\u00c3\f\u00c3\u000e\u00c3\u0a54\u000b\u00c3\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0007\u00c7\u0a5f\n\u00c7\f\u00c7\u000e\u00c7\u0a62",
    "\u000b\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00ca",
    "\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb",
    "\u0a6e\n\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u0239\u0002",
    "\u00cd\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0002\u000e\u0004\u0002\t",
    "\t\u000f\u000f\u0003\u0002`c\u0003\u0002hi\u0004\u0002\u0005\u0005\u000f",
    "\u000f\u0003\u0002{|\u0005\u0002uu\u0095\u0095\u0098\u0098\u0003\u0002",
    "\u0089\u008b\u0003\u0002\u0093\u0094\u0004\u0002  %(\u0004\u0002!!)",
    ",\u0004\u0002\u0005\u0005-7\u0003\u00028\u0085\u0002\u0b99\u0002\u0199",
    "\u0003\u0002\u0002\u0002\u0004\u01a0\u0003\u0002\u0002\u0002\u0006\u01ad",
    "\u0003\u0002\u0002\u0002\b\u01b2\u0003\u0002\u0002\u0002\n\u01bb\u0003",
    "\u0002\u0002\u0002\f\u01cd\u0003\u0002\u0002\u0002\u000e\u01cf\u0003",
    "\u0002\u0002\u0002\u0010\u01d9\u0003\u0002\u0002\u0002\u0012\u01db\u0003",
    "\u0002\u0002\u0002\u0014\u01ef\u0003\u0002\u0002\u0002\u0016\u01f2\u0003",
    "\u0002\u0002\u0002\u0018\u01f8\u0003\u0002\u0002\u0002\u001a\u0200\u0003",
    "\u0002\u0002\u0002\u001c\u0208\u0003\u0002\u0002\u0002\u001e\u020a\u0003",
    "\u0002\u0002\u0002 \u0212\u0003\u0002\u0002\u0002\"\u0214\u0003\u0002",
    "\u0002\u0002$\u0219\u0003\u0002\u0002\u0002&\u021b\u0003\u0002\u0002",
    "\u0002(\u021e\u0003\u0002\u0002\u0002*\u0221\u0003\u0002\u0002\u0002",
    ",\u0229\u0003\u0002\u0002\u0002.\u0232\u0003\u0002\u0002\u00020\u023d",
    "\u0003\u0002\u0002\u00022\u0241\u0003\u0002\u0002\u00024\u025f\u0003",
    "\u0002\u0002\u00026\u0261\u0003\u0002\u0002\u00028\u0287\u0003\u0002",
    "\u0002\u0002:\u028f\u0003\u0002\u0002\u0002<\u0291\u0003\u0002\u0002",
    "\u0002>\u029f\u0003\u0002\u0002\u0002@\u02a6\u0003\u0002\u0002\u0002",
    "B\u02ae\u0003\u0002\u0002\u0002D\u02b7\u0003\u0002\u0002\u0002F\u02bd",
    "\u0003\u0002\u0002\u0002H\u02bf\u0003\u0002\u0002\u0002J\u02cb\u0003",
    "\u0002\u0002\u0002L\u02cd\u0003\u0002\u0002\u0002N\u02cf\u0003\u0002",
    "\u0002\u0002P\u02d1\u0003\u0002\u0002\u0002R\u02dd\u0003\u0002\u0002",
    "\u0002T\u02e1\u0003\u0002\u0002\u0002V\u02e3\u0003\u0002\u0002\u0002",
    "X\u02ed\u0003\u0002\u0002\u0002Z\u02f3\u0003\u0002\u0002\u0002\\\u02fd",
    "\u0003\u0002\u0002\u0002^\u0306\u0003\u0002\u0002\u0002`\u031c\u0003",
    "\u0002\u0002\u0002b\u032c\u0003\u0002\u0002\u0002d\u0338\u0003\u0002",
    "\u0002\u0002f\u033a\u0003\u0002\u0002\u0002h\u033e\u0003\u0002\u0002",
    "\u0002j\u0342\u0003\u0002\u0002\u0002l\u0346\u0003\u0002\u0002\u0002",
    "n\u034a\u0003\u0002\u0002\u0002p\u034e\u0003\u0002\u0002\u0002r\u0352",
    "\u0003\u0002\u0002\u0002t\u0356\u0003\u0002\u0002\u0002v\u035a\u0003",
    "\u0002\u0002\u0002x\u035e\u0003\u0002\u0002\u0002z\u0362\u0003\u0002",
    "\u0002\u0002|\u0376\u0003\u0002\u0002\u0002~\u0391\u0003\u0002\u0002",
    "\u0002\u0080\u03b6\u0003\u0002\u0002\u0002\u0082\u03cd\u0003\u0002\u0002",
    "\u0002\u0084\u0416\u0003\u0002\u0002\u0002\u0086\u0418\u0003\u0002\u0002",
    "\u0002\u0088\u0431\u0003\u0002\u0002\u0002\u008a\u0444\u0003\u0002\u0002",
    "\u0002\u008c\u044e\u0003\u0002\u0002\u0002\u008e\u0464\u0003\u0002\u0002",
    "\u0002\u0090\u0466\u0003\u0002\u0002\u0002\u0092\u046c\u0003\u0002\u0002",
    "\u0002\u0094\u0474\u0003\u0002\u0002\u0002\u0096\u04aa\u0003\u0002\u0002",
    "\u0002\u0098\u04ae\u0003\u0002\u0002\u0002\u009a\u04c2\u0003\u0002\u0002",
    "\u0002\u009c\u04d6\u0003\u0002\u0002\u0002\u009e\u04d8\u0003\u0002\u0002",
    "\u0002\u00a0\u04f4\u0003\u0002\u0002\u0002\u00a2\u0503\u0003\u0002\u0002",
    "\u0002\u00a4\u050f\u0003\u0002\u0002\u0002\u00a6\u0538\u0003\u0002\u0002",
    "\u0002\u00a8\u0541\u0003\u0002\u0002\u0002\u00aa\u0543\u0003\u0002\u0002",
    "\u0002\u00ac\u054c\u0003\u0002\u0002\u0002\u00ae\u0553\u0003\u0002\u0002",
    "\u0002\u00b0\u0556\u0003\u0002\u0002\u0002\u00b2\u056f\u0003\u0002\u0002",
    "\u0002\u00b4\u0585\u0003\u0002\u0002\u0002\u00b6\u0587\u0003\u0002\u0002",
    "\u0002\u00b8\u058d\u0003\u0002\u0002\u0002\u00ba\u058f\u0003\u0002\u0002",
    "\u0002\u00bc\u0591\u0003\u0002\u0002\u0002\u00be\u05a3\u0003\u0002\u0002",
    "\u0002\u00c0\u05a7\u0003\u0002\u0002\u0002\u00c2\u05ab\u0003\u0002\u0002",
    "\u0002\u00c4\u05b6\u0003\u0002\u0002\u0002\u00c6\u05e8\u0003\u0002\u0002",
    "\u0002\u00c8\u05fb\u0003\u0002\u0002\u0002\u00ca\u0607\u0003\u0002\u0002",
    "\u0002\u00cc\u0609\u0003\u0002\u0002\u0002\u00ce\u0612\u0003\u0002\u0002",
    "\u0002\u00d0\u0618\u0003\u0002\u0002\u0002\u00d2\u0623\u0003\u0002\u0002",
    "\u0002\u00d4\u062c\u0003\u0002\u0002\u0002\u00d6\u0634\u0003\u0002\u0002",
    "\u0002\u00d8\u0642\u0003\u0002\u0002\u0002\u00da\u0646\u0003\u0002\u0002",
    "\u0002\u00dc\u065f\u0003\u0002\u0002\u0002\u00de\u0663\u0003\u0002\u0002",
    "\u0002\u00e0\u0673\u0003\u0002\u0002\u0002\u00e2\u0675\u0003\u0002\u0002",
    "\u0002\u00e4\u068d\u0003\u0002\u0002\u0002\u00e6\u0693\u0003\u0002\u0002",
    "\u0002\u00e8\u06a6\u0003\u0002\u0002\u0002\u00ea\u06af\u0003\u0002\u0002",
    "\u0002\u00ec\u06b1\u0003\u0002\u0002\u0002\u00ee\u06ce\u0003\u0002\u0002",
    "\u0002\u00f0\u06d0\u0003\u0002\u0002\u0002\u00f2\u06d6\u0003\u0002\u0002",
    "\u0002\u00f4\u06e1\u0003\u0002\u0002\u0002\u00f6\u06e5\u0003\u0002\u0002",
    "\u0002\u00f8\u06e9\u0003\u0002\u0002\u0002\u00fa\u06f3\u0003\u0002\u0002",
    "\u0002\u00fc\u06f6\u0003\u0002\u0002\u0002\u00fe\u070c\u0003\u0002\u0002",
    "\u0002\u0100\u070e\u0003\u0002\u0002\u0002\u0102\u0710\u0003\u0002\u0002",
    "\u0002\u0104\u0712\u0003\u0002\u0002\u0002\u0106\u071c\u0003\u0002\u0002",
    "\u0002\u0108\u0726\u0003\u0002\u0002\u0002\u010a\u0736\u0003\u0002\u0002",
    "\u0002\u010c\u073b\u0003\u0002\u0002\u0002\u010e\u0745\u0003\u0002\u0002",
    "\u0002\u0110\u075b\u0003\u0002\u0002\u0002\u0112\u0779\u0003\u0002\u0002",
    "\u0002\u0114\u078d\u0003\u0002\u0002\u0002\u0116\u0792\u0003\u0002\u0002",
    "\u0002\u0118\u07cb\u0003\u0002\u0002\u0002\u011a\u07d8\u0003\u0002\u0002",
    "\u0002\u011c\u07e6\u0003\u0002\u0002\u0002\u011e\u07e8\u0003\u0002\u0002",
    "\u0002\u0120\u07f6\u0003\u0002\u0002\u0002\u0122\u07f8\u0003\u0002\u0002",
    "\u0002\u0124\u0806\u0003\u0002\u0002\u0002\u0126\u0808\u0003\u0002\u0002",
    "\u0002\u0128\u0816\u0003\u0002\u0002\u0002\u012a\u0818\u0003\u0002\u0002",
    "\u0002\u012c\u0826\u0003\u0002\u0002\u0002\u012e\u0828\u0003\u0002\u0002",
    "\u0002\u0130\u0836\u0003\u0002\u0002\u0002\u0132\u0838\u0003\u0002\u0002",
    "\u0002\u0134\u0850\u0003\u0002\u0002\u0002\u0136\u0852\u0003\u0002\u0002",
    "\u0002\u0138\u0878\u0003\u0002\u0002\u0002\u013a\u0896\u0003\u0002\u0002",
    "\u0002\u013c\u0898\u0003\u0002\u0002\u0002\u013e\u089a\u0003\u0002\u0002",
    "\u0002\u0140\u08bb\u0003\u0002\u0002\u0002\u0142\u08c4\u0003\u0002\u0002",
    "\u0002\u0144\u08c6\u0003\u0002\u0002\u0002\u0146\u08c8\u0003\u0002\u0002",
    "\u0002\u0148\u08ca\u0003\u0002\u0002\u0002\u014a\u0906\u0003\u0002\u0002",
    "\u0002\u014c\u0908\u0003\u0002\u0002\u0002\u014e\u0912\u0003\u0002\u0002",
    "\u0002\u0150\u091b\u0003\u0002\u0002\u0002\u0152\u0922\u0003\u0002\u0002",
    "\u0002\u0154\u0928\u0003\u0002\u0002\u0002\u0156\u094b\u0003\u0002\u0002",
    "\u0002\u0158\u094e\u0003\u0002\u0002\u0002\u015a\u0950\u0003\u0002\u0002",
    "\u0002\u015c\u0952\u0003\u0002\u0002\u0002\u015e\u0966\u0003\u0002\u0002",
    "\u0002\u0160\u098c\u0003\u0002\u0002\u0002\u0162\u09a8\u0003\u0002\u0002",
    "\u0002\u0164\u09b9\u0003\u0002\u0002\u0002\u0166\u09c7\u0003\u0002\u0002",
    "\u0002\u0168\u09cb\u0003\u0002\u0002\u0002\u016a\u09cd\u0003\u0002\u0002",
    "\u0002\u016c\u09e6\u0003\u0002\u0002\u0002\u016e\u0a07\u0003\u0002\u0002",
    "\u0002\u0170\u0a09\u0003\u0002\u0002\u0002\u0172\u0a13\u0003\u0002\u0002",
    "\u0002\u0174\u0a16\u0003\u0002\u0002\u0002\u0176\u0a18\u0003\u0002\u0002",
    "\u0002\u0178\u0a1d\u0003\u0002\u0002\u0002\u017a\u0a1f\u0003\u0002\u0002",
    "\u0002\u017c\u0a29\u0003\u0002\u0002\u0002\u017e\u0a2e\u0003\u0002\u0002",
    "\u0002\u0180\u0a30\u0003\u0002\u0002\u0002\u0182\u0a3e\u0003\u0002\u0002",
    "\u0002\u0184\u0a47\u0003\u0002\u0002\u0002\u0186\u0a55\u0003\u0002\u0002",
    "\u0002\u0188\u0a57\u0003\u0002\u0002\u0002\u018a\u0a59\u0003\u0002\u0002",
    "\u0002\u018c\u0a60\u0003\u0002\u0002\u0002\u018e\u0a63\u0003\u0002\u0002",
    "\u0002\u0190\u0a65\u0003\u0002\u0002\u0002\u0192\u0a67\u0003\u0002\u0002",
    "\u0002\u0194\u0a6d\u0003\u0002\u0002\u0002\u0196\u0a6f\u0003\u0002\u0002",
    "\u0002\u0198\u019a\u0005\u0004\u0003\u0002\u0199\u0198\u0003\u0002\u0002",
    "\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002\u0002",
    "\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0007\u0002\u0002\u0003\u019e\u0003\u0003\u0002\u0002",
    "\u0002\u019f\u01a1\u0007\u0099\u0002\u0002\u01a0\u019f\u0003\u0002\u0002",
    "\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a4\u0003\u0002\u0002",
    "\u0002\u01a2\u01a5\u0005B\"\u0002\u01a3\u01a5\u0005\u0006\u0004\u0002",
    "\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002",
    "\u01a5\u01a7\u0003\u0002\u0002\u0002\u01a6\u01a8\u0007\u0099\u0002\u0002",
    "\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002",
    "\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab\u0007\u0003\u0002\u0002",
    "\u01aa\u01ac\u0007\u0099\u0002\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002",
    "\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u0005\u0003\u0002\u0002\u0002",
    "\u01ad\u01b0\u0005\b\u0005\u0002\u01ae\u01af\u0007\u0099\u0002\u0002",
    "\u01af\u01b1\u0005\n\u0006\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002",
    "\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u0007\u0003\u0002\u0002\u0002",
    "\u01b2\u01b3\u0007\u0004\u0002\u0002\u01b3\u01b8\u0005\u0194\u00cb\u0002",
    "\u01b4\u01b5\u0007\u0005\u0002\u0002\u01b5\u01b7\u0005\u0194\u00cb\u0002",
    "\u01b6\u01b4\u0003\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002",
    "\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002",
    "\u01b9\t\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002",
    "\u01bb\u01c0\u0005\f\u0007\u0002\u01bc\u01bd\u0007\u0099\u0002\u0002",
    "\u01bd\u01bf\u0005\f\u0007\u0002\u01be\u01bc\u0003\u0002\u0002\u0002",
    "\u01bf\u01c2\u0003\u0002\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002",
    "\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u000b\u0003\u0002\u0002\u0002",
    "\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c3\u01ce\u0005\u0010\t\u0002",
    "\u01c4\u01ce\u00052\u001a\u0002\u01c5\u01ce\u0005\u000e\b\u0002\u01c6",
    "\u01ce\u0005\u016a\u00b6\u0002\u01c7\u01ce\u0005<\u001f\u0002\u01c8",
    "\u01ce\u0005\u0144\u00a3\u0002\u01c9\u01ce\u0005\u0168\u00b5\u0002\u01ca",
    "\u01ce\u0005\u0146\u00a4\u0002\u01cb\u01ce\u0005@!\u0002\u01cc\u01ce",
    "\u0005> \u0002\u01cd\u01c3\u0003\u0002\u0002\u0002\u01cd\u01c4\u0003",
    "\u0002\u0002\u0002\u01cd\u01c5\u0003\u0002\u0002\u0002\u01cd\u01c6\u0003",
    "\u0002\u0002\u0002\u01cd\u01c7\u0003\u0002\u0002\u0002\u01cd\u01c8\u0003",
    "\u0002\u0002\u0002\u01cd\u01c9\u0003\u0002\u0002\u0002\u01cd\u01ca\u0003",
    "\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01cd\u01cc\u0003",
    "\u0002\u0002\u0002\u01ce\r\u0003\u0002\u0002\u0002\u01cf\u01d1\u0005",
    "\u0194\u00cb\u0002\u01d0\u01d2\u0007\u0099\u0002\u0002\u01d1\u01d0\u0003",
    "\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003",
    "\u0002\u0002\u0002\u01d3\u01d5\u0007\u0006\u0002\u0002\u01d4\u01d6\u0007",
    "\u0099\u0002\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8\u0005",
    "\u0102\u0082\u0002\u01d8\u000f\u0003\u0002\u0002\u0002\u01d9\u01da\u0005",
    "\u0012\n\u0002\u01da\u0011\u0003\u0002\u0002\u0002\u01db\u01dc\u0005",
    "\u0014\u000b\u0002\u01dc\u01de\u0007\u0007\u0002\u0002\u01dd\u01df\u0005",
    "\"\u0012\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01de\u01df\u0003",
    "\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e3\u0005",
    "\u0016\f\u0002\u01e1\u01e2\u0007\u0004\u0002\u0002\u01e2\u01e4\u0005",
    "\u001c\u000f\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003",
    "\u0002\u0002\u0002\u01e4\u01e7\u0003\u0002\u0002\u0002\u01e5\u01e6\u0007",
    "\b\u0002\u0002\u01e6\u01e8\u0005\u001e\u0010\u0002\u01e7\u01e5\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea\u0003",
    "\u0002\u0002\u0002\u01e9\u01eb\u0005(\u0015\u0002\u01ea\u01e9\u0003",
    "\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ed\u0003",
    "\u0002\u0002\u0002\u01ec\u01ee\u0005&\u0014\u0002\u01ed\u01ec\u0003",
    "\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u0013\u0003",
    "\u0002\u0002\u0002\u01ef\u01f0\u0005.\u0018\u0002\u01f0\u0015\u0003",
    "\u0002\u0002\u0002\u01f1\u01f3\u0007\b\u0002\u0002\u01f2\u01f1\u0003",
    "\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f6\u0003",
    "\u0002\u0002\u0002\u01f4\u01f7\u0005\u0018\r\u0002\u01f5\u01f7\u0005",
    "\u001a\u000e\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f5\u0003",
    "\u0002\u0002\u0002\u01f7\u0017\u0003\u0002\u0002\u0002\u01f8\u01fd\u0005",
    ".\u0018\u0002\u01f9\u01fa\u0007\t\u0002\u0002\u01fa\u01fc\u0005.\u0018",
    "\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fc\u01ff\u0003\u0002\u0002",
    "\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002",
    "\u0002\u01fe\u0019\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u00050\u0019\u0002\u0201\u0202\u0007\t\u0002\u0002",
    "\u0202\u0203\u00050\u0019\u0002\u0203\u0204\u0007\t\u0002\u0002\u0204",
    "\u0205\u00050\u0019\u0002\u0205\u0206\u0007\t\u0002\u0002\u0206\u0207",
    "\u00050\u0019\u0002\u0207\u001b\u0003\u0002\u0002\u0002\u0208\u0209",
    "\u00050\u0019\u0002\u0209\u001d\u0003\u0002\u0002\u0002\u020a\u020f",
    "\u0005.\u0018\u0002\u020b\u020c\u0007\b\u0002\u0002\u020c\u020e\u0005",
    ".\u0018\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020e\u0211\u0003",
    "\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003",
    "\u0002\u0002\u0002\u0210\u001f\u0003\u0002\u0002\u0002\u0211\u020f\u0003",
    "\u0002\u0002\u0002\u0212\u0213\u0005.\u0018\u0002\u0213!\u0003\u0002",
    "\u0002\u0002\u0214\u0215\u0005 \u0011\u0002\u0215\u0216\u0007\u0004",
    "\u0002\u0002\u0216\u0217\u0005$\u0013\u0002\u0217\u0218\u0007\n\u0002",
    "\u0002\u0218#\u0003\u0002\u0002\u0002\u0219\u021a\u0005.\u0018\u0002",
    "\u021a%\u0003\u0002\u0002\u0002\u021b\u021c\u0007\u000b\u0002\u0002",
    "\u021c\u021d\u0005.\u0018\u0002\u021d\'\u0003\u0002\u0002\u0002\u021e",
    "\u021f\u0007\f\u0002\u0002\u021f\u0220\u0005*\u0016\u0002\u0220)\u0003",
    "\u0002\u0002\u0002\u0221\u0226\u0005,\u0017\u0002\u0222\u0223\u0007",
    "\r\u0002\u0002\u0223\u0225\u0005,\u0017\u0002\u0224\u0222\u0003\u0002",
    "\u0002\u0002\u0225\u0228\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002",
    "\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227+\u0003\u0002",
    "\u0002\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0229\u0230\u0005.",
    "\u0018\u0002\u022a\u022e\u0007\u000e\u0002\u0002\u022b\u022f\u0005.",
    "\u0018\u0002\u022c\u022f\u00050\u0019\u0002\u022d\u022f\u0007\u0087",
    "\u0002\u0002\u022e\u022b\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002",
    "\u0002\u0002\u022e\u022d\u0003\u0002\u0002\u0002\u022f\u0231\u0003\u0002",
    "\u0002\u0002\u0230\u022a\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u0231-\u0003\u0002\u0002\u0002\u0232\u0239\u0005\u0194",
    "\u00cb\u0002\u0233\u0235\t\u0002\u0002\u0002\u0234\u0233\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002",
    "\u0002\u0002\u0236\u0238\u0005\u0194\u00cb\u0002\u0237\u0234\u0003\u0002",
    "\u0002\u0002\u0238\u023b\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002",
    "\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u023a/\u0003\u0002",
    "\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023c\u023e\u0005\u0188",
    "\u00c5\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002",
    "\u0002\u0002\u023f\u023d\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002",
    "\u0002\u0002\u02401\u0003\u0002\u0002\u0002\u0241\u0242\u0005:\u001e",
    "\u0002\u02423\u0003\u0002\u0002\u0002\u0243\u0245\u0007\u0010\u0002",
    "\u0002\u0244\u0246\u0007\u0099\u0002\u0002\u0245\u0244\u0003\u0002\u0002",
    "\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002",
    "\u0002\u0247\u0249\u00056\u001c\u0002\u0248\u024a\u0007\u0099\u0002",
    "\u0002\u0249\u0248\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002",
    "\u0002\u024a\u0255\u0003\u0002\u0002\u0002\u024b\u024d\u0007\u0011\u0002",
    "\u0002\u024c\u024e\u0007\u0099\u0002\u0002\u024d\u024c\u0003\u0002\u0002",
    "\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002",
    "\u0002\u024f\u0251\u00056\u001c\u0002\u0250\u0252\u0007\u0099\u0002",
    "\u0002\u0251\u0250\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002",
    "\u0002\u0252\u0254\u0003\u0002\u0002\u0002\u0253\u024b\u0003\u0002\u0002",
    "\u0002\u0254\u0257\u0003\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002",
    "\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0258\u0003\u0002\u0002",
    "\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0258\u0259\u0007\u0012\u0002",
    "\u0002\u0259\u0260\u0003\u0002\u0002\u0002\u025a\u025c\u0007\u0010\u0002",
    "\u0002\u025b\u025d\u0007\u0099\u0002\u0002\u025c\u025b\u0003\u0002\u0002",
    "\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002",
    "\u0002\u025e\u0260\u0007\u0012\u0002\u0002\u025f\u0243\u0003\u0002\u0002",
    "\u0002\u025f\u025a\u0003\u0002\u0002\u0002\u02605\u0003\u0002\u0002",
    "\u0002\u0261\u0263\u0005\u0144\u00a3\u0002\u0262\u0264\u0007\u0099\u0002",
    "\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002",
    "\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0267\u0007\u0004\u0002",
    "\u0002\u0266\u0268\u0007\u0099\u0002\u0002\u0267\u0266\u0003\u0002\u0002",
    "\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0005:\u001e\u0002\u026a7\u0003\u0002\u0002\u0002",
    "\u026b\u026d\u0007\u0013\u0002\u0002\u026c\u026e\u0007\u0099\u0002\u0002",
    "\u026d\u026c\u0003\u0002\u0002\u0002\u026d\u026e\u0003\u0002\u0002\u0002",
    "\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0271\u0005:\u001e\u0002",
    "\u0270\u0272\u0007\u0099\u0002\u0002\u0271\u0270\u0003\u0002\u0002\u0002",
    "\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u027d\u0003\u0002\u0002\u0002",
    "\u0273\u0275\u0007\u0011\u0002\u0002\u0274\u0276\u0007\u0099\u0002\u0002",
    "\u0275\u0274\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0279\u0005:\u001e\u0002",
    "\u0278\u027a\u0007\u0099\u0002\u0002\u0279\u0278\u0003\u0002\u0002\u0002",
    "\u0279\u027a\u0003\u0002\u0002\u0002\u027a\u027c\u0003\u0002\u0002\u0002",
    "\u027b\u0273\u0003\u0002\u0002\u0002\u027c\u027f\u0003\u0002\u0002\u0002",
    "\u027d\u027b\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002",
    "\u027e\u0280\u0003\u0002\u0002\u0002\u027f\u027d\u0003\u0002\u0002\u0002",
    "\u0280\u0281\u0007\u0014\u0002\u0002\u0281\u0288\u0003\u0002\u0002\u0002",
    "\u0282\u0284\u0007\u0013\u0002\u0002\u0283\u0285\u0007\u0099\u0002\u0002",
    "\u0284\u0283\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002",
    "\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0288\u0007\u0014\u0002\u0002",
    "\u0287\u026b\u0003\u0002\u0002\u0002\u0287\u0282\u0003\u0002\u0002\u0002",
    "\u02889\u0003\u0002\u0002\u0002\u0289\u0290\u0005\u0144\u00a3\u0002",
    "\u028a\u0290\u0005\u0168\u00b5\u0002\u028b\u0290\u00054\u001b\u0002",
    "\u028c\u0290\u00058\u001d\u0002\u028d\u0290\u0005\u0146\u00a4\u0002",
    "\u028e\u0290\u0007t\u0002\u0002\u028f\u0289\u0003\u0002\u0002\u0002",
    "\u028f\u028a\u0003\u0002\u0002\u0002\u028f\u028b\u0003\u0002\u0002\u0002",
    "\u028f\u028c\u0003\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002\u0002",
    "\u028f\u028e\u0003\u0002\u0002\u0002\u0290;\u0003\u0002\u0002\u0002",
    "\u0291\u0292\u0005\u0166\u00b4\u0002\u0292\u0293\u0007\u0004\u0002\u0002",
    "\u0293\u0298\u0007\u0099\u0002\u0002\u0294\u0299\u0007\u0086\u0002\u0002",
    "\u0295\u0299\u0005\u0168\u00b5\u0002\u0296\u0299\u0005\u0146\u00a4\u0002",
    "\u0297\u0299\u0005\u0194\u00cb\u0002\u0298\u0294\u0003\u0002\u0002\u0002",
    "\u0298\u0295\u0003\u0002\u0002\u0002\u0298\u0296\u0003\u0002\u0002\u0002",
    "\u0298\u0297\u0003\u0002\u0002\u0002\u0299=\u0003\u0002\u0002\u0002",
    "\u029a\u029d\u0007\b\u0002\u0002\u029b\u029e\u0005\u0194\u00cb\u0002",
    "\u029c\u029e\u0005\u0168\u00b5\u0002\u029d\u029b\u0003\u0002\u0002\u0002",
    "\u029d\u029c\u0003\u0002\u0002\u0002\u029e\u02a0\u0003\u0002\u0002\u0002",
    "\u029f\u029a\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002",
    "\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002",
    "\u02a2\u02a4\u0003\u0002\u0002\u0002\u02a3\u02a5\u0007\b\u0002\u0002",
    "\u02a4\u02a3\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002",
    "\u02a5?\u0003\u0002\u0002\u0002\u02a6\u02ab\u0005\u0194\u00cb\u0002",
    "\u02a7\u02a8\u0007\u0005\u0002\u0002\u02a8\u02aa\u0005\u0194\u00cb\u0002",
    "\u02a9\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ad\u0003\u0002\u0002\u0002",
    "\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002",
    "\u02acA\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002",
    "\u02ae\u02af\u0005D#\u0002\u02af\u02b0\u0005R*\u0002\u02b0C\u0003\u0002",
    "\u0002\u0002\u02b1\u02b3\u0005F$\u0002\u02b2\u02b4\u0007\u0099\u0002",
    "\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002",
    "\u0002\u02b4\u02b6\u0003\u0002\u0002\u0002\u02b5\u02b1\u0003\u0002\u0002",
    "\u0002\u02b6\u02b9\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002",
    "\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8E\u0003\u0002\u0002",
    "\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02ba\u02be\u0005H%\u0002",
    "\u02bb\u02be\u0005L\'\u0002\u02bc\u02be\u0005N(\u0002\u02bd\u02ba\u0003",
    "\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002\u02bd\u02bc\u0003",
    "\u0002\u0002\u0002\u02beG\u0003\u0002\u0002\u0002\u02bf\u02c2\u0007",
    "8\u0002\u0002\u02c0\u02c1\u0007\u0099\u0002\u0002\u02c1\u02c3\u0005",
    "J&\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002",
    "\u0002\u0002\u02c3\u02c8\u0003\u0002\u0002\u0002\u02c4\u02c5\u0007\u0099",
    "\u0002\u0002\u02c5\u02c7\u0005P)\u0002\u02c6\u02c4\u0003\u0002\u0002",
    "\u0002\u02c7\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9I\u0003\u0002\u0002",
    "\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007\u0094\u0002",
    "\u0002\u02ccK\u0003\u0002\u0002\u0002\u02cd\u02ce\u00079\u0002\u0002",
    "\u02ceM\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007:\u0002\u0002\u02d0",
    "O\u0003\u0002\u0002\u0002\u02d1\u02d3\u0005\u0194\u00cb\u0002\u02d2",
    "\u02d4\u0007\u0099\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3",
    "\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5",
    "\u02d7\u0007\u000e\u0002\u0002\u02d6\u02d8\u0007\u0099\u0002\u0002\u02d7",
    "\u02d6\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8",
    "\u02d9\u0003\u0002\u0002\u0002\u02d9\u02da\u0005\u0194\u00cb\u0002\u02da",
    "Q\u0003\u0002\u0002\u0002\u02db\u02de\u0005d3\u0002\u02dc\u02de\u0005",
    "T+\u0002\u02dd\u02db\u0003\u0002\u0002\u0002\u02dd\u02dc\u0003\u0002",
    "\u0002\u0002\u02deS\u0003\u0002\u0002\u0002\u02df\u02e2\u0005V,\u0002",
    "\u02e0\u02e2\u0005X-\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1",
    "\u02e0\u0003\u0002\u0002\u0002\u02e2U\u0003\u0002\u0002\u0002\u02e3",
    "\u02ea\u0005Z.\u0002\u02e4\u02e6\u0007\u0099\u0002\u0002\u02e5\u02e4",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7",
    "\u0003\u0002\u0002\u0002\u02e7\u02e9\u0005`1\u0002\u02e8\u02e5\u0003",
    "\u0002\u0002\u0002\u02e9\u02ec\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003",
    "\u0002\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02ebW\u0003",
    "\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ed\u02ef\u0005",
    "\\/\u0002\u02ee\u02f0\u0007\u0099\u0002\u0002\u02ef\u02ee\u0003\u0002",
    "\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002",
    "\u0002\u0002\u02f1\u02f2\u0005^0\u0002\u02f2Y\u0003\u0002\u0002\u0002",
    "\u02f3\u02fa\u0005b2\u0002\u02f4\u02f6\u0007\u0099\u0002\u0002\u02f5",
    "\u02f4\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6",
    "\u02f7\u0003\u0002\u0002\u0002\u02f7\u02f9\u0005b2\u0002\u02f8\u02f5",
    "\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002\u02fa\u02f8",
    "\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb[",
    "\u0003\u0002\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u02fe",
    "\u0007;\u0002\u0002\u02fe\u02ff\u0007\u0099\u0002\u0002\u02ff\u0300",
    "\u0007<\u0002\u0002\u0300\u0301\u0007\u0099\u0002\u0002\u0301\u0304",
    "\u0007=\u0002\u0002\u0302\u0303\u0007\u0099\u0002\u0002\u0303\u0305",
    "\u0005\u0188\u00c5\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0304\u0305",
    "\u0003\u0002\u0002\u0002\u0305]\u0003\u0002\u0002\u0002\u0306\u030d",
    "\u0005\u0086D\u0002\u0307\u0309\u0007\u0099\u0002\u0002\u0308\u0307",
    "\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0003\u0002\u0002\u0002\u030a\u030c\u0005b2\u0002\u030b\u0308\u0003",
    "\u0002\u0002\u0002\u030c\u030f\u0003\u0002\u0002\u0002\u030d\u030b\u0003",
    "\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e_\u0003",
    "\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u0310\u0311\u0007",
    ">\u0002\u0002\u0311\u0312\u0007\u0099\u0002\u0002\u0312\u0314\u0007",
    "?\u0002\u0002\u0313\u0315\u0007\u0099\u0002\u0002\u0314\u0313\u0003",
    "\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0316\u0003",
    "\u0002\u0002\u0002\u0316\u031d\u0005Z.\u0002\u0317\u0319\u0007>\u0002",
    "\u0002\u0318\u031a\u0007\u0099\u0002\u0002\u0319\u0318\u0003\u0002\u0002",
    "\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002",
    "\u0002\u031b\u031d\u0005Z.\u0002\u031c\u0310\u0003\u0002\u0002\u0002",
    "\u031c\u0317\u0003\u0002\u0002\u0002\u031da\u0003\u0002\u0002\u0002",
    "\u031e\u032d\u0005\u0086D\u0002\u031f\u032d\u0005\u00c6d\u0002\u0320",
    "\u032d\u0005\u0088E\u0002\u0321\u032d\u0005\u008aF\u0002\u0322\u032d",
    "\u0005\u008cG\u0002\u0323\u032d\u0005\u0090I\u0002\u0324\u032d\u0005",
    "\u0092J\u0002\u0325\u032d\u0005\u0094K\u0002\u0326\u032d\u0005\u0098",
    "M\u0002\u0327\u032d\u0005\u009aN\u0002\u0328\u032d\u0005\u009eP\u0002",
    "\u0329\u032d\u0005\u00a0Q\u0002\u032a\u032d\u0005\u00a2R\u0002\u032b",
    "\u032d\u0005\u00aaV\u0002\u032c\u031e\u0003\u0002\u0002\u0002\u032c",
    "\u031f\u0003\u0002\u0002\u0002\u032c\u0320\u0003\u0002\u0002\u0002\u032c",
    "\u0321\u0003\u0002\u0002\u0002\u032c\u0322\u0003\u0002\u0002\u0002\u032c",
    "\u0323\u0003\u0002\u0002\u0002\u032c\u0324\u0003\u0002\u0002\u0002\u032c",
    "\u0325\u0003\u0002\u0002\u0002\u032c\u0326\u0003\u0002\u0002\u0002\u032c",
    "\u0327\u0003\u0002\u0002\u0002\u032c\u0328\u0003\u0002\u0002\u0002\u032c",
    "\u0329\u0003\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002\u0002\u032c",
    "\u032b\u0003\u0002\u0002\u0002\u032dc\u0003\u0002\u0002\u0002\u032e",
    "\u0339\u0005n8\u0002\u032f\u0339\u0005x=\u0002\u0330\u0339\u0005f4\u0002",
    "\u0331\u0339\u0005p9\u0002\u0332\u0339\u0005h5\u0002\u0333\u0339\u0005",
    "r:\u0002\u0334\u0339\u0005j6\u0002\u0335\u0339\u0005t;\u0002\u0336\u0339",
    "\u0005l7\u0002\u0337\u0339\u0005v<\u0002\u0338\u032e\u0003\u0002\u0002",
    "\u0002\u0338\u032f\u0003\u0002\u0002\u0002\u0338\u0330\u0003\u0002\u0002",
    "\u0002\u0338\u0331\u0003\u0002\u0002\u0002\u0338\u0332\u0003\u0002\u0002",
    "\u0002\u0338\u0333\u0003\u0002\u0002\u0002\u0338\u0334\u0003\u0002\u0002",
    "\u0002\u0338\u0335\u0003\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002",
    "\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0339e\u0003\u0002\u0002",
    "\u0002\u033a\u033b\u0007@\u0002\u0002\u033b\u033c\u0007\u0099\u0002",
    "\u0002\u033c\u033d\u0005|?\u0002\u033dg\u0003\u0002\u0002\u0002\u033e",
    "\u033f\u0007@\u0002\u0002\u033f\u0340\u0007\u0099\u0002\u0002\u0340",
    "\u0341\u0005~@\u0002\u0341i\u0003\u0002\u0002\u0002\u0342\u0343\u0007",
    "@\u0002\u0002\u0343\u0344\u0007\u0099\u0002\u0002\u0344\u0345\u0005",
    "\u0080A\u0002\u0345k\u0003\u0002\u0002\u0002\u0346\u0347\u0007@\u0002",
    "\u0002\u0347\u0348\u0007\u0099\u0002\u0002\u0348\u0349\u0005\u0082B",
    "\u0002\u0349m\u0003\u0002\u0002\u0002\u034a\u034b\u0007@\u0002\u0002",
    "\u034b\u034c\u0007\u0099\u0002\u0002\u034c\u034d\u0005z>\u0002\u034d",
    "o\u0003\u0002\u0002\u0002\u034e\u034f\u0007A\u0002\u0002\u034f\u0350",
    "\u0007\u0099\u0002\u0002\u0350\u0351\u0005|?\u0002\u0351q\u0003\u0002",
    "\u0002\u0002\u0352\u0353\u0007A\u0002\u0002\u0353\u0354\u0007\u0099",
    "\u0002\u0002\u0354\u0355\u0005~@\u0002\u0355s\u0003\u0002\u0002\u0002",
    "\u0356\u0357\u0007A\u0002\u0002\u0357\u0358\u0007\u0099\u0002\u0002",
    "\u0358\u0359\u0005\u0080A\u0002\u0359u\u0003\u0002\u0002\u0002\u035a",
    "\u035b\u0007A\u0002\u0002\u035b\u035c\u0007\u0099\u0002\u0002\u035c",
    "\u035d\u0005\u0082B\u0002\u035dw\u0003\u0002\u0002\u0002\u035e\u035f",
    "\u0007A\u0002\u0002\u035f\u0360\u0007\u0099\u0002\u0002\u0360\u0361",
    "\u0005z>\u0002\u0361y\u0003\u0002\u0002\u0002\u0362\u0363\u0007B\u0002",
    "\u0002\u0363\u0364\u0007\u0099\u0002\u0002\u0364\u0366\u0007C\u0002",
    "\u0002\u0365\u0367\u0007\u0099\u0002\u0002\u0366\u0365\u0003\u0002\u0002",
    "\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002",
    "\u0002\u0368\u036a\u0005\u00fa~\u0002\u0369\u036b\u0007\u0099\u0002",
    "\u0002\u036a\u0369\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002",
    "\u0002\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u036e\u0007\u0015\u0002",
    "\u0002\u036d\u036f\u0007\u0099\u0002\u0002\u036e\u036d\u0003\u0002\u0002",
    "\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002",
    "\u0002\u0370\u0372\u0005\u0184\u00c3\u0002\u0371\u0373\u0007\u0099\u0002",
    "\u0002\u0372\u0371\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002",
    "\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0007\u0016\u0002",
    "\u0002\u0375{\u0003\u0002\u0002\u0002\u0376\u0377\u0007D\u0002\u0002",
    "\u0377\u0378\u0007\u0099\u0002\u0002\u0378\u037a\u0007C\u0002\u0002",
    "\u0379\u037b\u0007\u0099\u0002\u0002\u037a\u0379\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002",
    "\u037c\u037e\u0007\u0015\u0002\u0002\u037d\u037f\u0007\u0099\u0002\u0002",
    "\u037e\u037d\u0003\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002",
    "\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u0381\u0005\u0166\u00b4\u0002",
    "\u0381\u0383\u0005\u00fa~\u0002\u0382\u0384\u0007\u0099\u0002\u0002",
    "\u0383\u0382\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002",
    "\u0384\u0385\u0003\u0002\u0002\u0002\u0385\u0387\u0007\u0016\u0002\u0002",
    "\u0386\u0388\u0007\u0099\u0002\u0002\u0387\u0386\u0003\u0002\u0002\u0002",
    "\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002",
    "\u0389\u038a\u0007E\u0002\u0002\u038a\u038b\u0007\u0099\u0002\u0002",
    "\u038b\u038c\u0005\u0182\u00c2\u0002\u038c\u038d\u0007\u0099\u0002\u0002",
    "\u038d\u038e\u0007F\u0002\u0002\u038e\u038f\u0007\u0099\u0002\u0002",
    "\u038f\u0390\u0007G\u0002\u0002\u0390}\u0003\u0002\u0002\u0002\u0391",
    "\u0392\u0007D\u0002\u0002\u0392\u0393\u0007\u0099\u0002\u0002\u0393",
    "\u0395\u0007C\u0002\u0002\u0394\u0396\u0007\u0099\u0002\u0002\u0395",
    "\u0394\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396",
    "\u0397\u0003\u0002\u0002\u0002\u0397\u0399\u0007\u0015\u0002\u0002\u0398",
    "\u039a\u0007\u0099\u0002\u0002\u0399\u0398\u0003\u0002\u0002\u0002\u0399",
    "\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b",
    "\u039c\u0005\u0166\u00b4\u0002\u039c\u039e\u0005\u00fa~\u0002\u039d",
    "\u039f\u0007\u0099\u0002\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039e",
    "\u039f\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0",
    "\u03a2\u0007\u0016\u0002\u0002\u03a1\u03a3\u0007\u0099\u0002\u0002\u03a2",
    "\u03a1\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3",
    "\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a5\u0007E\u0002\u0002\u03a5",
    "\u03a6\u0007\u0099\u0002\u0002\u03a6\u03a8\u0007\u0015\u0002\u0002\u03a7",
    "\u03a9\u0007\u0099\u0002\u0002\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a8",
    "\u03a9\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa",
    "\u03ac\u0005\u0180\u00c1\u0002\u03ab\u03ad\u0007\u0099\u0002\u0002\u03ac",
    "\u03ab\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad",
    "\u03ae\u0003\u0002\u0002\u0002\u03ae\u03af\u0007\u0016\u0002\u0002\u03af",
    "\u03b0\u0007\u0099\u0002\u0002\u03b0\u03b1\u0007F\u0002\u0002\u03b1",
    "\u03b2\u0007\u0099\u0002\u0002\u03b2\u03b3\u0007g\u0002\u0002\u03b3",
    "\u03b4\u0007\u0099\u0002\u0002\u03b4\u03b5\u0007\u0085\u0002\u0002\u03b5",
    "\u007f\u0003\u0002\u0002\u0002\u03b6\u03b7\u0007D\u0002\u0002\u03b7",
    "\u03b8\u0007\u0099\u0002\u0002\u03b8\u03ba\u0007C\u0002\u0002\u03b9",
    "\u03bb\u0007\u0099\u0002\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba",
    "\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc",
    "\u03bd\u0007\u0015\u0002\u0002\u03bd\u03be\u0005\u0166\u00b4\u0002\u03be",
    "\u03bf\u0005\u00fa~\u0002\u03bf\u03c1\u0007\u0016\u0002\u0002\u03c0",
    "\u03c2\u0007\u0099\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1",
    "\u03c2\u0003\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\u0007E\u0002\u0002\u03c4\u03c5\u0007\u0099\u0002\u0002\u03c5",
    "\u03c7\u0007H\u0002\u0002\u03c6\u03c8\u0007\u0099\u0002\u0002\u03c7",
    "\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8",
    "\u03c9\u0003\u0002\u0002\u0002\u03c9\u03ca\u0007\u0015\u0002\u0002\u03ca",
    "\u03cb\u0005\u0182\u00c2\u0002\u03cb\u03cc\u0007\u0016\u0002\u0002\u03cc",
    "\u0081\u0003\u0002\u0002\u0002\u03cd\u03ce\u0007D\u0002\u0002\u03ce",
    "\u03cf\u0007\u0099\u0002\u0002\u03cf\u03d1\u0007C\u0002\u0002\u03d0",
    "\u03d2\u0007\u0099\u0002\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d1",
    "\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3",
    "\u03d5\u0005\u0084C\u0002\u03d4\u03d6\u0007\u0099\u0002\u0002\u03d5",
    "\u03d4\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6",
    "\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d8\u0007E\u0002\u0002\u03d8",
    "\u03d9\u0007\u0099\u0002\u0002\u03d9\u03db\u0007H\u0002\u0002\u03da",
    "\u03dc\u0007\u0099\u0002\u0002\u03db\u03da\u0003\u0002\u0002\u0002\u03db",
    "\u03dc\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd",
    "\u03de\u0007\u0015\u0002\u0002\u03de\u03df\u0005\u0182\u00c2\u0002\u03df",
    "\u03e0\u0007\u0016\u0002\u0002\u03e0\u0083\u0003\u0002\u0002\u0002\u03e1",
    "\u03e3\u0007\u0015\u0002\u0002\u03e2\u03e4\u0007\u0099\u0002\u0002\u03e3",
    "\u03e2\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4",
    "\u03e5\u0003\u0002\u0002\u0002\u03e5\u03e6\u0007\u0016\u0002\u0002\u03e6",
    "\u03e7\u0005\u0192\u00ca\u0002\u03e7\u03e8\u0007\u0013\u0002\u0002\u03e8",
    "\u03e9\u0005\u0166\u00b4\u0002\u03e9\u03ea\u0005\u00f0y\u0002\u03ea",
    "\u03eb\u0007\u0014\u0002\u0002\u03eb\u03ec\u0005\u0192\u00ca\u0002\u03ec",
    "\u03ee\u0007\u0015\u0002\u0002\u03ed\u03ef\u0007\u0099\u0002\u0002\u03ee",
    "\u03ed\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef",
    "\u03f0\u0003\u0002\u0002\u0002\u03f0\u03f1\u0007\u0016\u0002\u0002\u03f1",
    "\u0417\u0003\u0002\u0002\u0002\u03f2\u03f4\u0007\u0015\u0002\u0002\u03f3",
    "\u03f5\u0007\u0099\u0002\u0002\u03f4\u03f3\u0003\u0002\u0002\u0002\u03f4",
    "\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6",
    "\u03f7\u0007\u0016\u0002\u0002\u03f7\u03f8\u0005\u0192\u00ca\u0002\u03f8",
    "\u03f9\u0007\u0013\u0002\u0002\u03f9\u03fa\u0005\u0166\u00b4\u0002\u03fa",
    "\u03fb\u0005\u00f0y\u0002\u03fb\u03fc\u0007\u0014\u0002\u0002\u03fc",
    "\u03fd\u0005\u0192\u00ca\u0002\u03fd\u03fe\u0005\u0190\u00c9\u0002\u03fe",
    "\u0400\u0007\u0015\u0002\u0002\u03ff\u0401\u0007\u0099\u0002\u0002\u0400",
    "\u03ff\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401",
    "\u0402\u0003\u0002\u0002\u0002\u0402\u0403\u0007\u0016\u0002\u0002\u0403",
    "\u0417\u0003\u0002\u0002\u0002\u0404\u0406\u0007\u0015\u0002\u0002\u0405",
    "\u0407\u0007\u0099\u0002\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0406",
    "\u0407\u0003\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408",
    "\u0409\u0007\u0016\u0002\u0002\u0409\u040a\u0005\u018e\u00c8\u0002\u040a",
    "\u040b\u0005\u0192\u00ca\u0002\u040b\u040c\u0007\u0013\u0002\u0002\u040c",
    "\u040d\u0005\u0166\u00b4\u0002\u040d\u040e\u0005\u00f0y\u0002\u040e",
    "\u040f\u0007\u0014\u0002\u0002\u040f\u0410\u0005\u0192\u00ca\u0002\u0410",
    "\u0412\u0007\u0015\u0002\u0002\u0411\u0413\u0007\u0099\u0002\u0002\u0412",
    "\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413",
    "\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0007\u0016\u0002\u0002\u0415",
    "\u0417\u0003\u0002\u0002\u0002\u0416\u03e1\u0003\u0002\u0002\u0002\u0416",
    "\u03f2\u0003\u0002\u0002\u0002\u0416\u0404\u0003\u0002\u0002\u0002\u0417",
    "\u0085\u0003\u0002\u0002\u0002\u0418\u0419\u0007I\u0002\u0002\u0419",
    "\u041a\u0007\u0099\u0002\u0002\u041a\u041b\u0007J\u0002\u0002\u041b",
    "\u0420\u0007\u0099\u0002\u0002\u041c\u041d\u0007K\u0002\u0002\u041d",
    "\u041e\u0007\u0099\u0002\u0002\u041e\u041f\u0007L\u0002\u0002\u041f",
    "\u0421\u0007\u0099\u0002\u0002\u0420\u041c\u0003\u0002\u0002\u0002\u0420",
    "\u0421\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002\u0002\u0422",
    "\u0423\u0007M\u0002\u0002\u0423\u0424\u0007\u0099\u0002\u0002\u0424",
    "\u0425\u0005\u0102\u0082\u0002\u0425\u0426\u0007\u0099\u0002\u0002\u0426",
    "\u0427\u0007N\u0002\u0002\u0427\u0428\u0007\u0099\u0002\u0002\u0428",
    "\u0429\u0005\u0166\u00b4\u0002\u0429\u042d\u0007\u0099\u0002\u0002\u042a",
    "\u042b\u0007O\u0002\u0002\u042b\u042c\u0007\u0099\u0002\u0002\u042c",
    "\u042e\u0007\u0086\u0002\u0002\u042d\u042a\u0003\u0002\u0002\u0002\u042d",
    "\u042e\u0003\u0002\u0002\u0002\u042e\u0087\u0003\u0002\u0002\u0002\u042f",
    "\u0430\u0007P\u0002\u0002\u0430\u0432\u0007\u0099\u0002\u0002\u0431",
    "\u042f\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002\u0432",
    "\u0433\u0003\u0002\u0002\u0002\u0433\u0435\u0007Q\u0002\u0002\u0434",
    "\u0436\u0007\u0099\u0002\u0002\u0435\u0434\u0003\u0002\u0002\u0002\u0435",
    "\u0436\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002\u0002\u0002\u0437",
    "\u043b\u0005\u00dan\u0002\u0438\u043a\u0005\u00c4c\u0002\u0439\u0438",
    "\u0003\u0002\u0002\u0002\u043a\u043d\u0003\u0002\u0002\u0002\u043b\u0439",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u0442",
    "\u0003\u0002\u0002\u0002\u043d\u043b\u0003\u0002\u0002\u0002\u043e\u0440",
    "\u0007\u0099\u0002\u0002\u043f\u043e\u0003\u0002\u0002\u0002\u043f\u0440",
    "\u0003\u0002\u0002\u0002\u0440\u0441\u0003\u0002\u0002\u0002\u0441\u0443",
    "\u0005\u00d8m\u0002\u0442\u043f\u0003\u0002\u0002\u0002\u0442\u0443",
    "\u0003\u0002\u0002\u0002\u0443\u0089\u0003\u0002\u0002\u0002\u0444\u0446",
    "\u0007R\u0002\u0002\u0445\u0447\u0007\u0099\u0002\u0002\u0446\u0445",
    "\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002\u0447\u0448",
    "\u0003\u0002\u0002\u0002\u0448\u0449\u0005\u0102\u0082\u0002\u0449\u044a",
    "\u0007\u0099\u0002\u0002\u044a\u044b\u0007N\u0002\u0002\u044b\u044c",
    "\u0007\u0099\u0002\u0002\u044c\u044d\u0005\u0166\u00b4\u0002\u044d\u008b",
    "\u0003\u0002\u0002\u0002\u044e\u0450\u0007S\u0002\u0002\u044f\u0451",
    "\u0007\u0099\u0002\u0002\u0450\u044f\u0003\u0002\u0002\u0002\u0450\u0451",
    "\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0457",
    "\u0005\u00dco\u0002\u0453\u0454\u0007\u0099\u0002\u0002\u0454\u0456",
    "\u0005\u008eH\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0456\u0459",
    "\u0003\u0002\u0002\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0457\u0458",
    "\u0003\u0002\u0002\u0002\u0458\u008d\u0003\u0002\u0002\u0002\u0459\u0457",
    "\u0003\u0002\u0002\u0002\u045a\u045b\u0007C\u0002\u0002\u045b\u045c",
    "\u0007\u0099\u0002\u0002\u045c\u045d\u0007Q\u0002\u0002\u045d\u045e",
    "\u0007\u0099\u0002\u0002\u045e\u0465\u0005\u0094K\u0002\u045f\u0460",
    "\u0007C\u0002\u0002\u0460\u0461\u0007\u0099\u0002\u0002\u0461\u0462",
    "\u0007@\u0002\u0002\u0462\u0463\u0007\u0099\u0002\u0002\u0463\u0465",
    "\u0005\u0094K\u0002\u0464\u045a\u0003\u0002\u0002\u0002\u0464\u045f",
    "\u0003\u0002\u0002\u0002\u0465\u008f\u0003\u0002\u0002\u0002\u0466\u0468",
    "\u0007@\u0002\u0002\u0467\u0469\u0007\u0099\u0002\u0002\u0468\u0467",
    "\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u046a",
    "\u0003\u0002\u0002\u0002\u046a\u046b\u0005\u00dan\u0002\u046b\u0091",
    "\u0003\u0002\u0002\u0002\u046c\u046d\u0007@\u0002\u0002\u046d\u046e",
    "\u0007\u0099\u0002\u0002\u046e\u0470\u0007G\u0002\u0002\u046f\u0471",
    "\u0007\u0099\u0002\u0002\u0470\u046f\u0003\u0002\u0002\u0002\u0470\u0471",
    "\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0473",
    "\u0005\u00dan\u0002\u0473\u0093\u0003\u0002\u0002\u0002\u0474\u0476",
    "\u0007T\u0002\u0002\u0475\u0477\u0007\u0099\u0002\u0002\u0476\u0475",
    "\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0478",
    "\u0003\u0002\u0002\u0002\u0478\u0483\u0005\u0096L\u0002\u0479\u047b",
    "\u0007\u0099\u0002\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047a\u047b",
    "\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002\u0002\u0002\u047c\u047e",
    "\u0007\u0011\u0002\u0002\u047d\u047f\u0007\u0099\u0002\u0002\u047e\u047d",
    "\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f\u0480",
    "\u0003\u0002\u0002\u0002\u0480\u0482\u0005\u0096L\u0002\u0481\u047a",
    "\u0003\u0002\u0002\u0002\u0482\u0485\u0003\u0002\u0002\u0002\u0483\u0481",
    "\u0003\u0002\u0002\u0002\u0483\u0484\u0003\u0002\u0002\u0002\u0484\u0095",
    "\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002\u0002\u0002\u0486\u0488",
    "\u0005\u0182\u00c2\u0002\u0487\u0489\u0007\u0099\u0002\u0002\u0488\u0487",
    "\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002\u0002\u0489\u048a",
    "\u0003\u0002\u0002\u0002\u048a\u048c\u0007\u000e\u0002\u0002\u048b\u048d",
    "\u0007\u0099\u0002\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048c\u048d",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u048f",
    "\u0005\u0102\u0082\u0002\u048f\u04ab\u0003\u0002\u0002\u0002\u0490\u0492",
    "\u0005\u0166\u00b4\u0002\u0491\u0493\u0007\u0099\u0002\u0002\u0492\u0491",
    "\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0003\u0002\u0002\u0002\u0494\u0496\u0007\u000e\u0002\u0002\u0495\u0497",
    "\u0007\u0099\u0002\u0002\u0496\u0495\u0003\u0002\u0002\u0002\u0496\u0497",
    "\u0003\u0002\u0002\u0002\u0497\u0498\u0003\u0002\u0002\u0002\u0498\u0499",
    "\u0005\u0102\u0082\u0002\u0499\u04ab\u0003\u0002\u0002\u0002\u049a\u049c",
    "\u0005\u0166\u00b4\u0002\u049b\u049d\u0007\u0099\u0002\u0002\u049c\u049b",
    "\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u049e",
    "\u0003\u0002\u0002\u0002\u049e\u04a0\u0007\u0017\u0002\u0002\u049f\u04a1",
    "\u0007\u0099\u0002\u0002\u04a0\u049f\u0003\u0002\u0002\u0002\u04a0\u04a1",
    "\u0003\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a3",
    "\u0005\u0102\u0082\u0002\u04a3\u04ab\u0003\u0002\u0002\u0002\u04a4\u04a6",
    "\u0005\u0166\u00b4\u0002\u04a5\u04a7\u0007\u0099\u0002\u0002\u04a6\u04a5",
    "\u0003\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u04a8",
    "\u0003\u0002\u0002\u0002\u04a8\u04a9\u0005\u00f8}\u0002\u04a9\u04ab",
    "\u0003\u0002\u0002\u0002\u04aa\u0486\u0003\u0002\u0002\u0002\u04aa\u0490",
    "\u0003\u0002\u0002\u0002\u04aa\u049a\u0003\u0002\u0002\u0002\u04aa\u04a4",
    "\u0003\u0002\u0002\u0002\u04ab\u0097\u0003\u0002\u0002\u0002\u04ac\u04ad",
    "\u0007U\u0002\u0002\u04ad\u04af\u0007\u0099\u0002\u0002\u04ae\u04ac",
    "\u0003\u0002\u0002\u0002\u04ae\u04af\u0003\u0002\u0002\u0002\u04af\u04b0",
    "\u0003\u0002\u0002\u0002\u04b0\u04b2\u0007V\u0002\u0002\u04b1\u04b3",
    "\u0007\u0099\u0002\u0002\u04b2\u04b1\u0003\u0002\u0002\u0002\u04b2\u04b3",
    "\u0003\u0002\u0002\u0002\u04b3\u04b4\u0003\u0002\u0002\u0002\u04b4\u04bf",
    "\u0005\u0102\u0082\u0002\u04b5\u04b7\u0007\u0099\u0002\u0002\u04b6\u04b5",
    "\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b8",
    "\u0003\u0002\u0002\u0002\u04b8\u04ba\u0007\u0011\u0002\u0002\u04b9\u04bb",
    "\u0007\u0099\u0002\u0002\u04ba\u04b9\u0003\u0002\u0002\u0002\u04ba\u04bb",
    "\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04be",
    "\u0005\u0102\u0082\u0002\u04bd\u04b6\u0003\u0002\u0002\u0002\u04be\u04c1",
    "\u0003\u0002\u0002\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04bf\u04c0",
    "\u0003\u0002\u0002\u0002\u04c0\u0099\u0003\u0002\u0002\u0002\u04c1\u04bf",
    "\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007W\u0002\u0002\u04c3\u04c4",
    "\u0007\u0099\u0002\u0002\u04c4\u04cf\u0005\u009cO\u0002\u04c5\u04c7",
    "\u0007\u0099\u0002\u0002\u04c6\u04c5\u0003\u0002\u0002\u0002\u04c6\u04c7",
    "\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04ca",
    "\u0007\u0011\u0002\u0002\u04c9\u04cb\u0007\u0099\u0002\u0002\u04ca\u04c9",
    "\u0003\u0002\u0002\u0002\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04cc",
    "\u0003\u0002\u0002\u0002\u04cc\u04ce\u0005\u009cO\u0002\u04cd\u04c6",
    "\u0003\u0002\u0002\u0002\u04ce\u04d1\u0003\u0002\u0002\u0002\u04cf\u04cd",
    "\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0\u009b",
    "\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d2\u04d3",
    "\u0005\u0166\u00b4\u0002\u04d3\u04d4\u0005\u00f8}\u0002\u04d4\u04d7",
    "\u0003\u0002\u0002\u0002\u04d5\u04d7\u0005\u0182\u00c2\u0002\u04d6\u04d2",
    "\u0003\u0002\u0002\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d7\u009d",
    "\u0003\u0002\u0002\u0002\u04d8\u04da\u0007X\u0002\u0002\u04d9\u04db",
    "\u0007\u0099\u0002\u0002\u04da\u04d9\u0003\u0002\u0002\u0002\u04da\u04db",
    "\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc\u04de",
    "\u0007\u0015\u0002\u0002\u04dd\u04df\u0007\u0099\u0002\u0002\u04de\u04dd",
    "\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e0",
    "\u0003\u0002\u0002\u0002\u04e0\u04e1\u0005\u0166\u00b4\u0002\u04e1\u04e2",
    "\u0007\u0099\u0002\u0002\u04e2\u04e3\u0007Y\u0002\u0002\u04e3\u04e4",
    "\u0007\u0099\u0002\u0002\u04e4\u04e6\u0005\u0102\u0082\u0002\u04e5\u04e7",
    "\u0007\u0099\u0002\u0002\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6\u04e7",
    "\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u04eb",
    "\u0007\u0018\u0002\u0002\u04e9\u04ea\u0007\u0099\u0002\u0002\u04ea\u04ec",
    "\u0005b2\u0002\u04eb\u04e9\u0003\u0002\u0002\u0002\u04ec\u04ed\u0003",
    "\u0002\u0002\u0002\u04ed\u04eb\u0003\u0002\u0002\u0002\u04ed\u04ee\u0003",
    "\u0002\u0002\u0002\u04ee\u04f0\u0003\u0002\u0002\u0002\u04ef\u04f1\u0007",
    "\u0099\u0002\u0002\u04f0\u04ef\u0003\u0002\u0002\u0002\u04f0\u04f1\u0003",
    "\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002\u0002\u04f2\u04f3\u0007",
    "\u0016\u0002\u0002\u04f3\u009f\u0003\u0002\u0002\u0002\u04f4\u04f9\u0007",
    "K\u0002\u0002\u04f5\u04f7\u0007\u0099\u0002\u0002\u04f6\u04f5\u0003",
    "\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003",
    "\u0002\u0002\u0002\u04f8\u04fa\u0007Z\u0002\u0002\u04f9\u04f6\u0003",
    "\u0002\u0002\u0002\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa\u04fb\u0003",
    "\u0002\u0002\u0002\u04fb\u04fc\u0007\u0099\u0002\u0002\u04fc\u0501\u0005",
    "\u00a4S\u0002\u04fd\u04ff\u0007\u0099\u0002\u0002\u04fe\u04fd\u0003",
    "\u0002\u0002\u0002\u04fe\u04ff\u0003\u0002\u0002\u0002\u04ff\u0500\u0003",
    "\u0002\u0002\u0002\u0500\u0502\u0005\u00d8m\u0002\u0501\u04fe\u0003",
    "\u0002\u0002\u0002\u0501\u0502\u0003\u0002\u0002\u0002\u0502\u00a1\u0003",
    "\u0002\u0002\u0002\u0503\u0508\u0007[\u0002\u0002\u0504\u0506\u0007",
    "\u0099\u0002\u0002\u0505\u0504\u0003\u0002\u0002\u0002\u0505\u0506\u0003",
    "\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002\u0507\u0509\u0007",
    "Z\u0002\u0002\u0508\u0505\u0003\u0002\u0002\u0002\u0508\u0509\u0003",
    "\u0002\u0002\u0002\u0509\u050b\u0003\u0002\u0002\u0002\u050a\u050c\u0007",
    "\u0099\u0002\u0002\u050b\u050a\u0003\u0002\u0002\u0002\u050b\u050c\u0003",
    "\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002\u050d\u050e\u0005",
    "\u00a4S\u0002\u050e\u00a3\u0003\u0002\u0002\u0002\u050f\u0512\u0005",
    "\u00a6T\u0002\u0510\u0511\u0007\u0099\u0002\u0002\u0511\u0513\u0005",
    "\u00bc_\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0512\u0513\u0003",
    "\u0002\u0002\u0002\u0513\u0516\u0003\u0002\u0002\u0002\u0514\u0515\u0007",
    "\u0099\u0002\u0002\u0515\u0517\u0005\u00be`\u0002\u0516\u0514\u0003",
    "\u0002\u0002\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u051a\u0003",
    "\u0002\u0002\u0002\u0518\u0519\u0007\u0099\u0002\u0002\u0519\u051b\u0005",
    "\u00c0a\u0002\u051a\u0518\u0003\u0002\u0002\u0002\u051a\u051b\u0003",
    "\u0002\u0002\u0002\u051b\u00a5\u0003\u0002\u0002\u0002\u051c\u0527\u0007",
    "\u0019\u0002\u0002\u051d\u051f\u0007\u0099\u0002\u0002\u051e\u051d\u0003",
    "\u0002\u0002\u0002\u051e\u051f\u0003\u0002\u0002\u0002\u051f\u0520\u0003",
    "\u0002\u0002\u0002\u0520\u0522\u0007\u0011\u0002\u0002\u0521\u0523\u0007",
    "\u0099\u0002\u0002\u0522\u0521\u0003\u0002\u0002\u0002\u0522\u0523\u0003",
    "\u0002\u0002\u0002\u0523\u0524\u0003\u0002\u0002\u0002\u0524\u0526\u0005",
    "\u00a8U\u0002\u0525\u051e\u0003\u0002\u0002\u0002\u0526\u0529\u0003",
    "\u0002\u0002\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0527\u0528\u0003",
    "\u0002\u0002\u0002\u0528\u0539\u0003\u0002\u0002\u0002\u0529\u0527\u0003",
    "\u0002\u0002\u0002\u052a\u0535\u0005\u00a8U\u0002\u052b\u052d\u0007",
    "\u0099\u0002\u0002\u052c\u052b\u0003\u0002\u0002\u0002\u052c\u052d\u0003",
    "\u0002\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e\u0530\u0007",
    "\u0011\u0002\u0002\u052f\u0531\u0007\u0099\u0002\u0002\u0530\u052f\u0003",
    "\u0002\u0002\u0002\u0530\u0531\u0003\u0002\u0002\u0002\u0531\u0532\u0003",
    "\u0002\u0002\u0002\u0532\u0534\u0005\u00a8U\u0002\u0533\u052c\u0003",
    "\u0002\u0002\u0002\u0534\u0537\u0003\u0002\u0002\u0002\u0535\u0533\u0003",
    "\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u0539\u0003",
    "\u0002\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0538\u051c\u0003",
    "\u0002\u0002\u0002\u0538\u052a\u0003\u0002\u0002\u0002\u0539\u00a7\u0003",
    "\u0002\u0002\u0002\u053a\u053b\u0005\u0102\u0082\u0002\u053b\u053c\u0007",
    "\u0099\u0002\u0002\u053c\u053d\u0007N\u0002\u0002\u053d\u053e\u0007",
    "\u0099\u0002\u0002\u053e\u053f\u0005\u0166\u00b4\u0002\u053f\u0542\u0003",
    "\u0002\u0002\u0002\u0540\u0542\u0005\u0102\u0082\u0002\u0541\u053a\u0003",
    "\u0002\u0002\u0002\u0541\u0540\u0003\u0002\u0002\u0002\u0542\u00a9\u0003",
    "\u0002\u0002\u0002\u0543\u0544\u0007\u0083\u0002\u0002\u0544\u0545\u0007",
    "\u0099\u0002\u0002\u0545\u0547\u0005\u00acW\u0002\u0546\u0548\u0007",
    "\u0099\u0002\u0002\u0547\u0546\u0003\u0002\u0002\u0002\u0547\u0548\u0003",
    "\u0002\u0002\u0002\u0548\u054a\u0003\u0002\u0002\u0002\u0549\u054b\u0005",
    "\u00b2Z\u0002\u054a\u0549\u0003\u0002\u0002\u0002\u054a\u054b\u0003",
    "\u0002\u0002\u0002\u054b\u00ab\u0003\u0002\u0002\u0002\u054c\u054e\u0005",
    "\u00aeX\u0002\u054d\u054f\u0007\u0099\u0002\u0002\u054e\u054d\u0003",
    "\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002\u054f\u0551\u0003",
    "\u0002\u0002\u0002\u0550\u0552\u0005\u00b0Y\u0002\u0551\u0550\u0003",
    "\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u00ad\u0003",
    "\u0002\u0002\u0002\u0553\u0554\u0005\u018c\u00c7\u0002\u0554\u0555\u0005",
    "\u015a\u00ae\u0002\u0555\u00af\u0003\u0002\u0002\u0002\u0556\u0558\u0007",
    "\u0015\u0002\u0002\u0557\u0559\u0007\u0099\u0002\u0002\u0558\u0557\u0003",
    "\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u055b\u0003",
    "\u0002\u0002\u0002\u055a\u055c\u0005\u0102\u0082\u0002\u055b\u055a\u0003",
    "\u0002\u0002\u0002\u055b\u055c\u0003\u0002\u0002\u0002\u055c\u0567\u0003",
    "\u0002\u0002\u0002\u055d\u055f\u0007\u0099\u0002\u0002\u055e\u055d\u0003",
    "\u0002\u0002\u0002\u055e\u055f\u0003\u0002\u0002\u0002\u055f\u0560\u0003",
    "\u0002\u0002\u0002\u0560\u0562\u0007\u0011\u0002\u0002\u0561\u0563\u0007",
    "\u0099\u0002\u0002\u0562\u0561\u0003\u0002\u0002\u0002\u0562\u0563\u0003",
    "\u0002\u0002\u0002\u0563\u0564\u0003\u0002\u0002\u0002\u0564\u0566\u0005",
    "\u0102\u0082\u0002\u0565\u055e\u0003\u0002\u0002\u0002\u0566\u0569\u0003",
    "\u0002\u0002\u0002\u0567\u0565\u0003\u0002\u0002\u0002\u0567\u0568\u0003",
    "\u0002\u0002\u0002\u0568\u056b\u0003\u0002\u0002\u0002\u0569\u0567\u0003",
    "\u0002\u0002\u0002\u056a\u056c\u0007\u0099\u0002\u0002\u056b\u056a\u0003",
    "\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u056d\u0003",
    "\u0002\u0002\u0002\u056d\u056e\u0007\u0016\u0002\u0002\u056e\u00b1\u0003",
    "\u0002\u0002\u0002\u056f\u0570\u0007\u0084\u0002\u0002\u0570\u0571\u0007",
    "\u0099\u0002\u0002\u0571\u057c\u0005\u00b4[\u0002\u0572\u0574\u0007",
    "\u0099\u0002\u0002\u0573\u0572\u0003\u0002\u0002\u0002\u0573\u0574\u0003",
    "\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002\u0002\u0575\u0577\u0007",
    "\u0011\u0002\u0002\u0576\u0578\u0007\u0099\u0002\u0002\u0577\u0576\u0003",
    "\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u0579\u0003",
    "\u0002\u0002\u0002\u0579\u057b\u0005\u00b4[\u0002\u057a\u0573\u0003",
    "\u0002\u0002\u0002\u057b\u057e\u0003\u0002\u0002\u0002\u057c\u057a\u0003",
    "\u0002\u0002\u0002\u057c\u057d\u0003\u0002\u0002\u0002\u057d\u0581\u0003",
    "\u0002\u0002\u0002\u057e\u057c\u0003\u0002\u0002\u0002\u057f\u0580\u0007",
    "\u0099\u0002\u0002\u0580\u0582\u0005\u00d8m\u0002\u0581\u057f\u0003",
    "\u0002\u0002\u0002\u0581\u0582\u0003\u0002\u0002\u0002\u0582\u00b3\u0003",
    "\u0002\u0002\u0002\u0583\u0586\u0005\u00b6\\\u0002\u0584\u0586\u0005",
    "\u00b8]\u0002\u0585\u0583\u0003\u0002\u0002\u0002\u0585\u0584\u0003",
    "\u0002\u0002\u0002\u0586\u00b5\u0003\u0002\u0002\u0002\u0587\u0588\u0005",
    "\u00ba^\u0002\u0588\u0589\u0007\u0099\u0002\u0002\u0589\u058a\u0007",
    "N\u0002\u0002\u058a\u058b\u0007\u0099\u0002\u0002\u058b\u058c\u0005",
    "\u0166\u00b4\u0002\u058c\u00b7\u0003\u0002\u0002\u0002\u058d\u058e\u0005",
    "\u00ba^\u0002\u058e\u00b9\u0003\u0002\u0002\u0002\u058f\u0590\u0005",
    "\u0194\u00cb\u0002\u0590\u00bb\u0003\u0002\u0002\u0002\u0591\u0592\u0007",
    "\\\u0002\u0002\u0592\u0593\u0007\u0099\u0002\u0002\u0593\u0594\u0007",
    "]\u0002\u0002\u0594\u0595\u0007\u0099\u0002\u0002\u0595\u05a0\u0005",
    "\u00c2b\u0002\u0596\u0598\u0007\u0099\u0002\u0002\u0597\u0596\u0003",
    "\u0002\u0002\u0002\u0597\u0598\u0003\u0002\u0002\u0002\u0598\u0599\u0003",
    "\u0002\u0002\u0002\u0599\u059b\u0007\u0011\u0002\u0002\u059a\u059c\u0007",
    "\u0099\u0002\u0002\u059b\u059a\u0003\u0002\u0002\u0002\u059b\u059c\u0003",
    "\u0002\u0002\u0002\u059c\u059d\u0003\u0002\u0002\u0002\u059d\u059f\u0005",
    "\u00c2b\u0002\u059e\u0597\u0003\u0002\u0002\u0002\u059f\u05a2\u0003",
    "\u0002\u0002\u0002\u05a0\u059e\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003",
    "\u0002\u0002\u0002\u05a1\u00bd\u0003\u0002\u0002\u0002\u05a2\u05a0\u0003",
    "\u0002\u0002\u0002\u05a3\u05a4\u0007^\u0002\u0002\u05a4\u05a5\u0007",
    "\u0099\u0002\u0002\u05a5\u05a6\u0005\u0102\u0082\u0002\u05a6\u00bf\u0003",
    "\u0002\u0002\u0002\u05a7\u05a8\u0007_\u0002\u0002\u05a8\u05a9\u0007",
    "\u0099\u0002\u0002\u05a9\u05aa\u0005\u0102\u0082\u0002\u05aa\u00c1\u0003",
    "\u0002\u0002\u0002\u05ab\u05b3\u0005\u0102\u0082\u0002\u05ac\u05ae\u0007",
    "\u0099\u0002\u0002\u05ad\u05ac\u0003\u0002\u0002\u0002\u05ad\u05ae\u0003",
    "\u0002\u0002\u0002\u05ae\u05af\u0003\u0002\u0002\u0002\u05af\u05b1\t",
    "\u0003\u0002\u0002\u05b0\u05b2\u0007\u0099\u0002\u0002\u05b1\u05b0\u0003",
    "\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u05b4\u0003",
    "\u0002\u0002\u0002\u05b3\u05ad\u0003\u0002\u0002\u0002\u05b3\u05b4\u0003",
    "\u0002\u0002\u0002\u05b4\u00c3\u0003\u0002\u0002\u0002\u05b5\u05b7\u0007",
    "\u0099\u0002\u0002\u05b6\u05b5\u0003\u0002\u0002\u0002\u05b6\u05b7\u0003",
    "\u0002\u0002\u0002\u05b7\u05e6\u0003\u0002\u0002\u0002\u05b8\u05b9\u0007",
    ";\u0002\u0002\u05b9\u05ba\u0007\u0099\u0002\u0002\u05ba\u05bb\u0007",
    "B\u0002\u0002\u05bb\u05bc\u0007\u0099\u0002\u0002\u05bc\u05bd\u0005",
    "\u0166\u00b4\u0002\u05bd\u05bf\u0005\u00fa~\u0002\u05be\u05c0\u0007",
    "\u0099\u0002\u0002\u05bf\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003",
    "\u0002\u0002\u0002\u05c0\u05c1\u0003\u0002\u0002\u0002\u05c1\u05c3\u0007",
    "\u0015\u0002\u0002\u05c2\u05c4\u0007\u0099\u0002\u0002\u05c3\u05c2\u0003",
    "\u0002\u0002\u0002\u05c3\u05c4\u0003\u0002\u0002\u0002\u05c4\u05c5\u0003",
    "\u0002\u0002\u0002\u05c5\u05c7\u0005\u0184\u00c3\u0002\u05c6\u05c8\u0007",
    "\u0099\u0002\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003",
    "\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9\u05ca\u0007",
    "\u0016\u0002\u0002\u05ca\u05e7\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007",
    ";\u0002\u0002\u05cc\u05cd\u0007\u0099\u0002\u0002\u05cd\u05ce\u0007",
    "d\u0002\u0002\u05ce\u05cf\u0007\u0099\u0002\u0002\u05cf\u05d0\u0007",
    "C\u0002\u0002\u05d0\u05d1\u0007\u0099\u0002\u0002\u05d1\u05dc\u0005",
    "\u0166\u00b4\u0002\u05d2\u05d4\u0007\u0099\u0002\u0002\u05d3\u05d2\u0003",
    "\u0002\u0002\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003",
    "\u0002\u0002\u0002\u05d5\u05d7\u0007\u0011\u0002\u0002\u05d6\u05d8\u0007",
    "\u0099\u0002\u0002\u05d7\u05d6\u0003\u0002\u0002\u0002\u05d7\u05d8\u0003",
    "\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002\u0002\u05d9\u05db\u0005",
    "\u0166\u00b4\u0002\u05da\u05d3\u0003\u0002\u0002\u0002\u05db\u05de\u0003",
    "\u0002\u0002\u0002\u05dc\u05da\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003",
    "\u0002\u0002\u0002\u05dd\u05e7\u0003\u0002\u0002\u0002\u05de\u05dc\u0003",
    "\u0002\u0002\u0002\u05df\u05e0\u0007;\u0002\u0002\u05e0\u05e1\u0007",
    "\u0099\u0002\u0002\u05e1\u05e2\u0007e\u0002\u0002\u05e2\u05e3\u0007",
    "\u0099\u0002\u0002\u05e3\u05e4\u0005\u0166\u00b4\u0002\u05e4\u05e5\u0005",
    "\u00fa~\u0002\u05e5\u05e7\u0003\u0002\u0002\u0002\u05e6\u05b8\u0003",
    "\u0002\u0002\u0002\u05e6\u05cb\u0003\u0002\u0002\u0002\u05e6\u05df\u0003",
    "\u0002\u0002\u0002\u05e7\u00c5\u0003\u0002\u0002\u0002\u05e8\u05e9\u0007",
    "f\u0002\u0002\u05e9\u05ea\u0007\u0099\u0002\u0002\u05ea\u05f5\u0005",
    "\u00c8e\u0002\u05eb\u05ed\u0007\u0099\u0002\u0002\u05ec\u05eb\u0003",
    "\u0002\u0002\u0002\u05ec\u05ed\u0003\u0002\u0002\u0002\u05ed\u05ee\u0003",
    "\u0002\u0002\u0002\u05ee\u05f0\u0007\u0011\u0002\u0002\u05ef\u05f1\u0007",
    "\u0099\u0002\u0002\u05f0\u05ef\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003",
    "\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002\u0002\u05f2\u05f4\u0005",
    "\u00c8e\u0002\u05f3\u05ec\u0003\u0002\u0002\u0002\u05f4\u05f7\u0003",
    "\u0002\u0002\u0002\u05f5\u05f3\u0003\u0002\u0002\u0002\u05f5\u05f6\u0003",
    "\u0002\u0002\u0002\u05f6\u05f9\u0003\u0002\u0002\u0002\u05f7\u05f5\u0003",
    "\u0002\u0002\u0002\u05f8\u05fa\u0005\u00d8m\u0002\u05f9\u05f8\u0003",
    "\u0002\u0002\u0002\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u00c7\u0003",
    "\u0002\u0002\u0002\u05fb\u05fd\u0005\u0166\u00b4\u0002\u05fc\u05fe\u0007",
    "\u0099\u0002\u0002\u05fd\u05fc\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003",
    "\u0002\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u0601\u0007",
    "\u000e\u0002\u0002\u0600\u0602\u0007\u0099\u0002\u0002\u0601\u0600\u0003",
    "\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003",
    "\u0002\u0002\u0002\u0603\u0604\u0005\u00caf\u0002\u0604\u00c9\u0003",
    "\u0002\u0002\u0002\u0605\u0608\u0005\u00ccg\u0002\u0606\u0608\u0005",
    "\u00ceh\u0002\u0607\u0605\u0003\u0002\u0002\u0002\u0607\u0606\u0003",
    "\u0002\u0002\u0002\u0608\u00cb\u0003\u0002\u0002\u0002\u0609\u060b\u0007",
    "g\u0002\u0002\u060a\u060c\u0007\u0099\u0002\u0002\u060b\u060a\u0003",
    "\u0002\u0002\u0002\u060b\u060c\u0003\u0002\u0002\u0002\u060c\u0610\u0003",
    "\u0002\u0002\u0002\u060d\u0611\u0005\u00d0i\u0002\u060e\u0611\u0005",
    "\u00d2j\u0002\u060f\u0611\u0005\u00d4k\u0002\u0610\u060d\u0003\u0002",
    "\u0002\u0002\u0610\u060e\u0003\u0002\u0002\u0002\u0610\u060f\u0003\u0002",
    "\u0002\u0002\u0611\u00cd\u0003\u0002\u0002\u0002\u0612\u0616\t\u0004",
    "\u0002\u0002\u0613\u0617\u0005\u00d0i\u0002\u0614\u0617\u0005\u00d2",
    "j\u0002\u0615\u0617\u0005\u00d4k\u0002\u0616\u0613\u0003\u0002\u0002",
    "\u0002\u0616\u0614\u0003\u0002\u0002\u0002\u0616\u0615\u0003\u0002\u0002",
    "\u0002\u0617\u00cf\u0003\u0002\u0002\u0002\u0618\u0619\u0007\u0004\u0002",
    "\u0002\u0619\u061a\u0005\u0194\u00cb\u0002\u061a\u061b\u0007\u0015\u0002",
    "\u0002\u061b\u061c\u0005\u0194\u00cb\u0002\u061c\u061f\u0007\u000e\u0002",
    "\u0002\u061d\u0620\u0007\u0086\u0002\u0002\u061e\u0620\u0005\u0178\u00bd",
    "\u0002\u061f\u061d\u0003\u0002\u0002\u0002\u061f\u061e\u0003\u0002\u0002",
    "\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0622\u0007\u0016\u0002",
    "\u0002\u0622\u00d1\u0003\u0002\u0002\u0002\u0623\u0624\u0007\u0004\u0002",
    "\u0002\u0624\u0625\u0005\u0194\u00cb\u0002\u0625\u0628\u0007\u0015\u0002",
    "\u0002\u0626\u0629\u0007\u0086\u0002\u0002\u0627\u0629\u0005\u0178\u00bd",
    "\u0002\u0628\u0626\u0003\u0002\u0002\u0002\u0628\u0627\u0003\u0002\u0002",
    "\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u062b\u0007\u0016\u0002",
    "\u0002\u062b\u00d3\u0003\u0002\u0002\u0002\u062c\u0630\u0007\u0015\u0002",
    "\u0002\u062d\u0631\u0005\u00d6l\u0002\u062e\u0631\u0005\u0178\u00bd",
    "\u0002\u062f\u0631\u0007\u0019\u0002\u0002\u0630\u062d\u0003\u0002\u0002",
    "\u0002\u0630\u062e\u0003\u0002\u0002\u0002\u0630\u062f\u0003\u0002\u0002",
    "\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0633\u0007\u0016\u0002",
    "\u0002\u0633\u00d5\u0003\u0002\u0002\u0002\u0634\u063f\u0005\u0188\u00c5",
    "\u0002\u0635\u0637\u0007\u0099\u0002\u0002\u0636\u0635\u0003\u0002\u0002",
    "\u0002\u0636\u0637\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002\u0002",
    "\u0002\u0638\u063a\u0007\u0011\u0002\u0002\u0639\u063b\u0007\u0099\u0002",
    "\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002\u0002",
    "\u0002\u063b\u063c\u0003\u0002\u0002\u0002\u063c\u063e\u0005\u0188\u00c5",
    "\u0002\u063d\u0636\u0003\u0002\u0002\u0002\u063e\u0641\u0003\u0002\u0002",
    "\u0002\u063f\u063d\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002\u0002",
    "\u0002\u0640\u00d7\u0003\u0002\u0002\u0002\u0641\u063f\u0003\u0002\u0002",
    "\u0002\u0642\u0643\u0007j\u0002\u0002\u0643\u0644\u0007\u0099\u0002",
    "\u0002\u0644\u0645\u0005\u0102\u0082\u0002\u0645\u00d9\u0003\u0002\u0002",
    "\u0002\u0646\u0651\u0005\u00dco\u0002\u0647\u0649\u0007\u0099\u0002",
    "\u0002\u0648\u0647\u0003\u0002\u0002\u0002\u0648\u0649\u0003\u0002\u0002",
    "\u0002\u0649\u064a\u0003\u0002\u0002\u0002\u064a\u064c\u0007\u0011\u0002",
    "\u0002\u064b\u064d\u0007\u0099\u0002\u0002\u064c\u064b\u0003\u0002\u0002",
    "\u0002\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002",
    "\u0002\u064e\u0650\u0005\u00dco\u0002\u064f\u0648\u0003\u0002\u0002",
    "\u0002\u0650\u0653\u0003\u0002\u0002\u0002\u0651\u064f\u0003\u0002\u0002",
    "\u0002\u0651\u0652\u0003\u0002\u0002\u0002\u0652\u00db\u0003\u0002\u0002",
    "\u0002\u0653\u0651\u0003\u0002\u0002\u0002\u0654\u0656\u0005\u0166\u00b4",
    "\u0002\u0655\u0657\u0007\u0099\u0002\u0002\u0656\u0655\u0003\u0002\u0002",
    "\u0002\u0656\u0657\u0003\u0002\u0002\u0002\u0657\u0658\u0003\u0002\u0002",
    "\u0002\u0658\u065a\u0007\u000e\u0002\u0002\u0659\u065b\u0007\u0099\u0002",
    "\u0002\u065a\u0659\u0003\u0002\u0002\u0002\u065a\u065b\u0003\u0002\u0002",
    "\u0002\u065b\u065c\u0003\u0002\u0002\u0002\u065c\u065d\u0005\u00dep",
    "\u0002\u065d\u0660\u0003\u0002\u0002\u0002\u065e\u0660\u0005\u00dep",
    "\u0002\u065f\u0654\u0003\u0002\u0002\u0002\u065f\u065e\u0003\u0002\u0002",
    "\u0002\u0660\u00dd\u0003\u0002\u0002\u0002\u0661\u0664\u0005\u013a\u009e",
    "\u0002\u0662\u0664\u0005\u00e0q\u0002\u0663\u0661\u0003\u0002\u0002",
    "\u0002\u0663\u0662\u0003\u0002\u0002\u0002\u0664\u00df\u0003\u0002\u0002",
    "\u0002\u0665\u066c\u0005\u00e2r\u0002\u0666\u0668\u0007\u0099\u0002",
    "\u0002\u0667\u0666\u0003\u0002\u0002\u0002\u0667\u0668\u0003\u0002\u0002",
    "\u0002\u0668\u0669\u0003\u0002\u0002\u0002\u0669\u066b\u0005\u00e4s",
    "\u0002\u066a\u0667\u0003\u0002\u0002\u0002\u066b\u066e\u0003\u0002\u0002",
    "\u0002\u066c\u066a\u0003\u0002\u0002\u0002\u066c\u066d\u0003\u0002\u0002",
    "\u0002\u066d\u0674\u0003\u0002\u0002\u0002\u066e\u066c\u0003\u0002\u0002",
    "\u0002\u066f\u0670\u0007\u0015\u0002\u0002\u0670\u0671\u0005\u00e0q",
    "\u0002\u0671\u0672\u0007\u0016\u0002\u0002\u0672\u0674\u0003\u0002\u0002",
    "\u0002\u0673\u0665\u0003\u0002\u0002\u0002\u0673\u066f\u0003\u0002\u0002",
    "\u0002\u0674\u00e1\u0003\u0002\u0002\u0002\u0675\u0677\u0007\u0015\u0002",
    "\u0002\u0676\u0678\u0007\u0099\u0002\u0002\u0677\u0676\u0003\u0002\u0002",
    "\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u067d\u0003\u0002\u0002",
    "\u0002\u0679\u067b\u0005\u0166\u00b4\u0002\u067a\u067c\u0007\u0099\u0002",
    "\u0002\u067b\u067a\u0003\u0002\u0002\u0002\u067b\u067c\u0003\u0002\u0002",
    "\u0002\u067c\u067e\u0003\u0002\u0002\u0002\u067d\u0679\u0003\u0002\u0002",
    "\u0002\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u0683\u0003\u0002\u0002",
    "\u0002\u067f\u0681\u0005\u00f8}\u0002\u0680\u0682\u0007\u0099\u0002",
    "\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002",
    "\u0002\u0682\u0684\u0003\u0002\u0002\u0002\u0683\u067f\u0003\u0002\u0002",
    "\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u0689\u0003\u0002\u0002",
    "\u0002\u0685\u0687\u0005\u00eex\u0002\u0686\u0688\u0007\u0099\u0002",
    "\u0002\u0687\u0686\u0003\u0002\u0002\u0002\u0687\u0688\u0003\u0002\u0002",
    "\u0002\u0688\u068a\u0003\u0002\u0002\u0002\u0689\u0685\u0003\u0002\u0002",
    "\u0002\u0689\u068a\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002\u0002",
    "\u0002\u068b\u068c\u0007\u0016\u0002\u0002\u068c\u00e3\u0003\u0002\u0002",
    "\u0002\u068d\u068f\u0005\u00e6t\u0002\u068e\u0690\u0007\u0099\u0002",
    "\u0002\u068f\u068e\u0003\u0002\u0002\u0002\u068f\u0690\u0003\u0002\u0002",
    "\u0002\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u0692\u0005\u00e2r",
    "\u0002\u0692\u00e5\u0003\u0002\u0002\u0002\u0693\u0695\u0005\u00e8u",
    "\u0002\u0694\u0696\u0007\u0099\u0002\u0002\u0695\u0694\u0003\u0002\u0002",
    "\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u0698\u0003\u0002\u0002",
    "\u0002\u0697\u0699\u0005\u00ecw\u0002\u0698\u0697\u0003\u0002\u0002",
    "\u0002\u0698\u0699\u0003\u0002\u0002\u0002\u0699\u069b\u0003\u0002\u0002",
    "\u0002\u069a\u069c\u0007\u0099\u0002\u0002\u069b\u069a\u0003\u0002\u0002",
    "\u0002\u069b\u069c\u0003\u0002\u0002\u0002\u069c\u069d\u0003\u0002\u0002",
    "\u0002\u069d\u069e\u0005\u00eav\u0002\u069e\u00e7\u0003\u0002\u0002",
    "\u0002\u069f\u06a1\u0005\u018e\u00c8\u0002\u06a0\u06a2\u0007\u0099\u0002",
    "\u0002\u06a1\u06a0\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002",
    "\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a4\u0005\u0192\u00ca",
    "\u0002\u06a4\u06a7\u0003\u0002\u0002\u0002\u06a5\u06a7\u0005\u0192\u00ca",
    "\u0002\u06a6\u069f\u0003\u0002\u0002\u0002\u06a6\u06a5\u0003\u0002\u0002",
    "\u0002\u06a7\u00e9\u0003\u0002\u0002\u0002\u06a8\u06aa\u0005\u0192\u00ca",
    "\u0002\u06a9\u06ab\u0007\u0099\u0002\u0002\u06aa\u06a9\u0003\u0002\u0002",
    "\u0002\u06aa\u06ab\u0003\u0002\u0002\u0002\u06ab\u06ac\u0003\u0002\u0002",
    "\u0002\u06ac\u06ad\u0005\u0190\u00c9\u0002\u06ad\u06b0\u0003\u0002\u0002",
    "\u0002\u06ae\u06b0\u0005\u0192\u00ca\u0002\u06af\u06a8\u0003\u0002\u0002",
    "\u0002\u06af\u06ae\u0003\u0002\u0002\u0002\u06b0\u00eb\u0003\u0002\u0002",
    "\u0002\u06b1\u06b3\u0007\u0013\u0002\u0002\u06b2\u06b4\u0007\u0099\u0002",
    "\u0002\u06b3\u06b2\u0003\u0002\u0002\u0002\u06b3\u06b4\u0003\u0002\u0002",
    "\u0002\u06b4\u06b9\u0003\u0002\u0002\u0002\u06b5\u06b7\u0005\u0166\u00b4",
    "\u0002\u06b6\u06b8\u0007\u0099\u0002\u0002\u06b7\u06b6\u0003\u0002\u0002",
    "\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002\u06b8\u06ba\u0003\u0002\u0002",
    "\u0002\u06b9\u06b5\u0003\u0002\u0002\u0002\u06b9\u06ba\u0003\u0002\u0002",
    "\u0002\u06ba\u06bf\u0003\u0002\u0002\u0002\u06bb\u06bd\u0005\u00f2z",
    "\u0002\u06bc\u06be\u0007\u0099\u0002\u0002\u06bd\u06bc\u0003\u0002\u0002",
    "\u0002\u06bd\u06be\u0003\u0002\u0002\u0002\u06be\u06c0\u0003\u0002\u0002",
    "\u0002\u06bf\u06bb\u0003\u0002\u0002\u0002\u06bf\u06c0\u0003\u0002\u0002",
    "\u0002\u06c0\u06c2\u0003\u0002\u0002\u0002\u06c1\u06c3\u0005\u00fc\u007f",
    "\u0002\u06c2\u06c1\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002",
    "\u0002\u06c3\u06c8\u0003\u0002\u0002\u0002\u06c4\u06c6\u0005\u00eex",
    "\u0002\u06c5\u06c7\u0007\u0099\u0002\u0002\u06c6\u06c5\u0003\u0002\u0002",
    "\u0002\u06c6\u06c7\u0003\u0002\u0002\u0002\u06c7\u06c9\u0003\u0002\u0002",
    "\u0002\u06c8\u06c4\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002",
    "\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06cb\u0007\u0014\u0002",
    "\u0002\u06cb\u00ed\u0003\u0002\u0002\u0002\u06cc\u06cf\u0005\u016a\u00b6",
    "\u0002\u06cd\u06cf\u0005\u0178\u00bd\u0002\u06ce\u06cc\u0003\u0002\u0002",
    "\u0002\u06ce\u06cd\u0003\u0002\u0002\u0002\u06cf\u00ef\u0003\u0002\u0002",
    "\u0002\u06d0\u06d2\u0007\u0004\u0002\u0002\u06d1\u06d3\u0007\u0099\u0002",
    "\u0002\u06d2\u06d1\u0003\u0002\u0002\u0002\u06d2\u06d3\u0003\u0002\u0002",
    "\u0002\u06d3\u06d4\u0003\u0002\u0002\u0002\u06d4\u06d5\u0005\u0100\u0081",
    "\u0002\u06d5\u00f1\u0003\u0002\u0002\u0002\u06d6\u06de\u0005\u00f4{",
    "\u0002\u06d7\u06d9\u0007\u0099\u0002\u0002\u06d8\u06d7\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06da\u0003\u0002\u0002",
    "\u0002\u06da\u06db\u0007\u0018\u0002\u0002\u06db\u06dd\u0005\u00f6|",
    "\u0002\u06dc\u06d8\u0003\u0002\u0002\u0002\u06dd\u06e0\u0003\u0002\u0002",
    "\u0002\u06de\u06dc\u0003\u0002\u0002\u0002\u06de\u06df\u0003\u0002\u0002",
    "\u0002\u06df\u00f3\u0003\u0002\u0002\u0002\u06e0\u06de\u0003\u0002\u0002",
    "\u0002\u06e1\u06e2\u0007\u0004\u0002\u0002\u06e2\u06e3\u0005\u0100\u0081",
    "\u0002\u06e3\u00f5\u0003\u0002\u0002\u0002\u06e4\u06e6\u0007\u0004\u0002",
    "\u0002\u06e5\u06e4\u0003\u0002\u0002\u0002\u06e5\u06e6\u0003\u0002\u0002",
    "\u0002\u06e6\u06e7\u0003\u0002\u0002\u0002\u06e7\u06e8\u0005\u0100\u0081",
    "\u0002\u06e8\u00f7\u0003\u0002\u0002\u0002\u06e9\u06f0\u0005\u00fa~",
    "\u0002\u06ea\u06ec\u0007\u0099\u0002\u0002\u06eb\u06ea\u0003\u0002\u0002",
    "\u0002\u06eb\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002",
    "\u0002\u06ed\u06ef\u0005\u00fa~\u0002\u06ee\u06eb\u0003\u0002\u0002",
    "\u0002\u06ef\u06f2\u0003\u0002\u0002\u0002\u06f0\u06ee\u0003\u0002\u0002",
    "\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002\u06f1\u00f9\u0003\u0002\u0002",
    "\u0002\u06f2\u06f0\u0003\u0002\u0002\u0002\u06f3\u06f4\u0007\u0004\u0002",
    "\u0002\u06f4\u06f5\u0005\u00fe\u0080\u0002\u06f5\u00fb\u0003\u0002\u0002",
    "\u0002\u06f6\u06f8\u0007\u0019\u0002\u0002\u06f7\u06f9\u0007\u0099\u0002",
    "\u0002\u06f8\u06f7\u0003\u0002\u0002\u0002\u06f8\u06f9\u0003\u0002\u0002",
    "\u0002\u06f9\u06fe\u0003\u0002\u0002\u0002\u06fa\u06fc\u0005\u0188\u00c5",
    "\u0002\u06fb\u06fd\u0007\u0099\u0002\u0002\u06fc\u06fb\u0003\u0002\u0002",
    "\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u06ff\u0003\u0002\u0002",
    "\u0002\u06fe\u06fa\u0003\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002\u0002",
    "\u0002\u06ff\u070a\u0003\u0002\u0002\u0002\u0700\u0702\u0007\u001a\u0002",
    "\u0002\u0701\u0703\u0007\u0099\u0002\u0002\u0702\u0701\u0003\u0002\u0002",
    "\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u0708\u0003\u0002\u0002",
    "\u0002\u0704\u0706\u0005\u0188\u00c5\u0002\u0705\u0707\u0007\u0099\u0002",
    "\u0002\u0706\u0705\u0003\u0002\u0002\u0002\u0706\u0707\u0003\u0002\u0002",
    "\u0002\u0707\u0709\u0003\u0002\u0002\u0002\u0708\u0704\u0003\u0002\u0002",
    "\u0002\u0708\u0709\u0003\u0002\u0002\u0002\u0709\u070b\u0003\u0002\u0002",
    "\u0002\u070a\u0700\u0003\u0002\u0002\u0002\u070a\u070b\u0003\u0002\u0002",
    "\u0002\u070b\u00fd\u0003\u0002\u0002\u0002\u070c\u070d\u0005\u0194\u00cb",
    "\u0002\u070d\u00ff\u0003\u0002\u0002\u0002\u070e\u070f\u0005\u0194\u00cb",
    "\u0002\u070f\u0101\u0003\u0002\u0002\u0002\u0710\u0711\u0005\u0104\u0083",
    "\u0002\u0711\u0103\u0003\u0002\u0002\u0002\u0712\u0719\u0005\u0106\u0084",
    "\u0002\u0713\u0714\u0007\u0099\u0002\u0002\u0714\u0715\u0007m\u0002",
    "\u0002\u0715\u0716\u0007\u0099\u0002\u0002\u0716\u0718\u0005\u0106\u0084",
    "\u0002\u0717\u0713\u0003\u0002\u0002\u0002\u0718\u071b\u0003\u0002\u0002",
    "\u0002\u0719\u0717\u0003\u0002\u0002\u0002\u0719\u071a\u0003\u0002\u0002",
    "\u0002\u071a\u0105\u0003\u0002\u0002\u0002\u071b\u0719\u0003\u0002\u0002",
    "\u0002\u071c\u0723\u0005\u0108\u0085\u0002\u071d\u071e\u0007\u0099\u0002",
    "\u0002\u071e\u071f\u0007n\u0002\u0002\u071f\u0720\u0007\u0099\u0002",
    "\u0002\u0720\u0722\u0005\u0108\u0085\u0002\u0721\u071d\u0003\u0002\u0002",
    "\u0002\u0722\u0725\u0003\u0002\u0002\u0002\u0723\u0721\u0003\u0002\u0002",
    "\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724\u0107\u0003\u0002\u0002",
    "\u0002\u0725\u0723\u0003\u0002\u0002\u0002\u0726\u072d\u0005\u010a\u0086",
    "\u0002\u0727\u0728\u0007\u0099\u0002\u0002\u0728\u0729\u0007o\u0002",
    "\u0002\u0729\u072a\u0007\u0099\u0002\u0002\u072a\u072c\u0005\u010a\u0086",
    "\u0002\u072b\u0727\u0003\u0002\u0002\u0002\u072c\u072f\u0003\u0002\u0002",
    "\u0002\u072d\u072b\u0003\u0002\u0002\u0002\u072d\u072e\u0003\u0002\u0002",
    "\u0002\u072e\u0109\u0003\u0002\u0002\u0002\u072f\u072d\u0003\u0002\u0002",
    "\u0002\u0730\u0732\u0007p\u0002\u0002\u0731\u0733\u0007\u0099\u0002",
    "\u0002\u0732\u0731\u0003\u0002\u0002\u0002\u0732\u0733\u0003\u0002\u0002",
    "\u0002\u0733\u0735\u0003\u0002\u0002\u0002\u0734\u0730\u0003\u0002\u0002",
    "\u0002\u0735\u0738\u0003\u0002\u0002\u0002\u0736\u0734\u0003\u0002\u0002",
    "\u0002\u0736\u0737\u0003\u0002\u0002\u0002\u0737\u0739\u0003\u0002\u0002",
    "\u0002\u0738\u0736\u0003\u0002\u0002\u0002\u0739\u073a\u0005\u010c\u0087",
    "\u0002\u073a\u010b\u0003\u0002\u0002\u0002\u073b\u0742\u0005\u010e\u0088",
    "\u0002\u073c\u073e\u0007\u0099\u0002\u0002\u073d\u073c\u0003\u0002\u0002",
    "\u0002\u073d\u073e\u0003\u0002\u0002\u0002\u073e\u073f\u0003\u0002\u0002",
    "\u0002\u073f\u0741\u0005\u014a\u00a6\u0002\u0740\u073d\u0003\u0002\u0002",
    "\u0002\u0741\u0744\u0003\u0002\u0002\u0002\u0742\u0740\u0003\u0002\u0002",
    "\u0002\u0742\u0743\u0003\u0002\u0002\u0002\u0743\u010d\u0003\u0002\u0002",
    "\u0002\u0744\u0742\u0003\u0002\u0002\u0002\u0745\u0758\u0005\u0110\u0089",
    "\u0002\u0746\u0748\u0007\u0099\u0002\u0002\u0747\u0746\u0003\u0002\u0002",
    "\u0002\u0747\u0748\u0003\u0002\u0002\u0002\u0748\u0749\u0003\u0002\u0002",
    "\u0002\u0749\u074b\u0007\u000f\u0002\u0002\u074a\u074c\u0007\u0099\u0002",
    "\u0002\u074b\u074a\u0003\u0002\u0002\u0002\u074b\u074c\u0003\u0002\u0002",
    "\u0002\u074c\u074d\u0003\u0002\u0002\u0002\u074d\u0757\u0005\u0110\u0089",
    "\u0002\u074e\u0750\u0007\u0099\u0002\u0002\u074f\u074e\u0003\u0002\u0002",
    "\u0002\u074f\u0750\u0003\u0002\u0002\u0002\u0750\u0751\u0003\u0002\u0002",
    "\u0002\u0751\u0753\u0007\u0005\u0002\u0002\u0752\u0754\u0007\u0099\u0002",
    "\u0002\u0753\u0752\u0003\u0002\u0002\u0002\u0753\u0754\u0003\u0002\u0002",
    "\u0002\u0754\u0755\u0003\u0002\u0002\u0002\u0755\u0757\u0005\u0110\u0089",
    "\u0002\u0756\u0747\u0003\u0002\u0002\u0002\u0756\u074f\u0003\u0002\u0002",
    "\u0002\u0757\u075a\u0003\u0002\u0002\u0002\u0758\u0756\u0003\u0002\u0002",
    "\u0002\u0758\u0759\u0003\u0002\u0002\u0002\u0759\u010f\u0003\u0002\u0002",
    "\u0002\u075a\u0758\u0003\u0002\u0002\u0002\u075b\u0776\u0005\u0112\u008a",
    "\u0002\u075c\u075e\u0007\u0099\u0002\u0002\u075d\u075c\u0003\u0002\u0002",
    "\u0002\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u075f\u0003\u0002\u0002",
    "\u0002\u075f\u0761\u0007\u0019\u0002\u0002\u0760\u0762\u0007\u0099\u0002",
    "\u0002\u0761\u0760\u0003\u0002\u0002\u0002\u0761\u0762\u0003\u0002\u0002",
    "\u0002\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u0775\u0005\u0112\u008a",
    "\u0002\u0764\u0766\u0007\u0099\u0002\u0002\u0765\u0764\u0003\u0002\u0002",
    "\u0002\u0765\u0766\u0003\u0002\u0002\u0002\u0766\u0767\u0003\u0002\u0002",
    "\u0002\u0767\u0769\u0007\b\u0002\u0002\u0768\u076a\u0007\u0099\u0002",
    "\u0002\u0769\u0768\u0003\u0002\u0002\u0002\u0769\u076a\u0003\u0002\u0002",
    "\u0002\u076a\u076b\u0003\u0002\u0002\u0002\u076b\u0775\u0005\u0112\u008a",
    "\u0002\u076c\u076e\u0007\u0099\u0002\u0002\u076d\u076c\u0003\u0002\u0002",
    "\u0002\u076d\u076e\u0003\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002",
    "\u0002\u076f\u0771\u0007\u001b\u0002\u0002\u0770\u0772\u0007\u0099\u0002",
    "\u0002\u0771\u0770\u0003\u0002\u0002\u0002\u0771\u0772\u0003\u0002\u0002",
    "\u0002\u0772\u0773\u0003\u0002\u0002\u0002\u0773\u0775\u0005\u0112\u008a",
    "\u0002\u0774\u075d\u0003\u0002\u0002\u0002\u0774\u0765\u0003\u0002\u0002",
    "\u0002\u0774\u076d\u0003\u0002\u0002\u0002\u0775\u0778\u0003\u0002\u0002",
    "\u0002\u0776\u0774\u0003\u0002\u0002\u0002\u0776\u0777\u0003\u0002\u0002",
    "\u0002\u0777\u0111\u0003\u0002\u0002\u0002\u0778\u0776\u0003\u0002\u0002",
    "\u0002\u0779\u0784\u0005\u0114\u008b\u0002\u077a\u077c\u0007\u0099\u0002",
    "\u0002\u077b\u077a\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002",
    "\u0002\u077c\u077d\u0003\u0002\u0002\u0002\u077d\u077f\u0007\u001c\u0002",
    "\u0002\u077e\u0780\u0007\u0099\u0002\u0002\u077f\u077e\u0003\u0002\u0002",
    "\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002",
    "\u0002\u0781\u0783\u0005\u0114\u008b\u0002\u0782\u077b\u0003\u0002\u0002",
    "\u0002\u0783\u0786\u0003\u0002\u0002\u0002\u0784\u0782\u0003\u0002\u0002",
    "\u0002\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u0113\u0003\u0002\u0002",
    "\u0002\u0786\u0784\u0003\u0002\u0002\u0002\u0787\u0789\t\u0005\u0002",
    "\u0002\u0788\u078a\u0007\u0099\u0002\u0002\u0789\u0788\u0003\u0002\u0002",
    "\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a\u078c\u0003\u0002\u0002",
    "\u0002\u078b\u0787\u0003\u0002\u0002\u0002\u078c\u078f\u0003\u0002\u0002",
    "\u0002\u078d\u078b\u0003\u0002\u0002\u0002\u078d\u078e\u0003\u0002\u0002",
    "\u0002\u078e\u0790\u0003\u0002\u0002\u0002\u078f\u078d\u0003\u0002\u0002",
    "\u0002\u0790\u0791\u0005\u0116\u008c\u0002\u0791\u0115\u0003\u0002\u0002",
    "\u0002\u0792\u07c8\u0005\u0118\u008d\u0002\u0793\u0795\u0007\u0099\u0002",
    "\u0002\u0794\u0793\u0003\u0002\u0002\u0002\u0794\u0795\u0003\u0002\u0002",
    "\u0002\u0795\u0796\u0003\u0002\u0002\u0002\u0796\u0797\u0007\u0013\u0002",
    "\u0002\u0797\u0798\u0005\u0102\u0082\u0002\u0798\u0799\u0007\u0014\u0002",
    "\u0002\u0799\u07c7\u0003\u0002\u0002\u0002\u079a\u079c\u0007\u0099\u0002",
    "\u0002\u079b\u079a\u0003\u0002\u0002\u0002\u079b\u079c\u0003\u0002\u0002",
    "\u0002\u079c\u079d\u0003\u0002\u0002\u0002\u079d\u079f\u0007\u0013\u0002",
    "\u0002\u079e\u07a0\u0005\u0102\u0082\u0002\u079f\u079e\u0003\u0002\u0002",
    "\u0002\u079f\u07a0\u0003\u0002\u0002\u0002\u07a0\u07a1\u0003\u0002\u0002",
    "\u0002\u07a1\u07a3\u0007\u001a\u0002\u0002\u07a2\u07a4\u0005\u0102\u0082",
    "\u0002\u07a3\u07a2\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002",
    "\u0002\u07a4\u07a5\u0003\u0002\u0002\u0002\u07a5\u07c7\u0007\u0014\u0002",
    "\u0002\u07a6\u07a8\u0007\u0099\u0002\u0002\u07a7\u07a6\u0003\u0002\u0002",
    "\u0002\u07a7\u07a8\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003\u0002\u0002",
    "\u0002\u07a9\u07b7\u0007\u001d\u0002\u0002\u07aa\u07ab\u0007\u0099\u0002",
    "\u0002\u07ab\u07b7\u0007Y\u0002\u0002\u07ac\u07ad\u0007\u0099\u0002",
    "\u0002\u07ad\u07ae\u0007q\u0002\u0002\u07ae\u07af\u0007\u0099\u0002",
    "\u0002\u07af\u07b7\u0007K\u0002\u0002\u07b0\u07b1\u0007\u0099\u0002",
    "\u0002\u07b1\u07b2\u0007r\u0002\u0002\u07b2\u07b3\u0007\u0099\u0002",
    "\u0002\u07b3\u07b7\u0007K\u0002\u0002\u07b4\u07b5\u0007\u0099\u0002",
    "\u0002\u07b5\u07b7\u0007s\u0002\u0002\u07b6\u07a7\u0003\u0002\u0002",
    "\u0002\u07b6\u07aa\u0003\u0002\u0002\u0002\u07b6\u07ac\u0003\u0002\u0002",
    "\u0002\u07b6\u07b0\u0003\u0002\u0002\u0002\u07b6\u07b4\u0003\u0002\u0002",
    "\u0002\u07b7\u07b9\u0003\u0002\u0002\u0002\u07b8\u07ba\u0007\u0099\u0002",
    "\u0002\u07b9\u07b8\u0003\u0002\u0002\u0002\u07b9\u07ba\u0003\u0002\u0002",
    "\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002\u07bb\u07c7\u0005\u0118\u008d",
    "\u0002\u07bc\u07bd\u0007\u0099\u0002\u0002\u07bd\u07be\u0007F\u0002",
    "\u0002\u07be\u07bf\u0007\u0099\u0002\u0002\u07bf\u07c7\u0007t\u0002",
    "\u0002\u07c0\u07c1\u0007\u0099\u0002\u0002\u07c1\u07c2\u0007F\u0002",
    "\u0002\u07c2\u07c3\u0007\u0099\u0002\u0002\u07c3\u07c4\u0007p\u0002",
    "\u0002\u07c4\u07c5\u0007\u0099\u0002\u0002\u07c5\u07c7\u0007t\u0002",
    "\u0002\u07c6\u0794\u0003\u0002\u0002\u0002\u07c6\u079b\u0003\u0002\u0002",
    "\u0002\u07c6\u07b6\u0003\u0002\u0002\u0002\u07c6\u07bc\u0003\u0002\u0002",
    "\u0002\u07c6\u07c0\u0003\u0002\u0002\u0002\u07c7\u07ca\u0003\u0002\u0002",
    "\u0002\u07c8\u07c6\u0003\u0002\u0002\u0002\u07c8\u07c9\u0003\u0002\u0002",
    "\u0002\u07c9\u0117\u0003\u0002\u0002\u0002\u07ca\u07c8\u0003\u0002\u0002",
    "\u0002\u07cb\u07d5\u0005\u0140\u00a1\u0002\u07cc\u07ce\u0007\u0099\u0002",
    "\u0002\u07cd\u07cc\u0003\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002",
    "\u0002\u07ce\u07d1\u0003\u0002\u0002\u0002\u07cf\u07d2\u0005\u0160\u00b1",
    "\u0002\u07d0\u07d2\u0005\u00f8}\u0002\u07d1\u07cf\u0003\u0002\u0002",
    "\u0002\u07d1\u07d0\u0003\u0002\u0002\u0002\u07d2\u07d4\u0003\u0002\u0002",
    "\u0002\u07d3\u07cd\u0003\u0002\u0002\u0002\u07d4\u07d7\u0003\u0002\u0002",
    "\u0002\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d5\u07d6\u0003\u0002\u0002",
    "\u0002\u07d6\u0119\u0003\u0002\u0002\u0002\u07d7\u07d5\u0003\u0002\u0002",
    "\u0002\u07d8\u07da\u0005\u011c\u008f\u0002\u07d9\u07db\u0007\u0099\u0002",
    "\u0002\u07da\u07d9\u0003\u0002\u0002\u0002\u07da\u07db\u0003\u0002\u0002",
    "\u0002\u07db\u07dc\u0003\u0002\u0002\u0002\u07dc\u07de\u0007\u0015\u0002",
    "\u0002\u07dd\u07df\u0007\u0099\u0002\u0002\u07de\u07dd\u0003\u0002\u0002",
    "\u0002\u07de\u07df\u0003\u0002\u0002\u0002\u07df\u07e0\u0003\u0002\u0002",
    "\u0002\u07e0\u07e2\u0005\u0150\u00a9\u0002\u07e1\u07e3\u0007\u0099\u0002",
    "\u0002\u07e2\u07e1\u0003\u0002\u0002\u0002\u07e2\u07e3\u0003\u0002\u0002",
    "\u0002\u07e3\u07e4\u0003\u0002\u0002\u0002\u07e4\u07e5\u0007\u0016\u0002",
    "\u0002\u07e5\u011b\u0003\u0002\u0002\u0002\u07e6\u07e7\u0007v\u0002",
    "\u0002\u07e7\u011d\u0003\u0002\u0002\u0002\u07e8\u07ea\u0005\u0120\u0091",
    "\u0002\u07e9\u07eb\u0007\u0099\u0002\u0002\u07ea\u07e9\u0003\u0002\u0002",
    "\u0002\u07ea\u07eb\u0003\u0002\u0002\u0002\u07eb\u07ec\u0003\u0002\u0002",
    "\u0002\u07ec\u07ee\u0007\u0015\u0002\u0002\u07ed\u07ef\u0007\u0099\u0002",
    "\u0002\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002\u0002",
    "\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0\u07f2\u0005\u0102\u0082",
    "\u0002\u07f1\u07f3\u0007\u0099\u0002\u0002\u07f2\u07f1\u0003\u0002\u0002",
    "\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002",
    "\u0002\u07f4\u07f5\u0007\u0016\u0002\u0002\u07f5\u011f\u0003\u0002\u0002",
    "\u0002\u07f6\u07f7\u0007H\u0002\u0002\u07f7\u0121\u0003\u0002\u0002",
    "\u0002\u07f8\u07fa\u0005\u0124\u0093\u0002\u07f9\u07fb\u0007\u0099\u0002",
    "\u0002\u07fa\u07f9\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002",
    "\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002\u07fc\u07fe\u0007\u0015\u0002",
    "\u0002\u07fd\u07ff\u0007\u0099\u0002\u0002\u07fe\u07fd\u0003\u0002\u0002",
    "\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0800\u0003\u0002\u0002",
    "\u0002\u0800\u0802\u0005\u0150\u00a9\u0002\u0801\u0803\u0007\u0099\u0002",
    "\u0002\u0802\u0801\u0003\u0002\u0002\u0002\u0802\u0803\u0003\u0002\u0002",
    "\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804\u0805\u0007\u0016\u0002",
    "\u0002\u0805\u0123\u0003\u0002\u0002\u0002\u0806\u0807\u0007?\u0002",
    "\u0002\u0807\u0125\u0003\u0002\u0002\u0002\u0808\u080a\u0005\u0128\u0095",
    "\u0002\u0809\u080b\u0007\u0099\u0002\u0002\u080a\u0809\u0003\u0002\u0002",
    "\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b\u080c\u0003\u0002\u0002",
    "\u0002\u080c\u080e\u0007\u0015\u0002\u0002\u080d\u080f\u0007\u0099\u0002",
    "\u0002\u080e\u080d\u0003\u0002\u0002\u0002\u080e\u080f\u0003\u0002\u0002",
    "\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0812\u0005\u0150\u00a9",
    "\u0002\u0811\u0813\u0007\u0099\u0002\u0002\u0812\u0811\u0003\u0002\u0002",
    "\u0002\u0812\u0813\u0003\u0002\u0002\u0002\u0813\u0814\u0003\u0002\u0002",
    "\u0002\u0814\u0815\u0007\u0016\u0002\u0002\u0815\u0127\u0003\u0002\u0002",
    "\u0002\u0816\u0817\u0007x\u0002\u0002\u0817\u0129\u0003\u0002\u0002",
    "\u0002\u0818\u081a\u0005\u012c\u0097\u0002\u0819\u081b\u0007\u0099\u0002",
    "\u0002\u081a\u0819\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002",
    "\u0002\u081b\u081c\u0003\u0002\u0002\u0002\u081c\u081e\u0007\u0015\u0002",
    "\u0002\u081d\u081f\u0007\u0099\u0002\u0002\u081e\u081d\u0003\u0002\u0002",
    "\u0002\u081e\u081f\u0003\u0002\u0002\u0002\u081f\u0820\u0003\u0002\u0002",
    "\u0002\u0820\u0822\u0005\u0150\u00a9\u0002\u0821\u0823\u0007\u0099\u0002",
    "\u0002\u0822\u0821\u0003\u0002\u0002\u0002\u0822\u0823\u0003\u0002\u0002",
    "\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824\u0825\u0007\u0016\u0002",
    "\u0002\u0825\u012b\u0003\u0002\u0002\u0002\u0826\u0827\u0007y\u0002",
    "\u0002\u0827\u012d\u0003\u0002\u0002\u0002\u0828\u082a\u0005\u0130\u0099",
    "\u0002\u0829\u082b\u0007\u0099\u0002\u0002\u082a\u0829\u0003\u0002\u0002",
    "\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002",
    "\u0002\u082c\u082e\u0007\u0015\u0002\u0002\u082d\u082f\u0007\u0099\u0002",
    "\u0002\u082e\u082d\u0003\u0002\u0002\u0002\u082e\u082f\u0003\u0002\u0002",
    "\u0002\u082f\u0830\u0003\u0002\u0002\u0002\u0830\u0832\u0005\u0150\u00a9",
    "\u0002\u0831\u0833\u0007\u0099\u0002\u0002\u0832\u0831\u0003\u0002\u0002",
    "\u0002\u0832\u0833\u0003\u0002\u0002\u0002\u0833\u0834\u0003\u0002\u0002",
    "\u0002\u0834\u0835\u0007\u0016\u0002\u0002\u0835\u012f\u0003\u0002\u0002",
    "\u0002\u0836\u0837\u0007z\u0002\u0002\u0837\u0131\u0003\u0002\u0002",
    "\u0002\u0838\u083a\u0005\u0134\u009b\u0002\u0839\u083b\u0007\u0099\u0002",
    "\u0002\u083a\u0839\u0003\u0002\u0002\u0002\u083a\u083b\u0003\u0002\u0002",
    "\u0002\u083b\u083c\u0003\u0002\u0002\u0002\u083c\u083e\u0007\u0015\u0002",
    "\u0002\u083d\u083f\u0007\u0099\u0002\u0002\u083e\u083d\u0003\u0002\u0002",
    "\u0002\u083e\u083f\u0003\u0002\u0002\u0002\u083f\u0840\u0003\u0002\u0002",
    "\u0002\u0840\u0849\u0005\u0150\u00a9\u0002\u0841\u0843\u0007\u0099\u0002",
    "\u0002\u0842\u0841\u0003\u0002\u0002\u0002\u0842\u0843\u0003\u0002\u0002",
    "\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844\u0846\u0007\u0018\u0002",
    "\u0002\u0845\u0847\u0007\u0099\u0002\u0002\u0846\u0845\u0003\u0002\u0002",
    "\u0002\u0846\u0847\u0003\u0002\u0002\u0002\u0847\u0848\u0003\u0002\u0002",
    "\u0002\u0848\u084a\u0005\u0102\u0082\u0002\u0849\u0842\u0003\u0002\u0002",
    "\u0002\u0849\u084a\u0003\u0002\u0002\u0002\u084a\u084c\u0003\u0002\u0002",
    "\u0002\u084b\u084d\u0007\u0099\u0002\u0002\u084c\u084b\u0003\u0002\u0002",
    "\u0002\u084c\u084d\u0003\u0002\u0002\u0002\u084d\u084e\u0003\u0002\u0002",
    "\u0002\u084e\u084f\u0007\u0016\u0002\u0002\u084f\u0133\u0003\u0002\u0002",
    "\u0002\u0850\u0851\u0007w\u0002\u0002\u0851\u0135\u0003\u0002\u0002",
    "\u0002\u0852\u0854\u0005\u0138\u009d\u0002\u0853\u0855\u0007\u0099\u0002",
    "\u0002\u0854\u0853\u0003\u0002\u0002\u0002\u0854\u0855\u0003\u0002\u0002",
    "\u0002\u0855\u0856\u0003\u0002\u0002\u0002\u0856\u0858\u0007\u0015\u0002",
    "\u0002\u0857\u0859\u0007\u0099\u0002\u0002\u0858\u0857\u0003\u0002\u0002",
    "\u0002\u0858\u0859\u0003\u0002\u0002\u0002\u0859\u085a\u0003\u0002\u0002",
    "\u0002\u085a\u085c\u0005\u0166\u00b4\u0002\u085b\u085d\u0007\u0099\u0002",
    "\u0002\u085c\u085b\u0003\u0002\u0002\u0002\u085c\u085d\u0003\u0002\u0002",
    "\u0002\u085d\u085e\u0003\u0002\u0002\u0002\u085e\u0860\u0007\u000e\u0002",
    "\u0002\u085f\u0861\u0007\u0099\u0002\u0002\u0860\u085f\u0003\u0002\u0002",
    "\u0002\u0860\u0861\u0003\u0002\u0002\u0002\u0861\u0862\u0003\u0002\u0002",
    "\u0002\u0862\u0864\u0005\u0102\u0082\u0002\u0863\u0865\u0007\u0099\u0002",
    "\u0002\u0864\u0863\u0003\u0002\u0002\u0002\u0864\u0865\u0003\u0002\u0002",
    "\u0002\u0865\u0866\u0003\u0002\u0002\u0002\u0866\u0868\u0007\u0011\u0002",
    "\u0002\u0867\u0869\u0007\u0099\u0002\u0002\u0868\u0867\u0003\u0002\u0002",
    "\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869\u086a\u0003\u0002\u0002",
    "\u0002\u086a\u086c\u0005\u0152\u00aa\u0002\u086b\u086d\u0007\u0099\u0002",
    "\u0002\u086c\u086b\u0003\u0002\u0002\u0002\u086c\u086d\u0003\u0002\u0002",
    "\u0002\u086d\u086e\u0003\u0002\u0002\u0002\u086e\u0870\u0007\u0018\u0002",
    "\u0002\u086f\u0871\u0007\u0099\u0002\u0002\u0870\u086f\u0003\u0002\u0002",
    "\u0002\u0870\u0871\u0003\u0002\u0002\u0002\u0871\u0872\u0003\u0002\u0002",
    "\u0002\u0872\u0874\u0005\u0102\u0082\u0002\u0873\u0875\u0007\u0099\u0002",
    "\u0002\u0874\u0873\u0003\u0002\u0002\u0002\u0874\u0875\u0003\u0002\u0002",
    "\u0002\u0875\u0876\u0003\u0002\u0002\u0002\u0876\u0877\u0007\u0016\u0002",
    "\u0002\u0877\u0137\u0003\u0002\u0002\u0002\u0878\u0879\u0007}\u0002",
    "\u0002\u0879\u0139\u0003\u0002\u0002\u0002\u087a\u087c\u0005\u013c\u009f",
    "\u0002\u087b\u087d\u0007\u0099\u0002\u0002\u087c\u087b\u0003\u0002\u0002",
    "\u0002\u087c\u087d\u0003\u0002\u0002\u0002\u087d\u087e\u0003\u0002\u0002",
    "\u0002\u087e\u0880\u0007\u0015\u0002\u0002\u087f\u0881\u0007\u0099\u0002",
    "\u0002\u0880\u087f\u0003\u0002\u0002\u0002\u0880\u0881\u0003\u0002\u0002",
    "\u0002\u0881\u0882\u0003\u0002\u0002\u0002\u0882\u0884\u0005\u00e0q",
    "\u0002\u0883\u0885\u0007\u0099\u0002\u0002\u0884\u0883\u0003\u0002\u0002",
    "\u0002\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0886\u0003\u0002\u0002",
    "\u0002\u0886\u0887\u0007\u0016\u0002\u0002\u0887\u0897\u0003\u0002\u0002",
    "\u0002\u0888\u088a\u0005\u013e\u00a0\u0002\u0889\u088b\u0007\u0099\u0002",
    "\u0002\u088a\u0889\u0003\u0002\u0002\u0002\u088a\u088b\u0003\u0002\u0002",
    "\u0002\u088b\u088c\u0003\u0002\u0002\u0002\u088c\u088e\u0007\u0015\u0002",
    "\u0002\u088d\u088f\u0007\u0099\u0002\u0002\u088e\u088d\u0003\u0002\u0002",
    "\u0002\u088e\u088f\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002\u0002",
    "\u0002\u0890\u0892\u0005\u00e0q\u0002\u0891\u0893\u0007\u0099\u0002",
    "\u0002\u0892\u0891\u0003\u0002\u0002\u0002\u0892\u0893\u0003\u0002\u0002",
    "\u0002\u0893\u0894\u0003\u0002\u0002\u0002\u0894\u0895\u0007\u0016\u0002",
    "\u0002\u0895\u0897\u0003\u0002\u0002\u0002\u0896\u087a\u0003\u0002\u0002",
    "\u0002\u0896\u0888\u0003\u0002\u0002\u0002\u0897\u013b\u0003\u0002\u0002",
    "\u0002\u0898\u0899\u0007k\u0002\u0002\u0899\u013d\u0003\u0002\u0002",
    "\u0002\u089a\u089b\u0007l\u0002\u0002\u089b\u013f\u0003\u0002\u0002",
    "\u0002\u089c\u08bc\u0005\u0142\u00a2\u0002\u089d\u08bc\u0005\u0178\u00bd",
    "\u0002\u089e\u08bc\u0005\u0162\u00b2\u0002\u089f\u08a1\u0007u\u0002",
    "\u0002\u08a0\u08a2\u0007\u0099\u0002\u0002\u08a1\u08a0\u0003\u0002\u0002",
    "\u0002\u08a1\u08a2\u0003\u0002\u0002\u0002\u08a2\u08a3\u0003\u0002\u0002",
    "\u0002\u08a3\u08a5\u0007\u0015\u0002\u0002\u08a4\u08a6\u0007\u0099\u0002",
    "\u0002\u08a5\u08a4\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003\u0002\u0002",
    "\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08a9\u0007\u0019\u0002",
    "\u0002\u08a8\u08aa\u0007\u0099\u0002\u0002\u08a9\u08a8\u0003\u0002\u0002",
    "\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa\u08ab\u0003\u0002\u0002",
    "\u0002\u08ab\u08bc\u0007\u0016\u0002\u0002\u08ac\u08bc\u0005\u015c\u00af",
    "\u0002\u08ad\u08bc\u0005\u015e\u00b0\u0002\u08ae\u08bc\u0005\u011a\u008e",
    "\u0002\u08af\u08bc\u0005\u0132\u009a\u0002\u08b0\u08bc\u0005\u0136\u009c",
    "\u0002\u08b1\u08bc\u0005\u0122\u0092\u0002\u08b2\u08bc\u0005\u0126\u0094",
    "\u0002\u08b3\u08bc\u0005\u012a\u0096\u0002\u08b4\u08bc\u0005\u012e\u0098",
    "\u0002\u08b5\u08bc\u0005\u011e\u0090\u0002\u08b6\u08bc\u0005\u013a\u009e",
    "\u0002\u08b7\u08bc\u0005\u014e\u00a8\u0002\u08b8\u08bc\u0005\u014c\u00a7",
    "\u0002\u08b9\u08bc\u0005\u0154\u00ab\u0002\u08ba\u08bc\u0005\u0166\u00b4",
    "\u0002\u08bb\u089c\u0003\u0002\u0002\u0002\u08bb\u089d\u0003\u0002\u0002",
    "\u0002\u08bb\u089e\u0003\u0002\u0002\u0002\u08bb\u089f\u0003\u0002\u0002",
    "\u0002\u08bb\u08ac\u0003\u0002\u0002\u0002\u08bb\u08ad\u0003\u0002\u0002",
    "\u0002\u08bb\u08ae\u0003\u0002\u0002\u0002\u08bb\u08af\u0003\u0002\u0002",
    "\u0002\u08bb\u08b0\u0003\u0002\u0002\u0002\u08bb\u08b1\u0003\u0002\u0002",
    "\u0002\u08bb\u08b2\u0003\u0002\u0002\u0002\u08bb\u08b3\u0003\u0002\u0002",
    "\u0002\u08bb\u08b4\u0003\u0002\u0002\u0002\u08bb\u08b5\u0003\u0002\u0002",
    "\u0002\u08bb\u08b6\u0003\u0002\u0002\u0002\u08bb\u08b7\u0003\u0002\u0002",
    "\u0002\u08bb\u08b8\u0003\u0002\u0002\u0002\u08bb\u08b9\u0003\u0002\u0002",
    "\u0002\u08bb\u08ba\u0003\u0002\u0002\u0002\u08bc\u0141\u0003\u0002\u0002",
    "\u0002\u08bd\u08c5\u0005\u0168\u00b5\u0002\u08be\u08c5\u0005\u0144\u00a3",
    "\u0002\u08bf\u08c5\u0005\u0146\u00a4\u0002\u08c0\u08c5\u0007t\u0002",
    "\u0002\u08c1\u08c5\u0005\u016a\u00b6\u0002\u08c2\u08c5\u0005\u0148\u00a5",
    "\u0002\u08c3\u08c5\u0005\u016c\u00b7\u0002\u08c4\u08bd\u0003\u0002\u0002",
    "\u0002\u08c4\u08be\u0003\u0002\u0002\u0002\u08c4\u08bf\u0003\u0002\u0002",
    "\u0002\u08c4\u08c0\u0003\u0002\u0002\u0002\u08c4\u08c1\u0003\u0002\u0002",
    "\u0002\u08c4\u08c2\u0003\u0002\u0002\u0002\u08c4\u08c3\u0003\u0002\u0002",
    "\u0002\u08c5\u0143\u0003\u0002\u0002\u0002\u08c6\u08c7\u0007\u0086\u0002",
    "\u0002\u08c7\u0145\u0003\u0002\u0002\u0002\u08c8\u08c9\t\u0006\u0002",
    "\u0002\u08c9\u0147\u0003\u0002\u0002\u0002\u08ca\u08cc\u0007\u0013\u0002",
    "\u0002\u08cb\u08cd\u0007\u0099\u0002\u0002\u08cc\u08cb\u0003\u0002\u0002",
    "\u0002\u08cc\u08cd\u0003\u0002\u0002\u0002\u08cd\u08df\u0003\u0002\u0002",
    "\u0002\u08ce\u08d0\u0005\u0102\u0082\u0002\u08cf\u08d1\u0007\u0099\u0002",
    "\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002",
    "\u0002\u08d1\u08dc\u0003\u0002\u0002\u0002\u08d2\u08d4\u0007\u0011\u0002",
    "\u0002\u08d3\u08d5\u0007\u0099\u0002\u0002\u08d4\u08d3\u0003\u0002\u0002",
    "\u0002\u08d4\u08d5\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002",
    "\u0002\u08d6\u08d8\u0005\u0102\u0082\u0002\u08d7\u08d9\u0007\u0099\u0002",
    "\u0002\u08d8\u08d7\u0003\u0002\u0002\u0002\u08d8\u08d9\u0003\u0002\u0002",
    "\u0002\u08d9\u08db\u0003\u0002\u0002\u0002\u08da\u08d2\u0003\u0002\u0002",
    "\u0002\u08db\u08de\u0003\u0002\u0002\u0002\u08dc\u08da\u0003\u0002\u0002",
    "\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002\u08dd\u08e0\u0003\u0002\u0002",
    "\u0002\u08de\u08dc\u0003\u0002\u0002\u0002\u08df\u08ce\u0003\u0002\u0002",
    "\u0002\u08df\u08e0\u0003\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002",
    "\u0002\u08e1\u08e2\u0007\u0014\u0002\u0002\u08e2\u0149\u0003\u0002\u0002",
    "\u0002\u08e3\u08e5\u0007\u000e\u0002\u0002\u08e4\u08e6\u0007\u0099\u0002",
    "\u0002\u08e5\u08e4\u0003\u0002\u0002\u0002\u08e5\u08e6\u0003\u0002\u0002",
    "\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7\u0907\u0005\u010e\u0088",
    "\u0002\u08e8\u08ea\u0007\u001e\u0002\u0002\u08e9\u08eb\u0007\u0099\u0002",
    "\u0002\u08ea\u08e9\u0003\u0002\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002",
    "\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002\u08ec\u0907\u0005\u010e\u0088",
    "\u0002\u08ed\u08ef\u0007\u001f\u0002\u0002\u08ee\u08f0\u0007\u0099\u0002",
    "\u0002\u08ef\u08ee\u0003\u0002\u0002\u0002\u08ef\u08f0\u0003\u0002\u0002",
    "\u0002\u08f0\u08f1\u0003\u0002\u0002\u0002\u08f1\u0907\u0005\u010e\u0088",
    "\u0002\u08f2\u08f4\u0007 \u0002\u0002\u08f3\u08f5\u0007\u0099\u0002",
    "\u0002\u08f4\u08f3\u0003\u0002\u0002\u0002\u08f4\u08f5\u0003\u0002\u0002",
    "\u0002\u08f5\u08f6\u0003\u0002\u0002\u0002\u08f6\u0907\u0005\u010e\u0088",
    "\u0002\u08f7\u08f9\u0007!\u0002\u0002\u08f8\u08fa\u0007\u0099\u0002",
    "\u0002\u08f9\u08f8\u0003\u0002\u0002\u0002\u08f9\u08fa\u0003\u0002\u0002",
    "\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002\u08fb\u0907\u0005\u010e\u0088",
    "\u0002\u08fc\u08fe\u0007\"\u0002\u0002\u08fd\u08ff\u0007\u0099\u0002",
    "\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002\u0002",
    "\u0002\u08ff\u0900\u0003\u0002\u0002\u0002\u0900\u0907\u0005\u010e\u0088",
    "\u0002\u0901\u0903\u0007#\u0002\u0002\u0902\u0904\u0007\u0099\u0002",
    "\u0002\u0903\u0902\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002\u0002",
    "\u0002\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0907\u0005\u010e\u0088",
    "\u0002\u0906\u08e3\u0003\u0002\u0002\u0002\u0906\u08e8\u0003\u0002\u0002",
    "\u0002\u0906\u08ed\u0003\u0002\u0002\u0002\u0906\u08f2\u0003\u0002\u0002",
    "\u0002\u0906\u08f7\u0003\u0002\u0002\u0002\u0906\u08fc\u0003\u0002\u0002",
    "\u0002\u0906\u0901\u0003\u0002\u0002\u0002\u0907\u014b\u0003\u0002\u0002",
    "\u0002\u0908\u090a\u0007\u0015\u0002\u0002\u0909\u090b\u0007\u0099\u0002",
    "\u0002\u090a\u0909\u0003\u0002\u0002\u0002\u090a\u090b\u0003\u0002\u0002",
    "\u0002\u090b\u090c\u0003\u0002\u0002\u0002\u090c\u090e\u0005\u0102\u0082",
    "\u0002\u090d\u090f\u0007\u0099\u0002\u0002\u090e\u090d\u0003\u0002\u0002",
    "\u0002\u090e\u090f\u0003\u0002\u0002\u0002\u090f\u0910\u0003\u0002\u0002",
    "\u0002\u0910\u0911\u0007\u0016\u0002\u0002\u0911\u014d\u0003\u0002\u0002",
    "\u0002\u0912\u0917\u0005\u00e2r\u0002\u0913\u0915\u0007\u0099\u0002",
    "\u0002\u0914\u0913\u0003\u0002\u0002\u0002\u0914\u0915\u0003\u0002\u0002",
    "\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u0918\u0005\u00e4s",
    "\u0002\u0917\u0914\u0003\u0002\u0002\u0002\u0918\u0919\u0003\u0002\u0002",
    "\u0002\u0919\u0917\u0003\u0002\u0002\u0002\u0919\u091a\u0003\u0002\u0002",
    "\u0002\u091a\u014f\u0003\u0002\u0002\u0002\u091b\u0920\u0005\u0152\u00aa",
    "\u0002\u091c\u091e\u0007\u0099\u0002\u0002\u091d\u091c\u0003\u0002\u0002",
    "\u0002\u091d\u091e\u0003\u0002\u0002\u0002\u091e\u091f\u0003\u0002\u0002",
    "\u0002\u091f\u0921\u0005\u00d8m\u0002\u0920\u091d\u0003\u0002\u0002",
    "\u0002\u0920\u0921\u0003\u0002\u0002\u0002\u0921\u0151\u0003\u0002\u0002",
    "\u0002\u0922\u0923\u0005\u0166\u00b4\u0002\u0923\u0924\u0007\u0099\u0002",
    "\u0002\u0924\u0925\u0007Y\u0002\u0002\u0925\u0926\u0007\u0099\u0002",
    "\u0002\u0926\u0927\u0005\u0102\u0082\u0002\u0927\u0153\u0003\u0002\u0002",
    "\u0002\u0928\u092a\u0005\u0156\u00ac\u0002\u0929\u092b\u0007\u0099\u0002",
    "\u0002\u092a\u0929\u0003\u0002\u0002\u0002\u092a\u092b\u0003\u0002\u0002",
    "\u0002\u092b\u092c\u0003\u0002\u0002\u0002\u092c\u092e\u0007\u0015\u0002",
    "\u0002\u092d\u092f\u0007\u0099\u0002\u0002\u092e\u092d\u0003\u0002\u0002",
    "\u0002\u092e\u092f\u0003\u0002\u0002\u0002\u092f\u0934\u0003\u0002\u0002",
    "\u0002\u0930\u0932\u0007Z\u0002\u0002\u0931\u0933\u0007\u0099\u0002",
    "\u0002\u0932\u0931\u0003\u0002\u0002\u0002\u0932\u0933\u0003\u0002\u0002",
    "\u0002\u0933\u0935\u0003\u0002\u0002\u0002\u0934\u0930\u0003\u0002\u0002",
    "\u0002\u0934\u0935\u0003\u0002\u0002\u0002\u0935\u0947\u0003\u0002\u0002",
    "\u0002\u0936\u0938\u0005\u0102\u0082\u0002\u0937\u0939\u0007\u0099\u0002",
    "\u0002\u0938\u0937\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002",
    "\u0002\u0939\u0944\u0003\u0002\u0002\u0002\u093a\u093c\u0007\u0011\u0002",
    "\u0002\u093b\u093d\u0007\u0099\u0002\u0002\u093c\u093b\u0003\u0002\u0002",
    "\u0002\u093c\u093d\u0003\u0002\u0002\u0002\u093d\u093e\u0003\u0002\u0002",
    "\u0002\u093e\u0940\u0005\u0102\u0082\u0002\u093f\u0941\u0007\u0099\u0002",
    "\u0002\u0940\u093f\u0003\u0002\u0002\u0002\u0940\u0941\u0003\u0002\u0002",
    "\u0002\u0941\u0943\u0003\u0002\u0002\u0002\u0942\u093a\u0003\u0002\u0002",
    "\u0002\u0943\u0946\u0003\u0002\u0002\u0002\u0944\u0942\u0003\u0002\u0002",
    "\u0002\u0944\u0945\u0003\u0002\u0002\u0002\u0945\u0948\u0003\u0002\u0002",
    "\u0002\u0946\u0944\u0003\u0002\u0002\u0002\u0947\u0936\u0003\u0002\u0002",
    "\u0002\u0947\u0948\u0003\u0002\u0002\u0002\u0948\u0949\u0003\u0002\u0002",
    "\u0002\u0949\u094a\u0007\u0016\u0002\u0002\u094a\u0155\u0003\u0002\u0002",
    "\u0002\u094b\u094c\u0005\u018c\u00c7\u0002\u094c\u094d\u0005\u0158\u00ad",
    "\u0002\u094d\u0157\u0003\u0002\u0002\u0002\u094e\u094f\t\u0007\u0002",
    "\u0002\u094f\u0159\u0003\u0002\u0002\u0002\u0950\u0951\u0005\u0194\u00cb",
    "\u0002\u0951\u015b\u0003\u0002\u0002\u0002\u0952\u0954\u0007\u0013\u0002",
    "\u0002\u0953\u0955\u0007\u0099\u0002\u0002\u0954\u0953\u0003\u0002\u0002",
    "\u0002\u0954\u0955\u0003\u0002\u0002\u0002\u0955\u0956\u0003\u0002\u0002",
    "\u0002\u0956\u095f\u0005\u0150\u00a9\u0002\u0957\u0959\u0007\u0099\u0002",
    "\u0002\u0958\u0957\u0003\u0002\u0002\u0002\u0958\u0959\u0003\u0002\u0002",
    "\u0002\u0959\u095a\u0003\u0002\u0002\u0002\u095a\u095c\u0007\u0018\u0002",
    "\u0002\u095b\u095d\u0007\u0099\u0002\u0002\u095c\u095b\u0003\u0002\u0002",
    "\u0002\u095c\u095d\u0003\u0002\u0002\u0002\u095d\u095e\u0003\u0002\u0002",
    "\u0002\u095e\u0960\u0005\u0102\u0082\u0002\u095f\u0958\u0003\u0002\u0002",
    "\u0002\u095f\u0960\u0003\u0002\u0002\u0002\u0960\u0962\u0003\u0002\u0002",
    "\u0002\u0961\u0963\u0007\u0099\u0002\u0002\u0962\u0961\u0003\u0002\u0002",
    "\u0002\u0962\u0963\u0003\u0002\u0002\u0002\u0963\u0964\u0003\u0002\u0002",
    "\u0002\u0964\u0965\u0007\u0014\u0002\u0002\u0965\u015d\u0003\u0002\u0002",
    "\u0002\u0966\u0968\u0007\u0013\u0002\u0002\u0967\u0969\u0007\u0099\u0002",
    "\u0002\u0968\u0967\u0003\u0002\u0002\u0002\u0968\u0969\u0003\u0002\u0002",
    "\u0002\u0969\u0972\u0003\u0002\u0002\u0002\u096a\u096c\u0005\u0166\u00b4",
    "\u0002\u096b\u096d\u0007\u0099\u0002\u0002\u096c\u096b\u0003\u0002\u0002",
    "\u0002\u096c\u096d\u0003\u0002\u0002\u0002\u096d\u096e\u0003\u0002\u0002",
    "\u0002\u096e\u0970\u0007\u000e\u0002\u0002\u096f\u0971\u0007\u0099\u0002",
    "\u0002\u0970\u096f\u0003\u0002\u0002\u0002\u0970\u0971\u0003\u0002\u0002",
    "\u0002\u0971\u0973\u0003\u0002\u0002\u0002\u0972\u096a\u0003\u0002\u0002",
    "\u0002\u0972\u0973\u0003\u0002\u0002\u0002\u0973\u0974\u0003\u0002\u0002",
    "\u0002\u0974\u0976\u0005\u014e\u00a8\u0002\u0975\u0977\u0007\u0099\u0002",
    "\u0002\u0976\u0975\u0003\u0002\u0002\u0002\u0976\u0977\u0003\u0002\u0002",
    "\u0002\u0977\u0980\u0003\u0002\u0002\u0002\u0978\u097a\u0007j\u0002",
    "\u0002\u0979\u097b\u0007\u0099\u0002\u0002\u097a\u0979\u0003\u0002\u0002",
    "\u0002\u097a\u097b\u0003\u0002\u0002\u0002\u097b\u097c\u0003\u0002\u0002",
    "\u0002\u097c\u097e\u0005\u0102\u0082\u0002\u097d\u097f\u0007\u0099\u0002",
    "\u0002\u097e\u097d\u0003\u0002\u0002\u0002\u097e\u097f\u0003\u0002\u0002",
    "\u0002\u097f\u0981\u0003\u0002\u0002\u0002\u0980\u0978\u0003\u0002\u0002",
    "\u0002\u0980\u0981\u0003\u0002\u0002\u0002\u0981\u0982\u0003\u0002\u0002",
    "\u0002\u0982\u0984\u0007\u0018\u0002\u0002\u0983\u0985\u0007\u0099\u0002",
    "\u0002\u0984\u0983\u0003\u0002\u0002\u0002\u0984\u0985\u0003\u0002\u0002",
    "\u0002\u0985\u0986\u0003\u0002\u0002\u0002\u0986\u0988\u0005\u0102\u0082",
    "\u0002\u0987\u0989\u0007\u0099\u0002\u0002\u0988\u0987\u0003\u0002\u0002",
    "\u0002\u0988\u0989\u0003\u0002\u0002\u0002\u0989\u098a\u0003\u0002\u0002",
    "\u0002\u098a\u098b\u0007\u0014\u0002\u0002\u098b\u015f\u0003\u0002\u0002",
    "\u0002\u098c\u098e\u0007\t\u0002\u0002\u098d\u098f\u0007\u0099\u0002",
    "\u0002\u098e\u098d\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002",
    "\u0002\u098f\u0990\u0003\u0002\u0002\u0002\u0990\u0991\u0005\u0186\u00c4",
    "\u0002\u0991\u0161\u0003\u0002\u0002\u0002\u0992\u0997\u0007~\u0002",
    "\u0002\u0993\u0995\u0007\u0099\u0002\u0002\u0994\u0993\u0003\u0002\u0002",
    "\u0002\u0994\u0995\u0003\u0002\u0002\u0002\u0995\u0996\u0003\u0002\u0002",
    "\u0002\u0996\u0998\u0005\u0164\u00b3\u0002\u0997\u0994\u0003\u0002\u0002",
    "\u0002\u0998\u0999\u0003\u0002\u0002\u0002\u0999\u0997\u0003\u0002\u0002",
    "\u0002\u0999\u099a\u0003\u0002\u0002\u0002\u099a\u09a9\u0003\u0002\u0002",
    "\u0002\u099b\u099d\u0007~\u0002\u0002\u099c\u099e\u0007\u0099\u0002",
    "\u0002\u099d\u099c\u0003\u0002\u0002\u0002\u099d\u099e\u0003\u0002\u0002",
    "\u0002\u099e\u099f\u0003\u0002\u0002\u0002\u099f\u09a4\u0005\u0102\u0082",
    "\u0002\u09a0\u09a2\u0007\u0099\u0002\u0002\u09a1\u09a0\u0003\u0002\u0002",
    "\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002\u09a2\u09a3\u0003\u0002\u0002",
    "\u0002\u09a3\u09a5\u0005\u0164\u00b3\u0002\u09a4\u09a1\u0003\u0002\u0002",
    "\u0002\u09a5\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a4\u0003\u0002\u0002",
    "\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002\u09a7\u09a9\u0003\u0002\u0002",
    "\u0002\u09a8\u0992\u0003\u0002\u0002\u0002\u09a8\u099b\u0003\u0002\u0002",
    "\u0002\u09a9\u09b2\u0003\u0002\u0002\u0002\u09aa\u09ac\u0007\u0099\u0002",
    "\u0002\u09ab\u09aa\u0003\u0002\u0002\u0002\u09ab\u09ac\u0003\u0002\u0002",
    "\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002\u09ad\u09af\u0007\u007f\u0002",
    "\u0002\u09ae\u09b0\u0007\u0099\u0002\u0002\u09af\u09ae\u0003\u0002\u0002",
    "\u0002\u09af\u09b0\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002\u0002",
    "\u0002\u09b1\u09b3\u0005\u0102\u0082\u0002\u09b2\u09ab\u0003\u0002\u0002",
    "\u0002\u09b2\u09b3\u0003\u0002\u0002\u0002\u09b3\u09b5\u0003\u0002\u0002",
    "\u0002\u09b4\u09b6\u0007\u0099\u0002\u0002\u09b5\u09b4\u0003\u0002\u0002",
    "\u0002\u09b5\u09b6\u0003\u0002\u0002\u0002\u09b6\u09b7\u0003\u0002\u0002",
    "\u0002\u09b7\u09b8\u0007\u0080\u0002\u0002\u09b8\u0163\u0003\u0002\u0002",
    "\u0002\u09b9\u09bb\u0007\u0081\u0002\u0002\u09ba\u09bc\u0007\u0099\u0002",
    "\u0002\u09bb\u09ba\u0003\u0002\u0002\u0002\u09bb\u09bc\u0003\u0002\u0002",
    "\u0002\u09bc\u09bd\u0003\u0002\u0002\u0002\u09bd\u09bf\u0005\u0102\u0082",
    "\u0002\u09be\u09c0\u0007\u0099\u0002\u0002\u09bf\u09be\u0003\u0002\u0002",
    "\u0002\u09bf\u09c0\u0003\u0002\u0002\u0002\u09c0\u09c1\u0003\u0002\u0002",
    "\u0002\u09c1\u09c3\u0007\u0082\u0002\u0002\u09c2\u09c4\u0007\u0099\u0002",
    "\u0002\u09c3\u09c2\u0003\u0002\u0002\u0002\u09c3\u09c4\u0003\u0002\u0002",
    "\u0002\u09c4\u09c5\u0003\u0002\u0002\u0002\u09c5\u09c6\u0005\u0102\u0082",
    "\u0002\u09c6\u0165\u0003\u0002\u0002\u0002\u09c7\u09c8\u0005\u0194\u00cb",
    "\u0002\u09c8\u0167\u0003\u0002\u0002\u0002\u09c9\u09cc\u0005\u018a\u00c6",
    "\u0002\u09ca\u09cc\u0005\u0188\u00c5\u0002\u09cb\u09c9\u0003\u0002\u0002",
    "\u0002\u09cb\u09ca\u0003\u0002\u0002\u0002\u09cc\u0169\u0003\u0002\u0002",
    "\u0002\u09cd\u09cf\u0007\u0010\u0002\u0002\u09ce\u09d0\u0007\u0099\u0002",
    "\u0002\u09cf\u09ce\u0003\u0002\u0002\u0002\u09cf\u09d0\u0003\u0002\u0002",
    "\u0002\u09d0\u09e2\u0003\u0002\u0002\u0002\u09d1\u09d3\u0005\u0170\u00b9",
    "\u0002\u09d2\u09d4\u0007\u0099\u0002\u0002\u09d3\u09d2\u0003\u0002\u0002",
    "\u0002\u09d3\u09d4\u0003\u0002\u0002\u0002\u09d4\u09df\u0003\u0002\u0002",
    "\u0002\u09d5\u09d7\u0007\u0011\u0002\u0002\u09d6\u09d8\u0007\u0099\u0002",
    "\u0002\u09d7\u09d6\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002",
    "\u0002\u09d8\u09d9\u0003\u0002\u0002\u0002\u09d9\u09db\u0005\u0170\u00b9",
    "\u0002\u09da\u09dc\u0007\u0099\u0002\u0002\u09db\u09da\u0003\u0002\u0002",
    "\u0002\u09db\u09dc\u0003\u0002\u0002\u0002\u09dc\u09de\u0003\u0002\u0002",
    "\u0002\u09dd\u09d5\u0003\u0002\u0002\u0002\u09de\u09e1\u0003\u0002\u0002",
    "\u0002\u09df\u09dd\u0003\u0002\u0002\u0002\u09df\u09e0\u0003\u0002\u0002",
    "\u0002\u09e0\u09e3\u0003\u0002\u0002\u0002\u09e1\u09df\u0003\u0002\u0002",
    "\u0002\u09e2\u09d1\u0003\u0002\u0002\u0002\u09e2\u09e3\u0003\u0002\u0002",
    "\u0002\u09e3\u09e4\u0003\u0002\u0002\u0002\u09e4\u09e5\u0007\u0012\u0002",
    "\u0002\u09e5\u016b\u0003\u0002\u0002\u0002\u09e6\u09e8\u0005\u0166\u00b4",
    "\u0002\u09e7\u09e9\u0007\u0099\u0002\u0002\u09e8\u09e7\u0003\u0002\u0002",
    "\u0002\u09e8\u09e9\u0003\u0002\u0002\u0002\u09e9\u09ea\u0003\u0002\u0002",
    "\u0002\u09ea\u09ec\u0007\u0010\u0002\u0002\u09eb\u09ed\u0007\u0099\u0002",
    "\u0002\u09ec\u09eb\u0003\u0002\u0002\u0002\u09ec\u09ed\u0003\u0002\u0002",
    "\u0002\u09ed\u09ef\u0003\u0002\u0002\u0002\u09ee\u09f0\u0005\u016e\u00b8",
    "\u0002\u09ef\u09ee\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002\u0002",
    "\u0002\u09f0\u09fb\u0003\u0002\u0002\u0002\u09f1\u09f3\u0007\u0099\u0002",
    "\u0002\u09f2\u09f1\u0003\u0002\u0002\u0002\u09f2\u09f3\u0003\u0002\u0002",
    "\u0002\u09f3\u09f4\u0003\u0002\u0002\u0002\u09f4\u09f6\u0007\u0011\u0002",
    "\u0002\u09f5\u09f7\u0007\u0099\u0002\u0002\u09f6\u09f5\u0003\u0002\u0002",
    "\u0002\u09f6\u09f7\u0003\u0002\u0002\u0002\u09f7\u09f8\u0003\u0002\u0002",
    "\u0002\u09f8\u09fa\u0005\u016e\u00b8\u0002\u09f9\u09f2\u0003\u0002\u0002",
    "\u0002\u09fa\u09fd\u0003\u0002\u0002\u0002\u09fb\u09f9\u0003\u0002\u0002",
    "\u0002\u09fb\u09fc\u0003\u0002\u0002\u0002\u09fc\u09ff\u0003\u0002\u0002",
    "\u0002\u09fd\u09fb\u0003\u0002\u0002\u0002\u09fe\u0a00\u0007\u0099\u0002",
    "\u0002\u09ff\u09fe\u0003\u0002\u0002\u0002\u09ff\u0a00\u0003\u0002\u0002",
    "\u0002\u0a00\u0a01\u0003\u0002\u0002\u0002\u0a01\u0a02\u0007\u0012\u0002",
    "\u0002\u0a02\u016d\u0003\u0002\u0002\u0002\u0a03\u0a08\u0005\u0170\u00b9",
    "\u0002\u0a04\u0a08\u0005\u0172\u00ba\u0002\u0a05\u0a08\u0005\u0174\u00bb",
    "\u0002\u0a06\u0a08\u0005\u0176\u00bc\u0002\u0a07\u0a03\u0003\u0002\u0002",
    "\u0002\u0a07\u0a04\u0003\u0002\u0002\u0002\u0a07\u0a05\u0003\u0002\u0002",
    "\u0002\u0a07\u0a06\u0003\u0002\u0002\u0002\u0a08\u016f\u0003\u0002\u0002",
    "\u0002\u0a09\u0a0b\u0005\u0186\u00c4\u0002\u0a0a\u0a0c\u0007\u0099\u0002",
    "\u0002\u0a0b\u0a0a\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0003\u0002\u0002",
    "\u0002\u0a0c\u0a0d\u0003\u0002\u0002\u0002\u0a0d\u0a0f\u0007\u0004\u0002",
    "\u0002\u0a0e\u0a10\u0007\u0099\u0002\u0002\u0a0f\u0a0e\u0003\u0002\u0002",
    "\u0002\u0a0f\u0a10\u0003\u0002\u0002\u0002\u0a10\u0a11\u0003\u0002\u0002",
    "\u0002\u0a11\u0a12\u0005\u0102\u0082\u0002\u0a12\u0171\u0003\u0002\u0002",
    "\u0002\u0a13\u0a14\u0007\t\u0002\u0002\u0a14\u0a15\u0005\u0166\u00b4",
    "\u0002\u0a15\u0173\u0003\u0002\u0002\u0002\u0a16\u0a17\u0005\u0166\u00b4",
    "\u0002\u0a17\u0175\u0003\u0002\u0002\u0002\u0a18\u0a19\u0007\t\u0002",
    "\u0002\u0a19\u0a1a\u0007\u0019\u0002\u0002\u0a1a\u0177\u0003\u0002\u0002",
    "\u0002\u0a1b\u0a1e\u0005\u017a\u00be\u0002\u0a1c\u0a1e\u0005\u017c\u00bf",
    "\u0002\u0a1d\u0a1b\u0003\u0002\u0002\u0002\u0a1d\u0a1c\u0003\u0002\u0002",
    "\u0002\u0a1e\u0179\u0003\u0002\u0002\u0002\u0a1f\u0a21\u0007\u0010\u0002",
    "\u0002\u0a20\u0a22\u0007\u0099\u0002\u0002\u0a21\u0a20\u0003\u0002\u0002",
    "\u0002\u0a21\u0a22\u0003\u0002\u0002\u0002\u0a22\u0a23\u0003\u0002\u0002",
    "\u0002\u0a23\u0a25\u0005\u017e\u00c0\u0002\u0a24\u0a26\u0007\u0099\u0002",
    "\u0002\u0a25\u0a24\u0003\u0002\u0002\u0002\u0a25\u0a26\u0003\u0002\u0002",
    "\u0002\u0a26\u0a27\u0003\u0002\u0002\u0002\u0a27\u0a28\u0007\u0012\u0002",
    "\u0002\u0a28\u017b\u0003\u0002\u0002\u0002\u0a29\u0a2a\u0007$\u0002",
    "\u0002\u0a2a\u0a2b\u0005\u017e\u00c0\u0002\u0a2b\u017d\u0003\u0002\u0002",
    "\u0002\u0a2c\u0a2f\u0005\u0194\u00cb\u0002\u0a2d\u0a2f\u0007\u008a\u0002",
    "\u0002\u0a2e\u0a2c\u0003\u0002\u0002\u0002\u0a2e\u0a2d\u0003\u0002\u0002",
    "\u0002\u0a2f\u017f\u0003\u0002\u0002\u0002\u0a30\u0a3b\u0005\u0182\u00c2",
    "\u0002\u0a31\u0a33\u0007\u0099\u0002\u0002\u0a32\u0a31\u0003\u0002\u0002",
    "\u0002\u0a32\u0a33\u0003\u0002\u0002\u0002\u0a33\u0a34\u0003\u0002\u0002",
    "\u0002\u0a34\u0a36\u0007\u0011\u0002\u0002\u0a35\u0a37\u0007\u0099\u0002",
    "\u0002\u0a36\u0a35\u0003\u0002\u0002\u0002\u0a36\u0a37\u0003\u0002\u0002",
    "\u0002\u0a37\u0a38\u0003\u0002\u0002\u0002\u0a38\u0a3a\u0005\u0182\u00c2",
    "\u0002\u0a39\u0a32\u0003\u0002\u0002\u0002\u0a3a\u0a3d\u0003\u0002\u0002",
    "\u0002\u0a3b\u0a39\u0003\u0002\u0002\u0002\u0a3b\u0a3c\u0003\u0002\u0002",
    "\u0002\u0a3c\u0181\u0003\u0002\u0002\u0002\u0a3d\u0a3b\u0003\u0002\u0002",
    "\u0002\u0a3e\u0a43\u0005\u0140\u00a1\u0002\u0a3f\u0a41\u0007\u0099\u0002",
    "\u0002\u0a40\u0a3f\u0003\u0002\u0002\u0002\u0a40\u0a41\u0003\u0002\u0002",
    "\u0002\u0a41\u0a42\u0003\u0002\u0002\u0002\u0a42\u0a44\u0005\u0160\u00b1",
    "\u0002\u0a43\u0a40\u0003\u0002\u0002\u0002\u0a44\u0a45\u0003\u0002\u0002",
    "\u0002\u0a45\u0a43\u0003\u0002\u0002\u0002\u0a45\u0a46\u0003\u0002\u0002",
    "\u0002\u0a46\u0183\u0003\u0002\u0002\u0002\u0a47\u0a52\u0005\u0186\u00c4",
    "\u0002\u0a48\u0a4a\u0007\u0099\u0002\u0002\u0a49\u0a48\u0003\u0002\u0002",
    "\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002\u0a4a\u0a4b\u0003\u0002\u0002",
    "\u0002\u0a4b\u0a4d\u0007\u0011\u0002\u0002\u0a4c\u0a4e\u0007\u0099\u0002",
    "\u0002\u0a4d\u0a4c\u0003\u0002\u0002\u0002\u0a4d\u0a4e\u0003\u0002\u0002",
    "\u0002\u0a4e\u0a4f\u0003\u0002\u0002\u0002\u0a4f\u0a51\u0005\u0186\u00c4",
    "\u0002\u0a50\u0a49\u0003\u0002\u0002\u0002\u0a51\u0a54\u0003\u0002\u0002",
    "\u0002\u0a52\u0a50\u0003\u0002\u0002\u0002\u0a52\u0a53\u0003\u0002\u0002",
    "\u0002\u0a53\u0185\u0003\u0002\u0002\u0002\u0a54\u0a52\u0003\u0002\u0002",
    "\u0002\u0a55\u0a56\u0005\u0194\u00cb\u0002\u0a56\u0187\u0003\u0002\u0002",
    "\u0002\u0a57\u0a58\t\b\u0002\u0002\u0a58\u0189\u0003\u0002\u0002\u0002",
    "\u0a59\u0a5a\t\t\u0002\u0002\u0a5a\u018b\u0003\u0002\u0002\u0002\u0a5b",
    "\u0a5c\u0005\u0194\u00cb\u0002\u0a5c\u0a5d\u0007\t\u0002\u0002\u0a5d",
    "\u0a5f\u0003\u0002\u0002\u0002\u0a5e\u0a5b\u0003\u0002\u0002\u0002\u0a5f",
    "\u0a62\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003\u0002\u0002\u0002\u0a60",
    "\u0a61\u0003\u0002\u0002\u0002\u0a61\u018d\u0003\u0002\u0002\u0002\u0a62",
    "\u0a60\u0003\u0002\u0002\u0002\u0a63\u0a64\t\n\u0002\u0002\u0a64\u018f",
    "\u0003\u0002\u0002\u0002\u0a65\u0a66\t\u000b\u0002\u0002\u0a66\u0191",
    "\u0003\u0002\u0002\u0002\u0a67\u0a68\t\f\u0002\u0002\u0a68\u0193\u0003",
    "\u0002\u0002\u0002\u0a69\u0a6e\u0005\u0196\u00cc\u0002\u0a6a\u0a6e\u0007",
    "\u0095\u0002\u0002\u0a6b\u0a6e\u0007\u0098\u0002\u0002\u0a6c\u0a6e\u0007",
    "\u008c\u0002\u0002\u0a6d\u0a69\u0003\u0002\u0002\u0002\u0a6d\u0a6a\u0003",
    "\u0002\u0002\u0002\u0a6d\u0a6b\u0003\u0002\u0002\u0002\u0a6d\u0a6c\u0003",
    "\u0002\u0002\u0002\u0a6e\u0195\u0003\u0002\u0002\u0002\u0a6f\u0a70\t",
    "\r\u0002\u0002\u0a70\u0197\u0003\u0002\u0002\u0002\u01a4\u019b\u01a0",
    "\u01a4\u01a7\u01ab\u01b0\u01b8\u01c0\u01cd\u01d1\u01d5\u01de\u01e3\u01e7",
    "\u01ea\u01ed\u01f2\u01f6\u01fd\u020f\u0226\u022e\u0230\u0234\u0239\u023f",
    "\u0245\u0249\u024d\u0251\u0255\u025c\u025f\u0263\u0267\u026d\u0271\u0275",
    "\u0279\u027d\u0284\u0287\u028f\u0298\u029d\u02a1\u02a4\u02ab\u02b3\u02b7",
    "\u02bd\u02c2\u02c8\u02d3\u02d7\u02dd\u02e1\u02e5\u02ea\u02ef\u02f5\u02fa",
    "\u0304\u0308\u030d\u0314\u0319\u031c\u032c\u0338\u0366\u036a\u036e\u0372",
    "\u037a\u037e\u0383\u0387\u0395\u0399\u039e\u03a2\u03a8\u03ac\u03ba\u03c1",
    "\u03c7\u03d1\u03d5\u03db\u03e3\u03ee\u03f4\u0400\u0406\u0412\u0416\u0420",
    "\u042d\u0431\u0435\u043b\u043f\u0442\u0446\u0450\u0457\u0464\u0468\u0470",
    "\u0476\u047a\u047e\u0483\u0488\u048c\u0492\u0496\u049c\u04a0\u04a6\u04aa",
    "\u04ae\u04b2\u04b6\u04ba\u04bf\u04c6\u04ca\u04cf\u04d6\u04da\u04de\u04e6",
    "\u04ed\u04f0\u04f6\u04f9\u04fe\u0501\u0505\u0508\u050b\u0512\u0516\u051a",
    "\u051e\u0522\u0527\u052c\u0530\u0535\u0538\u0541\u0547\u054a\u054e\u0551",
    "\u0558\u055b\u055e\u0562\u0567\u056b\u0573\u0577\u057c\u0581\u0585\u0597",
    "\u059b\u05a0\u05ad\u05b1\u05b3\u05b6\u05bf\u05c3\u05c7\u05d3\u05d7\u05dc",
    "\u05e6\u05ec\u05f0\u05f5\u05f9\u05fd\u0601\u0607\u060b\u0610\u0616\u061f",
    "\u0628\u0630\u0636\u063a\u063f\u0648\u064c\u0651\u0656\u065a\u065f\u0663",
    "\u0667\u066c\u0673\u0677\u067b\u067d\u0681\u0683\u0687\u0689\u068f\u0695",
    "\u0698\u069b\u06a1\u06a6\u06aa\u06af\u06b3\u06b7\u06b9\u06bd\u06bf\u06c2",
    "\u06c6\u06c8\u06ce\u06d2\u06d8\u06de\u06e5\u06eb\u06f0\u06f8\u06fc\u06fe",
    "\u0702\u0706\u0708\u070a\u0719\u0723\u072d\u0732\u0736\u073d\u0742\u0747",
    "\u074b\u074f\u0753\u0756\u0758\u075d\u0761\u0765\u0769\u076d\u0771\u0774",
    "\u0776\u077b\u077f\u0784\u0789\u078d\u0794\u079b\u079f\u07a3\u07a7\u07b6",
    "\u07b9\u07c6\u07c8\u07cd\u07d1\u07d5\u07da\u07de\u07e2\u07ea\u07ee\u07f2",
    "\u07fa\u07fe\u0802\u080a\u080e\u0812\u081a\u081e\u0822\u082a\u082e\u0832",
    "\u083a\u083e\u0842\u0846\u0849\u084c\u0854\u0858\u085c\u0860\u0864\u0868",
    "\u086c\u0870\u0874\u087c\u0880\u0884\u088a\u088e\u0892\u0896\u08a1\u08a5",
    "\u08a9\u08bb\u08c4\u08cc\u08d0\u08d4\u08d8\u08dc\u08df\u08e5\u08ea\u08ef",
    "\u08f4\u08f9\u08fe\u0903\u0906\u090a\u090e\u0914\u0919\u091d\u0920\u092a",
    "\u092e\u0932\u0934\u0938\u093c\u0940\u0944\u0947\u0954\u0958\u095c\u095f",
    "\u0962\u0968\u096c\u0970\u0972\u0976\u097a\u097e\u0980\u0984\u0988\u098e",
    "\u0994\u0999\u099d\u09a1\u09a6\u09a8\u09ab\u09af\u09b2\u09b5\u09bb\u09bf",
    "\u09c3\u09cb\u09cf\u09d3\u09d7\u09db\u09df\u09e2\u09e8\u09ec\u09ef\u09f2",
    "\u09f6\u09fb\u09ff\u0a07\u0a0b\u0a0f\u0a1d\u0a21\u0a25\u0a2e\u0a32\u0a36",
    "\u0a3b\u0a40\u0a45\u0a49\u0a4d\u0a52\u0a60\u0a6d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", 
                     "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", 
                     "','", "'}'", "'['", "']'", "'('", "')'", "'+='", "'|'", 
                     "'*'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", 
                     "'<'", "'>'", "'<='", "'>='", "'$'", "'\u27E8'", "'\u3008'", 
                     "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", 
                     "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", 
                     "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", 
                     "'\uFE63'", "'\uFF0D'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'0'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", 
                      "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", 
                      "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", 
                      "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                      "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", 
                      "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", 
                      "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", 
                      "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", 
                      "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", 
                      "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", 
                      "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", 
                      "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "StringLiteral", 
                      "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", 
                      "OctalInteger", "HexLetter", "HexDigit", "Digit", 
                      "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", 
                      "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", 
                      "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
                      "SP", "WHITESPACE", "Comment", "ERROR_TOKEN" ];

var ruleNames =  [ "cypher", "cypherPart", "cypherConsoleCommand", "cypherConsoleCommandName", 
                   "cypherConsoleCommandParameters", "cypherConsoleCommandParameter", 
                   "arrowExpression", "url", "uri", "scheme", "host", "hostname", 
                   "hostnumber", "port", "path", "user", "login", "password", 
                   "frag", "urlQuery", "search", "searchparameter", "string", 
                   "urlDigits", "json", "obj", "pair", "array", "value", 
                   "keyValueLiteral", "commandPath", "subCommand", "cypherQuery", 
                   "queryOptions", "anyCypherOption", "cypherOption", "versionNumber", 
                   "explain", "profile", "configurationOption", "statement", 
                   "query", "regularQuery", "bulkImportQuery", "singleQuery", 
                   "periodicCommitHint", "loadCSVQuery", "union", "clause", 
                   "command", "createUniqueConstraint", "createNodeKeyConstraint", 
                   "createNodePropertyExistenceConstraint", "createRelationshipPropertyExistenceConstraint", 
                   "createIndex", "dropUniqueConstraint", "dropNodeKeyConstraint", 
                   "dropNodePropertyExistenceConstraint", "dropRelationshipPropertyExistenceConstraint", 
                   "dropIndex", "index", "uniqueConstraint", "nodeKeyConstraint", 
                   "nodePropertyExistenceConstraint", "relationshipPropertyExistenceConstraint", 
                   "relationshipPatternSyntax", "loadCSVClause", "matchClause", 
                   "unwindClause", "mergeClause", "mergeAction", "createClause", 
                   "createUniqueClause", "setClause", "setItem", "deleteClause", 
                   "removeClause", "removeItem", "foreachClause", "withClause", 
                   "returnClause", "returnBody", "returnItems", "returnItem", 
                   "call", "procedureInvocation", "procedureInvocationBody", 
                   "procedureArguments", "procedureResults", "procedureResult", 
                   "aliasedProcedureResult", "simpleProcedureResult", "procedureOutput", 
                   "order", "skip", "limit", "sortItem", "hint", "startClause", 
                   "startPoint", "lookup", "nodeLookup", "relationshipLookup", 
                   "identifiedIndexLookup", "indexQuery", "idLookup", "literalIds", 
                   "where", "pattern", "patternPart", "anonymousPatternPart", 
                   "patternElement", "nodePattern", "patternElementChain", 
                   "relationshipPattern", "relationshipPatternStart", "relationshipPatternEnd", 
                   "relationshipDetail", "properties", "relType", "relationshipTypes", 
                   "relationshipType", "relationshipTypeOptionalColon", 
                   "nodeLabels", "nodeLabel", "rangeLiteral", "labelName", 
                   "relTypeName", "expression", "orExpression", "xorExpression", 
                   "andExpression", "notExpression", "comparisonExpression", 
                   "addOrSubtractExpression", "multiplyDivideModuloExpression", 
                   "powerOfExpression", "unaryAddOrSubtractExpression", 
                   "stringListNullOperatorExpression", "propertyOrLabelsExpression", 
                   "filterFunction", "filterFunctionName", "existsFunction", 
                   "existsFunctionName", "allFunction", "allFunctionName", 
                   "anyFunction", "anyFunctionName", "noneFunction", "noneFunctionName", 
                   "singleFunction", "singleFunctionName", "extractFunction", 
                   "extractFunctionName", "reduceFunction", "reduceFunctionName", 
                   "shortestPathPatternFunction", "shortestPathFunctionName", 
                   "allShortestPathFunctionName", "atom", "literal", "stringLiteral", 
                   "booleanLiteral", "listLiteral", "partialComparisonExpression", 
                   "parenthesizedExpression", "relationshipsPattern", "filterExpression", 
                   "idInColl", "functionInvocation", "functionInvocationBody", 
                   "functionName", "procedureName", "listComprehension", 
                   "patternComprehension", "propertyLookup", "caseExpression", 
                   "caseAlternatives", "variable", "numberLiteral", "mapLiteral", 
                   "mapProjection", "mapProjectionVariants", "literalEntry", 
                   "propertySelector", "variableSelector", "allPropertiesSelector", 
                   "parameter", "legacyParameter", "newParameter", "parameterName", 
                   "propertyExpressions", "propertyExpression", "propertyKeys", 
                   "propertyKeyName", "integerLiteral", "doubleLiteral", 
                   "namespace", "leftArrowHead", "rightArrowHead", "dash", 
                   "symbolicName", "keyword" ];

function CypherParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CypherParser.prototype = Object.create(antlr4.Parser.prototype);
CypherParser.prototype.constructor = CypherParser;

Object.defineProperty(CypherParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.T__46 = 47;
CypherParser.T__47 = 48;
CypherParser.T__48 = 49;
CypherParser.T__49 = 50;
CypherParser.T__50 = 51;
CypherParser.T__51 = 52;
CypherParser.T__52 = 53;
CypherParser.CYPHER = 54;
CypherParser.EXPLAIN = 55;
CypherParser.PROFILE = 56;
CypherParser.USING = 57;
CypherParser.PERIODIC = 58;
CypherParser.COMMIT = 59;
CypherParser.UNION = 60;
CypherParser.ALL = 61;
CypherParser.CREATE = 62;
CypherParser.DROP = 63;
CypherParser.INDEX = 64;
CypherParser.ON = 65;
CypherParser.CONSTRAINT = 66;
CypherParser.ASSERT = 67;
CypherParser.IS = 68;
CypherParser.UNIQUE = 69;
CypherParser.EXISTS = 70;
CypherParser.LOAD = 71;
CypherParser.CSV = 72;
CypherParser.WITH = 73;
CypherParser.HEADERS = 74;
CypherParser.FROM = 75;
CypherParser.AS = 76;
CypherParser.FIELDTERMINATOR = 77;
CypherParser.OPTIONAL = 78;
CypherParser.MATCH = 79;
CypherParser.UNWIND = 80;
CypherParser.MERGE = 81;
CypherParser.SET = 82;
CypherParser.DETACH = 83;
CypherParser.DELETE = 84;
CypherParser.REMOVE = 85;
CypherParser.FOREACH = 86;
CypherParser.IN = 87;
CypherParser.DISTINCT = 88;
CypherParser.RETURN = 89;
CypherParser.ORDER = 90;
CypherParser.BY = 91;
CypherParser.L_SKIP = 92;
CypherParser.LIMIT = 93;
CypherParser.ASCENDING = 94;
CypherParser.ASC = 95;
CypherParser.DESCENDING = 96;
CypherParser.DESC = 97;
CypherParser.JOIN = 98;
CypherParser.SCAN = 99;
CypherParser.START = 100;
CypherParser.NODE = 101;
CypherParser.RELATIONSHIP = 102;
CypherParser.REL = 103;
CypherParser.WHERE = 104;
CypherParser.SHORTESTPATH = 105;
CypherParser.ALLSHORTESTPATHS = 106;
CypherParser.OR = 107;
CypherParser.XOR = 108;
CypherParser.AND = 109;
CypherParser.NOT = 110;
CypherParser.STARTS = 111;
CypherParser.ENDS = 112;
CypherParser.CONTAINS = 113;
CypherParser.NULL = 114;
CypherParser.COUNT = 115;
CypherParser.FILTER = 116;
CypherParser.EXTRACT = 117;
CypherParser.ANY = 118;
CypherParser.NONE = 119;
CypherParser.SINGLE = 120;
CypherParser.TRUE = 121;
CypherParser.FALSE = 122;
CypherParser.REDUCE = 123;
CypherParser.CASE = 124;
CypherParser.ELSE = 125;
CypherParser.END = 126;
CypherParser.WHEN = 127;
CypherParser.THEN = 128;
CypherParser.CALL = 129;
CypherParser.YIELD = 130;
CypherParser.KEY = 131;
CypherParser.StringLiteral = 132;
CypherParser.UrlHex = 133;
CypherParser.EscapedChar = 134;
CypherParser.HexInteger = 135;
CypherParser.DecimalInteger = 136;
CypherParser.OctalInteger = 137;
CypherParser.HexLetter = 138;
CypherParser.HexDigit = 139;
CypherParser.Digit = 140;
CypherParser.NonZeroDigit = 141;
CypherParser.NonZeroOctDigit = 142;
CypherParser.OctDigit = 143;
CypherParser.ZeroDigit = 144;
CypherParser.ExponentDecimalReal = 145;
CypherParser.RegularDecimalReal = 146;
CypherParser.UnescapedSymbolicName = 147;
CypherParser.IdentifierStart = 148;
CypherParser.IdentifierPart = 149;
CypherParser.EscapedSymbolicName = 150;
CypherParser.SP = 151;
CypherParser.WHITESPACE = 152;
CypherParser.Comment = 153;
CypherParser.ERROR_TOKEN = 154;

CypherParser.RULE_cypher = 0;
CypherParser.RULE_cypherPart = 1;
CypherParser.RULE_cypherConsoleCommand = 2;
CypherParser.RULE_cypherConsoleCommandName = 3;
CypherParser.RULE_cypherConsoleCommandParameters = 4;
CypherParser.RULE_cypherConsoleCommandParameter = 5;
CypherParser.RULE_arrowExpression = 6;
CypherParser.RULE_url = 7;
CypherParser.RULE_uri = 8;
CypherParser.RULE_scheme = 9;
CypherParser.RULE_host = 10;
CypherParser.RULE_hostname = 11;
CypherParser.RULE_hostnumber = 12;
CypherParser.RULE_port = 13;
CypherParser.RULE_path = 14;
CypherParser.RULE_user = 15;
CypherParser.RULE_login = 16;
CypherParser.RULE_password = 17;
CypherParser.RULE_frag = 18;
CypherParser.RULE_urlQuery = 19;
CypherParser.RULE_search = 20;
CypherParser.RULE_searchparameter = 21;
CypherParser.RULE_string = 22;
CypherParser.RULE_urlDigits = 23;
CypherParser.RULE_json = 24;
CypherParser.RULE_obj = 25;
CypherParser.RULE_pair = 26;
CypherParser.RULE_array = 27;
CypherParser.RULE_value = 28;
CypherParser.RULE_keyValueLiteral = 29;
CypherParser.RULE_commandPath = 30;
CypherParser.RULE_subCommand = 31;
CypherParser.RULE_cypherQuery = 32;
CypherParser.RULE_queryOptions = 33;
CypherParser.RULE_anyCypherOption = 34;
CypherParser.RULE_cypherOption = 35;
CypherParser.RULE_versionNumber = 36;
CypherParser.RULE_explain = 37;
CypherParser.RULE_profile = 38;
CypherParser.RULE_configurationOption = 39;
CypherParser.RULE_statement = 40;
CypherParser.RULE_query = 41;
CypherParser.RULE_regularQuery = 42;
CypherParser.RULE_bulkImportQuery = 43;
CypherParser.RULE_singleQuery = 44;
CypherParser.RULE_periodicCommitHint = 45;
CypherParser.RULE_loadCSVQuery = 46;
CypherParser.RULE_union = 47;
CypherParser.RULE_clause = 48;
CypherParser.RULE_command = 49;
CypherParser.RULE_createUniqueConstraint = 50;
CypherParser.RULE_createNodeKeyConstraint = 51;
CypherParser.RULE_createNodePropertyExistenceConstraint = 52;
CypherParser.RULE_createRelationshipPropertyExistenceConstraint = 53;
CypherParser.RULE_createIndex = 54;
CypherParser.RULE_dropUniqueConstraint = 55;
CypherParser.RULE_dropNodeKeyConstraint = 56;
CypherParser.RULE_dropNodePropertyExistenceConstraint = 57;
CypherParser.RULE_dropRelationshipPropertyExistenceConstraint = 58;
CypherParser.RULE_dropIndex = 59;
CypherParser.RULE_index = 60;
CypherParser.RULE_uniqueConstraint = 61;
CypherParser.RULE_nodeKeyConstraint = 62;
CypherParser.RULE_nodePropertyExistenceConstraint = 63;
CypherParser.RULE_relationshipPropertyExistenceConstraint = 64;
CypherParser.RULE_relationshipPatternSyntax = 65;
CypherParser.RULE_loadCSVClause = 66;
CypherParser.RULE_matchClause = 67;
CypherParser.RULE_unwindClause = 68;
CypherParser.RULE_mergeClause = 69;
CypherParser.RULE_mergeAction = 70;
CypherParser.RULE_createClause = 71;
CypherParser.RULE_createUniqueClause = 72;
CypherParser.RULE_setClause = 73;
CypherParser.RULE_setItem = 74;
CypherParser.RULE_deleteClause = 75;
CypherParser.RULE_removeClause = 76;
CypherParser.RULE_removeItem = 77;
CypherParser.RULE_foreachClause = 78;
CypherParser.RULE_withClause = 79;
CypherParser.RULE_returnClause = 80;
CypherParser.RULE_returnBody = 81;
CypherParser.RULE_returnItems = 82;
CypherParser.RULE_returnItem = 83;
CypherParser.RULE_call = 84;
CypherParser.RULE_procedureInvocation = 85;
CypherParser.RULE_procedureInvocationBody = 86;
CypherParser.RULE_procedureArguments = 87;
CypherParser.RULE_procedureResults = 88;
CypherParser.RULE_procedureResult = 89;
CypherParser.RULE_aliasedProcedureResult = 90;
CypherParser.RULE_simpleProcedureResult = 91;
CypherParser.RULE_procedureOutput = 92;
CypherParser.RULE_order = 93;
CypherParser.RULE_skip = 94;
CypherParser.RULE_limit = 95;
CypherParser.RULE_sortItem = 96;
CypherParser.RULE_hint = 97;
CypherParser.RULE_startClause = 98;
CypherParser.RULE_startPoint = 99;
CypherParser.RULE_lookup = 100;
CypherParser.RULE_nodeLookup = 101;
CypherParser.RULE_relationshipLookup = 102;
CypherParser.RULE_identifiedIndexLookup = 103;
CypherParser.RULE_indexQuery = 104;
CypherParser.RULE_idLookup = 105;
CypherParser.RULE_literalIds = 106;
CypherParser.RULE_where = 107;
CypherParser.RULE_pattern = 108;
CypherParser.RULE_patternPart = 109;
CypherParser.RULE_anonymousPatternPart = 110;
CypherParser.RULE_patternElement = 111;
CypherParser.RULE_nodePattern = 112;
CypherParser.RULE_patternElementChain = 113;
CypherParser.RULE_relationshipPattern = 114;
CypherParser.RULE_relationshipPatternStart = 115;
CypherParser.RULE_relationshipPatternEnd = 116;
CypherParser.RULE_relationshipDetail = 117;
CypherParser.RULE_properties = 118;
CypherParser.RULE_relType = 119;
CypherParser.RULE_relationshipTypes = 120;
CypherParser.RULE_relationshipType = 121;
CypherParser.RULE_relationshipTypeOptionalColon = 122;
CypherParser.RULE_nodeLabels = 123;
CypherParser.RULE_nodeLabel = 124;
CypherParser.RULE_rangeLiteral = 125;
CypherParser.RULE_labelName = 126;
CypherParser.RULE_relTypeName = 127;
CypherParser.RULE_expression = 128;
CypherParser.RULE_orExpression = 129;
CypherParser.RULE_xorExpression = 130;
CypherParser.RULE_andExpression = 131;
CypherParser.RULE_notExpression = 132;
CypherParser.RULE_comparisonExpression = 133;
CypherParser.RULE_addOrSubtractExpression = 134;
CypherParser.RULE_multiplyDivideModuloExpression = 135;
CypherParser.RULE_powerOfExpression = 136;
CypherParser.RULE_unaryAddOrSubtractExpression = 137;
CypherParser.RULE_stringListNullOperatorExpression = 138;
CypherParser.RULE_propertyOrLabelsExpression = 139;
CypherParser.RULE_filterFunction = 140;
CypherParser.RULE_filterFunctionName = 141;
CypherParser.RULE_existsFunction = 142;
CypherParser.RULE_existsFunctionName = 143;
CypherParser.RULE_allFunction = 144;
CypherParser.RULE_allFunctionName = 145;
CypherParser.RULE_anyFunction = 146;
CypherParser.RULE_anyFunctionName = 147;
CypherParser.RULE_noneFunction = 148;
CypherParser.RULE_noneFunctionName = 149;
CypherParser.RULE_singleFunction = 150;
CypherParser.RULE_singleFunctionName = 151;
CypherParser.RULE_extractFunction = 152;
CypherParser.RULE_extractFunctionName = 153;
CypherParser.RULE_reduceFunction = 154;
CypherParser.RULE_reduceFunctionName = 155;
CypherParser.RULE_shortestPathPatternFunction = 156;
CypherParser.RULE_shortestPathFunctionName = 157;
CypherParser.RULE_allShortestPathFunctionName = 158;
CypherParser.RULE_atom = 159;
CypherParser.RULE_literal = 160;
CypherParser.RULE_stringLiteral = 161;
CypherParser.RULE_booleanLiteral = 162;
CypherParser.RULE_listLiteral = 163;
CypherParser.RULE_partialComparisonExpression = 164;
CypherParser.RULE_parenthesizedExpression = 165;
CypherParser.RULE_relationshipsPattern = 166;
CypherParser.RULE_filterExpression = 167;
CypherParser.RULE_idInColl = 168;
CypherParser.RULE_functionInvocation = 169;
CypherParser.RULE_functionInvocationBody = 170;
CypherParser.RULE_functionName = 171;
CypherParser.RULE_procedureName = 172;
CypherParser.RULE_listComprehension = 173;
CypherParser.RULE_patternComprehension = 174;
CypherParser.RULE_propertyLookup = 175;
CypherParser.RULE_caseExpression = 176;
CypherParser.RULE_caseAlternatives = 177;
CypherParser.RULE_variable = 178;
CypherParser.RULE_numberLiteral = 179;
CypherParser.RULE_mapLiteral = 180;
CypherParser.RULE_mapProjection = 181;
CypherParser.RULE_mapProjectionVariants = 182;
CypherParser.RULE_literalEntry = 183;
CypherParser.RULE_propertySelector = 184;
CypherParser.RULE_variableSelector = 185;
CypherParser.RULE_allPropertiesSelector = 186;
CypherParser.RULE_parameter = 187;
CypherParser.RULE_legacyParameter = 188;
CypherParser.RULE_newParameter = 189;
CypherParser.RULE_parameterName = 190;
CypherParser.RULE_propertyExpressions = 191;
CypherParser.RULE_propertyExpression = 192;
CypherParser.RULE_propertyKeys = 193;
CypherParser.RULE_propertyKeyName = 194;
CypherParser.RULE_integerLiteral = 195;
CypherParser.RULE_doubleLiteral = 196;
CypherParser.RULE_namespace = 197;
CypherParser.RULE_leftArrowHead = 198;
CypherParser.RULE_rightArrowHead = 199;
CypherParser.RULE_dash = 200;
CypherParser.RULE_symbolicName = 201;
CypherParser.RULE_keyword = 202;

function CypherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypher;
    return this;
}

CypherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherContext.prototype.constructor = CypherContext;

CypherContext.prototype.EOF = function() {
    return this.getToken(CypherParser.EOF, 0);
};

CypherContext.prototype.cypherPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CypherPartContext);
    } else {
        return this.getTypedRuleContext(CypherPartContext,i);
    }
};

CypherContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypher(this);
	}
};

CypherContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypher(this);
	}
};




CypherParser.CypherContext = CypherContext;

CypherParser.prototype.cypher = function() {

    var localctx = new CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_cypher);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 406;
            this.cypherPart();
            this.state = 409; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CypherParser.T__1 || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.START - 86)))) !== 0) || _la===CypherParser.CALL || _la===CypherParser.SP);
        this.state = 411;
        this.match(CypherParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherPart;
    return this;
}

CypherPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherPartContext.prototype.constructor = CypherPartContext;

CypherPartContext.prototype.cypherQuery = function() {
    return this.getTypedRuleContext(CypherQueryContext,0);
};

CypherPartContext.prototype.cypherConsoleCommand = function() {
    return this.getTypedRuleContext(CypherConsoleCommandContext,0);
};

CypherPartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherPart(this);
	}
};

CypherPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherPart(this);
	}
};




CypherParser.CypherPartContext = CypherPartContext;

CypherParser.prototype.cypherPart = function() {

    var localctx = new CypherPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_cypherPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 413;
            this.match(CypherParser.SP);
        }

        this.state = 418;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.LOAD:
        case CypherParser.WITH:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.RETURN:
        case CypherParser.START:
        case CypherParser.CALL:
            this.state = 416;
            this.cypherQuery();
            break;
        case CypherParser.T__1:
            this.state = 417;
            this.cypherConsoleCommand();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 420;
            this.match(CypherParser.SP);
        }

        this.state = 423;
        this.match(CypherParser.T__0);
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        if(la_===1) {
            this.state = 424;
            this.match(CypherParser.SP);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommand;
    return this;
}

CypherConsoleCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandContext.prototype.constructor = CypherConsoleCommandContext;

CypherConsoleCommandContext.prototype.cypherConsoleCommandName = function() {
    return this.getTypedRuleContext(CypherConsoleCommandNameContext,0);
};

CypherConsoleCommandContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CypherConsoleCommandContext.prototype.cypherConsoleCommandParameters = function() {
    return this.getTypedRuleContext(CypherConsoleCommandParametersContext,0);
};

CypherConsoleCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommand(this);
	}
};

CypherConsoleCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommand(this);
	}
};




CypherParser.CypherConsoleCommandContext = CypherConsoleCommandContext;

CypherParser.prototype.cypherConsoleCommand = function() {

    var localctx = new CypherConsoleCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_cypherConsoleCommand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.cypherConsoleCommandName();
        this.state = 430;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        if(la_===1) {
            this.state = 428;
            this.match(CypherParser.SP);
            this.state = 429;
            this.cypherConsoleCommandParameters();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandName;
    return this;
}

CypherConsoleCommandNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandNameContext.prototype.constructor = CypherConsoleCommandNameContext;

CypherConsoleCommandNameContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

CypherConsoleCommandNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandName(this);
	}
};

CypherConsoleCommandNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandName(this);
	}
};




CypherParser.CypherConsoleCommandNameContext = CypherConsoleCommandNameContext;

CypherParser.prototype.cypherConsoleCommandName = function() {

    var localctx = new CypherConsoleCommandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_cypherConsoleCommandName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this.match(CypherParser.T__1);
        this.state = 433;
        this.symbolicName();
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2) {
            this.state = 434;
            this.match(CypherParser.T__2);
            this.state = 435;
            this.symbolicName();
            this.state = 440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameters;
    return this;
}

CypherConsoleCommandParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandParametersContext.prototype.constructor = CypherConsoleCommandParametersContext;

CypherConsoleCommandParametersContext.prototype.cypherConsoleCommandParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);
    } else {
        return this.getTypedRuleContext(CypherConsoleCommandParameterContext,i);
    }
};

CypherConsoleCommandParametersContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherConsoleCommandParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandParameters(this);
	}
};

CypherConsoleCommandParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandParameters(this);
	}
};




CypherParser.CypherConsoleCommandParametersContext = CypherConsoleCommandParametersContext;

CypherParser.prototype.cypherConsoleCommandParameters = function() {

    var localctx = new CypherConsoleCommandParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_cypherConsoleCommandParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.cypherConsoleCommandParameter();
        this.state = 446;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 442;
                this.match(CypherParser.SP);
                this.state = 443;
                this.cypherConsoleCommandParameter(); 
            }
            this.state = 448;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameter;
    return this;
}

CypherConsoleCommandParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandParameterContext.prototype.constructor = CypherConsoleCommandParameterContext;

CypherConsoleCommandParameterContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

CypherConsoleCommandParameterContext.prototype.json = function() {
    return this.getTypedRuleContext(JsonContext,0);
};

CypherConsoleCommandParameterContext.prototype.arrowExpression = function() {
    return this.getTypedRuleContext(ArrowExpressionContext,0);
};

CypherConsoleCommandParameterContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.keyValueLiteral = function() {
    return this.getTypedRuleContext(KeyValueLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.subCommand = function() {
    return this.getTypedRuleContext(SubCommandContext,0);
};

CypherConsoleCommandParameterContext.prototype.commandPath = function() {
    return this.getTypedRuleContext(CommandPathContext,0);
};

CypherConsoleCommandParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandParameter(this);
	}
};

CypherConsoleCommandParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandParameter(this);
	}
};




CypherParser.CypherConsoleCommandParameterContext = CypherConsoleCommandParameterContext;

CypherParser.prototype.cypherConsoleCommandParameter = function() {

    var localctx = new CypherConsoleCommandParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_cypherConsoleCommandParameter);
    try {
        this.state = 459;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 449;
            this.url();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 450;
            this.json();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 451;
            this.arrowExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 452;
            this.mapLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 453;
            this.keyValueLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 454;
            this.stringLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 455;
            this.numberLiteral();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 456;
            this.booleanLiteral();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 457;
            this.subCommand();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 458;
            this.commandPath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_arrowExpression;
    return this;
}

ArrowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowExpressionContext.prototype.constructor = ArrowExpressionContext;

ArrowExpressionContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ArrowExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArrowExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ArrowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterArrowExpression(this);
	}
};

ArrowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitArrowExpression(this);
	}
};




CypherParser.ArrowExpressionContext = ArrowExpressionContext;

CypherParser.prototype.arrowExpression = function() {

    var localctx = new ArrowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_arrowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.symbolicName();
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 462;
            this.match(CypherParser.SP);
        }

        this.state = 465;
        this.match(CypherParser.T__3);
        this.state = 467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 466;
            this.match(CypherParser.SP);
        }

        this.state = 469;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_url;
    return this;
}

UrlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlContext.prototype.constructor = UrlContext;

UrlContext.prototype.uri = function() {
    return this.getTypedRuleContext(UriContext,0);
};

UrlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrl(this);
	}
};

UrlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrl(this);
	}
};




CypherParser.UrlContext = UrlContext;

CypherParser.prototype.url = function() {

    var localctx = new UrlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_url);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.uri();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UriContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uri;
    return this;
}

UriContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UriContext.prototype.constructor = UriContext;

UriContext.prototype.scheme = function() {
    return this.getTypedRuleContext(SchemeContext,0);
};

UriContext.prototype.host = function() {
    return this.getTypedRuleContext(HostContext,0);
};

UriContext.prototype.login = function() {
    return this.getTypedRuleContext(LoginContext,0);
};

UriContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

UriContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

UriContext.prototype.urlQuery = function() {
    return this.getTypedRuleContext(UrlQueryContext,0);
};

UriContext.prototype.frag = function() {
    return this.getTypedRuleContext(FragContext,0);
};

UriContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUri(this);
	}
};

UriContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUri(this);
	}
};




CypherParser.UriContext = UriContext;

CypherParser.prototype.uri = function() {

    var localctx = new UriContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_uri);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.scheme();
        this.state = 474;
        this.match(CypherParser.T__4);
        this.state = 476;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 475;
            this.login();

        }
        this.state = 478;
        this.host();
        this.state = 481;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 479;
            this.match(CypherParser.T__1);
            this.state = 480;
            this.port();
        }

        this.state = 485;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 483;
            this.match(CypherParser.T__5);
            this.state = 484;
            this.path();
        }

        this.state = 488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__9) {
            this.state = 487;
            this.urlQuery();
        }

        this.state = 491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__8) {
            this.state = 490;
            this.frag();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SchemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_scheme;
    return this;
}

SchemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemeContext.prototype.constructor = SchemeContext;

SchemeContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

SchemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterScheme(this);
	}
};

SchemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitScheme(this);
	}
};




CypherParser.SchemeContext = SchemeContext;

CypherParser.prototype.scheme = function() {

    var localctx = new SchemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_scheme);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_host;
    return this;
}

HostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostContext.prototype.constructor = HostContext;

HostContext.prototype.hostname = function() {
    return this.getTypedRuleContext(HostnameContext,0);
};

HostContext.prototype.hostnumber = function() {
    return this.getTypedRuleContext(HostnumberContext,0);
};

HostContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHost(this);
	}
};

HostContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHost(this);
	}
};




CypherParser.HostContext = HostContext;

CypherParser.prototype.host = function() {

    var localctx = new HostContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_host);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 495;
            this.match(CypherParser.T__5);
        }

        this.state = 500;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.HexLetter:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.state = 498;
            this.hostname();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.state = 499;
            this.hostnumber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostname;
    return this;
}

HostnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnameContext.prototype.constructor = HostnameContext;

HostnameContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

HostnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHostname(this);
	}
};

HostnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHostname(this);
	}
};




CypherParser.HostnameContext = HostnameContext;

CypherParser.prototype.hostname = function() {

    var localctx = new HostnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_hostname);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        this.string();
        this.state = 507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__6) {
            this.state = 503;
            this.match(CypherParser.T__6);
            this.state = 504;
            this.string();
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostnumber;
    return this;
}

HostnumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnumberContext.prototype.constructor = HostnumberContext;

HostnumberContext.prototype.urlDigits = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UrlDigitsContext);
    } else {
        return this.getTypedRuleContext(UrlDigitsContext,i);
    }
};

HostnumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHostnumber(this);
	}
};

HostnumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHostnumber(this);
	}
};




CypherParser.HostnumberContext = HostnumberContext;

CypherParser.prototype.hostnumber = function() {

    var localctx = new HostnumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_hostnumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.urlDigits();
        this.state = 511;
        this.match(CypherParser.T__6);
        this.state = 512;
        this.urlDigits();
        this.state = 513;
        this.match(CypherParser.T__6);
        this.state = 514;
        this.urlDigits();
        this.state = 515;
        this.match(CypherParser.T__6);
        this.state = 516;
        this.urlDigits();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.urlDigits = function() {
    return this.getTypedRuleContext(UrlDigitsContext,0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPort(this);
	}
};




CypherParser.PortContext = PortContext;

CypherParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_port);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.urlDigits();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPath(this);
	}
};




CypherParser.PathContext = PathContext;

CypherParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.string();
        this.state = 525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__5) {
            this.state = 521;
            this.match(CypherParser.T__5);
            this.state = 522;
            this.string();
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_user;
    return this;
}

UserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserContext.prototype.constructor = UserContext;

UserContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

UserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUser(this);
	}
};

UserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUser(this);
	}
};




CypherParser.UserContext = UserContext;

CypherParser.prototype.user = function() {

    var localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_user);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_login;
    return this;
}

LoginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoginContext.prototype.constructor = LoginContext;

LoginContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

LoginContext.prototype.password = function() {
    return this.getTypedRuleContext(PasswordContext,0);
};

LoginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLogin(this);
	}
};

LoginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLogin(this);
	}
};




CypherParser.LoginContext = LoginContext;

CypherParser.prototype.login = function() {

    var localctx = new LoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_login);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 530;
        this.user();
        this.state = 531;
        this.match(CypherParser.T__1);
        this.state = 532;
        this.password();
        this.state = 533;
        this.match(CypherParser.T__7);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_password;
    return this;
}

PasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordContext.prototype.constructor = PasswordContext;

PasswordContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

PasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPassword(this);
	}
};

PasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPassword(this);
	}
};




CypherParser.PasswordContext = PasswordContext;

CypherParser.prototype.password = function() {

    var localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_password);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FragContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_frag;
    return this;
}

FragContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FragContext.prototype.constructor = FragContext;

FragContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

FragContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFrag(this);
	}
};

FragContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFrag(this);
	}
};




CypherParser.FragContext = FragContext;

CypherParser.prototype.frag = function() {

    var localctx = new FragContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_frag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(CypherParser.T__8);
        this.state = 538;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlQuery;
    return this;
}

UrlQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlQueryContext.prototype.constructor = UrlQueryContext;

UrlQueryContext.prototype.search = function() {
    return this.getTypedRuleContext(SearchContext,0);
};

UrlQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrlQuery(this);
	}
};

UrlQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrlQuery(this);
	}
};




CypherParser.UrlQueryContext = UrlQueryContext;

CypherParser.prototype.urlQuery = function() {

    var localctx = new UrlQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_urlQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(CypherParser.T__9);
        this.state = 541;
        this.search();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_search;
    return this;
}

SearchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchContext.prototype.constructor = SearchContext;

SearchContext.prototype.searchparameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SearchparameterContext);
    } else {
        return this.getTypedRuleContext(SearchparameterContext,i);
    }
};

SearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSearch(this);
	}
};

SearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSearch(this);
	}
};




CypherParser.SearchContext = SearchContext;

CypherParser.prototype.search = function() {

    var localctx = new SearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_search);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.searchparameter();
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__10) {
            this.state = 544;
            this.match(CypherParser.T__10);
            this.state = 545;
            this.searchparameter();
            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_searchparameter;
    return this;
}

SearchparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchparameterContext.prototype.constructor = SearchparameterContext;

SearchparameterContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

SearchparameterContext.prototype.urlDigits = function() {
    return this.getTypedRuleContext(UrlDigitsContext,0);
};

SearchparameterContext.prototype.UrlHex = function() {
    return this.getToken(CypherParser.UrlHex, 0);
};

SearchparameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSearchparameter(this);
	}
};

SearchparameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSearchparameter(this);
	}
};




CypherParser.SearchparameterContext = SearchparameterContext;

CypherParser.prototype.searchparameter = function() {

    var localctx = new SearchparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_searchparameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.string();
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__11) {
            this.state = 552;
            this.match(CypherParser.T__11);
            this.state = 556;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CypherParser.CYPHER:
            case CypherParser.EXPLAIN:
            case CypherParser.PROFILE:
            case CypherParser.USING:
            case CypherParser.PERIODIC:
            case CypherParser.COMMIT:
            case CypherParser.UNION:
            case CypherParser.ALL:
            case CypherParser.CREATE:
            case CypherParser.DROP:
            case CypherParser.INDEX:
            case CypherParser.ON:
            case CypherParser.CONSTRAINT:
            case CypherParser.ASSERT:
            case CypherParser.IS:
            case CypherParser.UNIQUE:
            case CypherParser.EXISTS:
            case CypherParser.LOAD:
            case CypherParser.CSV:
            case CypherParser.WITH:
            case CypherParser.HEADERS:
            case CypherParser.FROM:
            case CypherParser.AS:
            case CypherParser.FIELDTERMINATOR:
            case CypherParser.OPTIONAL:
            case CypherParser.MATCH:
            case CypherParser.UNWIND:
            case CypherParser.MERGE:
            case CypherParser.SET:
            case CypherParser.DETACH:
            case CypherParser.DELETE:
            case CypherParser.REMOVE:
            case CypherParser.FOREACH:
            case CypherParser.IN:
            case CypherParser.DISTINCT:
            case CypherParser.RETURN:
            case CypherParser.ORDER:
            case CypherParser.BY:
            case CypherParser.L_SKIP:
            case CypherParser.LIMIT:
            case CypherParser.ASCENDING:
            case CypherParser.ASC:
            case CypherParser.DESCENDING:
            case CypherParser.DESC:
            case CypherParser.JOIN:
            case CypherParser.SCAN:
            case CypherParser.START:
            case CypherParser.NODE:
            case CypherParser.RELATIONSHIP:
            case CypherParser.REL:
            case CypherParser.WHERE:
            case CypherParser.SHORTESTPATH:
            case CypherParser.ALLSHORTESTPATHS:
            case CypherParser.OR:
            case CypherParser.XOR:
            case CypherParser.AND:
            case CypherParser.NOT:
            case CypherParser.STARTS:
            case CypherParser.ENDS:
            case CypherParser.CONTAINS:
            case CypherParser.NULL:
            case CypherParser.COUNT:
            case CypherParser.FILTER:
            case CypherParser.EXTRACT:
            case CypherParser.ANY:
            case CypherParser.NONE:
            case CypherParser.SINGLE:
            case CypherParser.TRUE:
            case CypherParser.FALSE:
            case CypherParser.REDUCE:
            case CypherParser.CASE:
            case CypherParser.ELSE:
            case CypherParser.END:
            case CypherParser.WHEN:
            case CypherParser.THEN:
            case CypherParser.CALL:
            case CypherParser.YIELD:
            case CypherParser.KEY:
            case CypherParser.HexLetter:
            case CypherParser.UnescapedSymbolicName:
            case CypherParser.EscapedSymbolicName:
                this.state = 553;
                this.string();
                break;
            case CypherParser.HexInteger:
            case CypherParser.DecimalInteger:
            case CypherParser.OctalInteger:
                this.state = 554;
                this.urlDigits();
                break;
            case CypherParser.UrlHex:
                this.state = 555;
                this.match(CypherParser.UrlHex);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitString(this);
	}
};




CypherParser.StringContext = StringContext;

CypherParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.symbolicName();
        this.state = 567;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.T__6 || _la===CypherParser.T__12) {
                    this.state = 561;
                    _la = this._input.LA(1);
                    if(!(_la===CypherParser.T__6 || _la===CypherParser.T__12)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 564;
                this.symbolicName(); 
            }
            this.state = 569;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlDigitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlDigits;
    return this;
}

UrlDigitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlDigitsContext.prototype.constructor = UrlDigitsContext;

UrlDigitsContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

UrlDigitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrlDigits(this);
	}
};

UrlDigitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrlDigits(this);
	}
};




CypherParser.UrlDigitsContext = UrlDigitsContext;

CypherParser.prototype.urlDigits = function() {

    var localctx = new UrlDigitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_urlDigits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 570;
            this.integerLiteral();
            this.state = 573; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CypherParser.HexInteger - 135)) | (1 << (CypherParser.DecimalInteger - 135)) | (1 << (CypherParser.OctalInteger - 135)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JsonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_json;
    return this;
}

JsonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonContext.prototype.constructor = JsonContext;

JsonContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

JsonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterJson(this);
	}
};

JsonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitJson(this);
	}
};




CypherParser.JsonContext = JsonContext;

CypherParser.prototype.json = function() {

    var localctx = new JsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_json);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_obj;
    return this;
}

ObjContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjContext.prototype.constructor = ObjContext;

ObjContext.prototype.pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PairContext);
    } else {
        return this.getTypedRuleContext(PairContext,i);
    }
};

ObjContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ObjContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterObj(this);
	}
};

ObjContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitObj(this);
	}
};




CypherParser.ObjContext = ObjContext;

CypherParser.prototype.obj = function() {

    var localctx = new ObjContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_obj);
    var _la = 0; // Token type
    try {
        this.state = 605;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 577;
            this.match(CypherParser.T__13);
            this.state = 579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 578;
                this.match(CypherParser.SP);
            }

            this.state = 581;
            this.pair();
            this.state = 583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 582;
                this.match(CypherParser.SP);
            }

            this.state = 595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 585;
                this.match(CypherParser.T__14);
                this.state = 587;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 586;
                    this.match(CypherParser.SP);
                }

                this.state = 589;
                this.pair();
                this.state = 591;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 590;
                    this.match(CypherParser.SP);
                }

                this.state = 597;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 598;
            this.match(CypherParser.T__15);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 600;
            this.match(CypherParser.T__13);
            this.state = 602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 601;
                this.match(CypherParser.SP);
            }

            this.state = 604;
            this.match(CypherParser.T__15);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pair;
    return this;
}

PairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairContext.prototype.constructor = PairContext;

PairContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

PairContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

PairContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PairContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPair(this);
	}
};

PairContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPair(this);
	}
};




CypherParser.PairContext = PairContext;

CypherParser.prototype.pair = function() {

    var localctx = new PairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_pair);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.stringLiteral();
        this.state = 609;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 608;
            this.match(CypherParser.SP);
        }

        this.state = 611;
        this.match(CypherParser.T__1);
        this.state = 613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 612;
            this.match(CypherParser.SP);
        }

        this.state = 615;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

ArrayContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitArray(this);
	}
};




CypherParser.ArrayContext = ArrayContext;

CypherParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.state = 645;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 617;
            this.match(CypherParser.T__16);
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 618;
                this.match(CypherParser.SP);
            }

            this.state = 621;
            this.value();
            this.state = 623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 622;
                this.match(CypherParser.SP);
            }

            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 625;
                this.match(CypherParser.T__14);
                this.state = 627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 626;
                    this.match(CypherParser.SP);
                }

                this.state = 629;
                this.value();
                this.state = 631;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 630;
                    this.match(CypherParser.SP);
                }

                this.state = 637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 638;
            this.match(CypherParser.T__17);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 640;
            this.match(CypherParser.T__16);
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 641;
                this.match(CypherParser.SP);
            }

            this.state = 644;
            this.match(CypherParser.T__17);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ValueContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

ValueContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

ValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

ValueContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ValueContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitValue(this);
	}
};




CypherParser.ValueContext = ValueContext;

CypherParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_value);
    try {
        this.state = 653;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 647;
            this.stringLiteral();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this.numberLiteral();
            break;
        case CypherParser.T__13:
            this.enterOuterAlt(localctx, 3);
            this.state = 649;
            this.obj();
            break;
        case CypherParser.T__16:
            this.enterOuterAlt(localctx, 4);
            this.state = 650;
            this.array();
            break;
        case CypherParser.TRUE:
        case CypherParser.FALSE:
            this.enterOuterAlt(localctx, 5);
            this.state = 651;
            this.booleanLiteral();
            break;
        case CypherParser.NULL:
            this.enterOuterAlt(localctx, 6);
            this.state = 652;
            this.match(CypherParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyValueLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyValueLiteral;
    return this;
}

KeyValueLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValueLiteralContext.prototype.constructor = KeyValueLiteralContext;

KeyValueLiteralContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

KeyValueLiteralContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

KeyValueLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

KeyValueLiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

KeyValueLiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

KeyValueLiteralContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

KeyValueLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterKeyValueLiteral(this);
	}
};

KeyValueLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitKeyValueLiteral(this);
	}
};




CypherParser.KeyValueLiteralContext = KeyValueLiteralContext;

CypherParser.prototype.keyValueLiteral = function() {

    var localctx = new KeyValueLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_keyValueLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.variable();
        this.state = 656;
        this.match(CypherParser.T__1);
        this.state = 657;
        this.match(CypherParser.SP);
        this.state = 662;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.state = 658;
            this.match(CypherParser.StringLiteral);
            break;

        case 2:
            this.state = 659;
            this.numberLiteral();
            break;

        case 3:
            this.state = 660;
            this.booleanLiteral();
            break;

        case 4:
            this.state = 661;
            this.symbolicName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommandPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_commandPath;
    return this;
}

CommandPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommandPathContext.prototype.constructor = CommandPathContext;

CommandPathContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

CommandPathContext.prototype.numberLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberLiteralContext);
    } else {
        return this.getTypedRuleContext(NumberLiteralContext,i);
    }
};

CommandPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCommandPath(this);
	}
};

CommandPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCommandPath(this);
	}
};




CypherParser.CommandPathContext = CommandPathContext;

CypherParser.prototype.commandPath = function() {

    var localctx = new CommandPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_commandPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 664;
        		this.match(CypherParser.T__5);
        		this.state = 667;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case CypherParser.CYPHER:
        		case CypherParser.EXPLAIN:
        		case CypherParser.PROFILE:
        		case CypherParser.USING:
        		case CypherParser.PERIODIC:
        		case CypherParser.COMMIT:
        		case CypherParser.UNION:
        		case CypherParser.ALL:
        		case CypherParser.CREATE:
        		case CypherParser.DROP:
        		case CypherParser.INDEX:
        		case CypherParser.ON:
        		case CypherParser.CONSTRAINT:
        		case CypherParser.ASSERT:
        		case CypherParser.IS:
        		case CypherParser.UNIQUE:
        		case CypherParser.EXISTS:
        		case CypherParser.LOAD:
        		case CypherParser.CSV:
        		case CypherParser.WITH:
        		case CypherParser.HEADERS:
        		case CypherParser.FROM:
        		case CypherParser.AS:
        		case CypherParser.FIELDTERMINATOR:
        		case CypherParser.OPTIONAL:
        		case CypherParser.MATCH:
        		case CypherParser.UNWIND:
        		case CypherParser.MERGE:
        		case CypherParser.SET:
        		case CypherParser.DETACH:
        		case CypherParser.DELETE:
        		case CypherParser.REMOVE:
        		case CypherParser.FOREACH:
        		case CypherParser.IN:
        		case CypherParser.DISTINCT:
        		case CypherParser.RETURN:
        		case CypherParser.ORDER:
        		case CypherParser.BY:
        		case CypherParser.L_SKIP:
        		case CypherParser.LIMIT:
        		case CypherParser.ASCENDING:
        		case CypherParser.ASC:
        		case CypherParser.DESCENDING:
        		case CypherParser.DESC:
        		case CypherParser.JOIN:
        		case CypherParser.SCAN:
        		case CypherParser.START:
        		case CypherParser.NODE:
        		case CypherParser.RELATIONSHIP:
        		case CypherParser.REL:
        		case CypherParser.WHERE:
        		case CypherParser.SHORTESTPATH:
        		case CypherParser.ALLSHORTESTPATHS:
        		case CypherParser.OR:
        		case CypherParser.XOR:
        		case CypherParser.AND:
        		case CypherParser.NOT:
        		case CypherParser.STARTS:
        		case CypherParser.ENDS:
        		case CypherParser.CONTAINS:
        		case CypherParser.NULL:
        		case CypherParser.COUNT:
        		case CypherParser.FILTER:
        		case CypherParser.EXTRACT:
        		case CypherParser.ANY:
        		case CypherParser.NONE:
        		case CypherParser.SINGLE:
        		case CypherParser.TRUE:
        		case CypherParser.FALSE:
        		case CypherParser.REDUCE:
        		case CypherParser.CASE:
        		case CypherParser.ELSE:
        		case CypherParser.END:
        		case CypherParser.WHEN:
        		case CypherParser.THEN:
        		case CypherParser.CALL:
        		case CypherParser.YIELD:
        		case CypherParser.KEY:
        		case CypherParser.HexLetter:
        		case CypherParser.UnescapedSymbolicName:
        		case CypherParser.EscapedSymbolicName:
        		    this.state = 665;
        		    this.symbolicName();
        		    break;
        		case CypherParser.HexInteger:
        		case CypherParser.DecimalInteger:
        		case CypherParser.OctalInteger:
        		case CypherParser.ExponentDecimalReal:
        		case CypherParser.RegularDecimalReal:
        		    this.state = 666;
        		    this.numberLiteral();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 671; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,45, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 674;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 673;
            this.match(CypherParser.T__5);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_subCommand;
    return this;
}

SubCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubCommandContext.prototype.constructor = SubCommandContext;

SubCommandContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

SubCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSubCommand(this);
	}
};

SubCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSubCommand(this);
	}
};




CypherParser.SubCommandContext = SubCommandContext;

CypherParser.prototype.subCommand = function() {

    var localctx = new SubCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_subCommand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.symbolicName();
        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2) {
            this.state = 677;
            this.match(CypherParser.T__2);
            this.state = 678;
            this.symbolicName();
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherQuery;
    return this;
}

CypherQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherQueryContext.prototype.constructor = CypherQueryContext;

CypherQueryContext.prototype.queryOptions = function() {
    return this.getTypedRuleContext(QueryOptionsContext,0);
};

CypherQueryContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

CypherQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherQuery(this);
	}
};

CypherQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherQuery(this);
	}
};




CypherParser.CypherQueryContext = CypherQueryContext;

CypherParser.prototype.cypherQuery = function() {

    var localctx = new CypherQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_cypherQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.queryOptions();
        this.state = 685;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_queryOptions;
    return this;
}

QueryOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOptionsContext.prototype.constructor = QueryOptionsContext;

QueryOptionsContext.prototype.anyCypherOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyCypherOptionContext);
    } else {
        return this.getTypedRuleContext(AnyCypherOptionContext,i);
    }
};

QueryOptionsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


QueryOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterQueryOptions(this);
	}
};

QueryOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitQueryOptions(this);
	}
};




CypherParser.QueryOptionsContext = QueryOptionsContext;

CypherParser.prototype.queryOptions = function() {

    var localctx = new QueryOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_queryOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)))) !== 0)) {
            this.state = 687;
            this.anyCypherOption();
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 688;
                this.match(CypherParser.SP);
            }

            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyCypherOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyCypherOption;
    return this;
}

AnyCypherOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyCypherOptionContext.prototype.constructor = AnyCypherOptionContext;

AnyCypherOptionContext.prototype.cypherOption = function() {
    return this.getTypedRuleContext(CypherOptionContext,0);
};

AnyCypherOptionContext.prototype.explain = function() {
    return this.getTypedRuleContext(ExplainContext,0);
};

AnyCypherOptionContext.prototype.profile = function() {
    return this.getTypedRuleContext(ProfileContext,0);
};

AnyCypherOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyCypherOption(this);
	}
};

AnyCypherOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyCypherOption(this);
	}
};




CypherParser.AnyCypherOptionContext = AnyCypherOptionContext;

CypherParser.prototype.anyCypherOption = function() {

    var localctx = new AnyCypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_anyCypherOption);
    try {
        this.state = 699;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
            this.enterOuterAlt(localctx, 1);
            this.state = 696;
            this.cypherOption();
            break;
        case CypherParser.EXPLAIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 697;
            this.explain();
            break;
        case CypherParser.PROFILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 698;
            this.profile();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherOption;
    return this;
}

CypherOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherOptionContext.prototype.constructor = CypherOptionContext;

CypherOptionContext.prototype.CYPHER = function() {
    return this.getToken(CypherParser.CYPHER, 0);
};

CypherOptionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherOptionContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

CypherOptionContext.prototype.configurationOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConfigurationOptionContext);
    } else {
        return this.getTypedRuleContext(ConfigurationOptionContext,i);
    }
};

CypherOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherOption(this);
	}
};

CypherOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherOption(this);
	}
};




CypherParser.CypherOptionContext = CypherOptionContext;

CypherParser.prototype.cypherOption = function() {

    var localctx = new CypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_cypherOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this.match(CypherParser.CYPHER);
        this.state = 704;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1) {
            this.state = 702;
            this.match(CypherParser.SP);
            this.state = 703;
            this.versionNumber();

        }
        this.state = 710;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 706;
                this.match(CypherParser.SP);
                this.state = 707;
                this.configurationOption(); 
            }
            this.state = 712;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_versionNumber;
    return this;
}

VersionNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionNumberContext.prototype.constructor = VersionNumberContext;

VersionNumberContext.prototype.RegularDecimalReal = function() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
};

VersionNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVersionNumber(this);
	}
};

VersionNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVersionNumber(this);
	}
};




CypherParser.VersionNumberContext = VersionNumberContext;

CypherParser.prototype.versionNumber = function() {

    var localctx = new VersionNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_versionNumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(CypherParser.RegularDecimalReal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_explain;
    return this;
}

ExplainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(CypherParser.EXPLAIN, 0);
};

ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExplain(this);
	}
};




CypherParser.ExplainContext = ExplainContext;

CypherParser.prototype.explain = function() {

    var localctx = new ExplainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_explain);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.match(CypherParser.EXPLAIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProfileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_profile;
    return this;
}

ProfileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProfileContext.prototype.constructor = ProfileContext;

ProfileContext.prototype.PROFILE = function() {
    return this.getToken(CypherParser.PROFILE, 0);
};

ProfileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProfile(this);
	}
};

ProfileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProfile(this);
	}
};




CypherParser.ProfileContext = ProfileContext;

CypherParser.prototype.profile = function() {

    var localctx = new ProfileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_profile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.match(CypherParser.PROFILE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConfigurationOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_configurationOption;
    return this;
}

ConfigurationOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConfigurationOptionContext.prototype.constructor = ConfigurationOptionContext;

ConfigurationOptionContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

ConfigurationOptionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ConfigurationOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterConfigurationOption(this);
	}
};

ConfigurationOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitConfigurationOption(this);
	}
};




CypherParser.ConfigurationOptionContext = ConfigurationOptionContext;

CypherParser.prototype.configurationOption = function() {

    var localctx = new ConfigurationOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_configurationOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.symbolicName();
        this.state = 721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 720;
            this.match(CypherParser.SP);
        }

        this.state = 723;
        this.match(CypherParser.T__11);
        this.state = 725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 724;
            this.match(CypherParser.SP);
        }

        this.state = 727;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.command = function() {
    return this.getTypedRuleContext(CommandContext,0);
};

StatementContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStatement(this);
	}
};




CypherParser.StatementContext = StatementContext;

CypherParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_statement);
    try {
        this.state = 731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 729;
            this.command();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 730;
            this.query();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.regularQuery = function() {
    return this.getTypedRuleContext(RegularQueryContext,0);
};

QueryContext.prototype.bulkImportQuery = function() {
    return this.getTypedRuleContext(BulkImportQueryContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitQuery(this);
	}
};




CypherParser.QueryContext = QueryContext;

CypherParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_query);
    try {
        this.state = 735;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CREATE:
        case CypherParser.LOAD:
        case CypherParser.WITH:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.RETURN:
        case CypherParser.START:
        case CypherParser.CALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 733;
            this.regularQuery();
            break;
        case CypherParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.bulkImportQuery();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RegularQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularQuery;
    return this;
}

RegularQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegularQueryContext.prototype.constructor = RegularQueryContext;

RegularQueryContext.prototype.singleQuery = function() {
    return this.getTypedRuleContext(SingleQueryContext,0);
};

RegularQueryContext.prototype.union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionContext);
    } else {
        return this.getTypedRuleContext(UnionContext,i);
    }
};

RegularQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RegularQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRegularQuery(this);
	}
};

RegularQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRegularQuery(this);
	}
};




CypherParser.RegularQueryContext = RegularQueryContext;

CypherParser.prototype.regularQuery = function() {

    var localctx = new RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_regularQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this.singleQuery();
        this.state = 744;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 738;
                    this.match(CypherParser.SP);
                }

                this.state = 741;
                this.union(); 
            }
            this.state = 746;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BulkImportQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_bulkImportQuery;
    return this;
}

BulkImportQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BulkImportQueryContext.prototype.constructor = BulkImportQueryContext;

BulkImportQueryContext.prototype.periodicCommitHint = function() {
    return this.getTypedRuleContext(PeriodicCommitHintContext,0);
};

BulkImportQueryContext.prototype.loadCSVQuery = function() {
    return this.getTypedRuleContext(LoadCSVQueryContext,0);
};

BulkImportQueryContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

BulkImportQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterBulkImportQuery(this);
	}
};

BulkImportQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitBulkImportQuery(this);
	}
};




CypherParser.BulkImportQueryContext = BulkImportQueryContext;

CypherParser.prototype.bulkImportQuery = function() {

    var localctx = new BulkImportQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_bulkImportQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.periodicCommitHint();
        this.state = 749;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 748;
            this.match(CypherParser.SP);
        }

        this.state = 751;
        this.loadCSVQuery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleQuery;
    return this;
}

SingleQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleQueryContext.prototype.constructor = SingleQueryContext;

SingleQueryContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

SingleQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SingleQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleQuery(this);
	}
};

SingleQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleQuery(this);
	}
};




CypherParser.SingleQueryContext = SingleQueryContext;

CypherParser.prototype.singleQuery = function() {

    var localctx = new SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_singleQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this.clause();
        this.state = 760;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 754;
                    this.match(CypherParser.SP);
                }

                this.state = 757;
                this.clause(); 
            }
            this.state = 762;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PeriodicCommitHintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_periodicCommitHint;
    return this;
}

PeriodicCommitHintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PeriodicCommitHintContext.prototype.constructor = PeriodicCommitHintContext;

PeriodicCommitHintContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

PeriodicCommitHintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PeriodicCommitHintContext.prototype.PERIODIC = function() {
    return this.getToken(CypherParser.PERIODIC, 0);
};

PeriodicCommitHintContext.prototype.COMMIT = function() {
    return this.getToken(CypherParser.COMMIT, 0);
};

PeriodicCommitHintContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

PeriodicCommitHintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPeriodicCommitHint(this);
	}
};

PeriodicCommitHintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPeriodicCommitHint(this);
	}
};




CypherParser.PeriodicCommitHintContext = PeriodicCommitHintContext;

CypherParser.prototype.periodicCommitHint = function() {

    var localctx = new PeriodicCommitHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_periodicCommitHint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this.match(CypherParser.USING);
        this.state = 764;
        this.match(CypherParser.SP);
        this.state = 765;
        this.match(CypherParser.PERIODIC);
        this.state = 766;
        this.match(CypherParser.SP);
        this.state = 767;
        this.match(CypherParser.COMMIT);
        this.state = 770;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 768;
            this.match(CypherParser.SP);
            this.state = 769;
            this.integerLiteral();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadCSVQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVQuery;
    return this;
}

LoadCSVQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadCSVQueryContext.prototype.constructor = LoadCSVQueryContext;

LoadCSVQueryContext.prototype.loadCSVClause = function() {
    return this.getTypedRuleContext(LoadCSVClauseContext,0);
};

LoadCSVQueryContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

LoadCSVQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LoadCSVQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLoadCSVQuery(this);
	}
};

LoadCSVQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLoadCSVQuery(this);
	}
};




CypherParser.LoadCSVQueryContext = LoadCSVQueryContext;

CypherParser.prototype.loadCSVQuery = function() {

    var localctx = new LoadCSVQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_loadCSVQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.loadCSVClause();
        this.state = 779;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 774;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 773;
                    this.match(CypherParser.SP);
                }

                this.state = 776;
                this.clause(); 
            }
            this.state = 781;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_union;
    return this;
}

UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionContext.prototype.constructor = UnionContext;

UnionContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

UnionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnionContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

UnionContext.prototype.singleQuery = function() {
    return this.getTypedRuleContext(SingleQueryContext,0);
};

UnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnion(this);
	}
};

UnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnion(this);
	}
};




CypherParser.UnionContext = UnionContext;

CypherParser.prototype.union = function() {

    var localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_union);
    var _la = 0; // Token type
    try {
        this.state = 794;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 782;
            this.match(CypherParser.UNION);
            this.state = 783;
            this.match(CypherParser.SP);
            this.state = 784;
            this.match(CypherParser.ALL);
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 785;
                this.match(CypherParser.SP);
            }

            this.state = 788;
            this.singleQuery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 789;
            this.match(CypherParser.UNION);
            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 790;
                this.match(CypherParser.SP);
            }

            this.state = 793;
            this.singleQuery();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_clause;
    return this;
}

ClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseContext.prototype.constructor = ClauseContext;

ClauseContext.prototype.loadCSVClause = function() {
    return this.getTypedRuleContext(LoadCSVClauseContext,0);
};

ClauseContext.prototype.startClause = function() {
    return this.getTypedRuleContext(StartClauseContext,0);
};

ClauseContext.prototype.matchClause = function() {
    return this.getTypedRuleContext(MatchClauseContext,0);
};

ClauseContext.prototype.unwindClause = function() {
    return this.getTypedRuleContext(UnwindClauseContext,0);
};

ClauseContext.prototype.mergeClause = function() {
    return this.getTypedRuleContext(MergeClauseContext,0);
};

ClauseContext.prototype.createClause = function() {
    return this.getTypedRuleContext(CreateClauseContext,0);
};

ClauseContext.prototype.createUniqueClause = function() {
    return this.getTypedRuleContext(CreateUniqueClauseContext,0);
};

ClauseContext.prototype.setClause = function() {
    return this.getTypedRuleContext(SetClauseContext,0);
};

ClauseContext.prototype.deleteClause = function() {
    return this.getTypedRuleContext(DeleteClauseContext,0);
};

ClauseContext.prototype.removeClause = function() {
    return this.getTypedRuleContext(RemoveClauseContext,0);
};

ClauseContext.prototype.foreachClause = function() {
    return this.getTypedRuleContext(ForeachClauseContext,0);
};

ClauseContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

ClauseContext.prototype.returnClause = function() {
    return this.getTypedRuleContext(ReturnClauseContext,0);
};

ClauseContext.prototype.call = function() {
    return this.getTypedRuleContext(CallContext,0);
};

ClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterClause(this);
	}
};

ClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitClause(this);
	}
};




CypherParser.ClauseContext = ClauseContext;

CypherParser.prototype.clause = function() {

    var localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_clause);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 796;
            this.loadCSVClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 797;
            this.startClause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 798;
            this.matchClause();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 799;
            this.unwindClause();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 800;
            this.mergeClause();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 801;
            this.createClause();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 802;
            this.createUniqueClause();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 803;
            this.setClause();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 804;
            this.deleteClause();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 805;
            this.removeClause();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 806;
            this.foreachClause();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 807;
            this.withClause();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 808;
            this.returnClause();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 809;
            this.call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_command;
    return this;
}

CommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommandContext.prototype.constructor = CommandContext;

CommandContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

CommandContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

CommandContext.prototype.createUniqueConstraint = function() {
    return this.getTypedRuleContext(CreateUniqueConstraintContext,0);
};

CommandContext.prototype.dropUniqueConstraint = function() {
    return this.getTypedRuleContext(DropUniqueConstraintContext,0);
};

CommandContext.prototype.createNodeKeyConstraint = function() {
    return this.getTypedRuleContext(CreateNodeKeyConstraintContext,0);
};

CommandContext.prototype.dropNodeKeyConstraint = function() {
    return this.getTypedRuleContext(DropNodeKeyConstraintContext,0);
};

CommandContext.prototype.createNodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext,0);
};

CommandContext.prototype.dropNodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext,0);
};

CommandContext.prototype.createRelationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext,0);
};

CommandContext.prototype.dropRelationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext,0);
};

CommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCommand(this);
	}
};

CommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCommand(this);
	}
};




CypherParser.CommandContext = CommandContext;

CypherParser.prototype.command = function() {

    var localctx = new CommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_command);
    try {
        this.state = 822;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 812;
            this.createIndex();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.dropIndex();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 814;
            this.createUniqueConstraint();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 815;
            this.dropUniqueConstraint();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 816;
            this.createNodeKeyConstraint();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 817;
            this.dropNodeKeyConstraint();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 818;
            this.createNodePropertyExistenceConstraint();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 819;
            this.dropNodePropertyExistenceConstraint();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 820;
            this.createRelationshipPropertyExistenceConstraint();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 821;
            this.dropRelationshipPropertyExistenceConstraint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueConstraint;
    return this;
}

CreateUniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUniqueConstraintContext.prototype.constructor = CreateUniqueConstraintContext;

CreateUniqueConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateUniqueConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateUniqueConstraintContext.prototype.uniqueConstraint = function() {
    return this.getTypedRuleContext(UniqueConstraintContext,0);
};

CreateUniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateUniqueConstraint(this);
	}
};

CreateUniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateUniqueConstraint(this);
	}
};




CypherParser.CreateUniqueConstraintContext = CreateUniqueConstraintContext;

CypherParser.prototype.createUniqueConstraint = function() {

    var localctx = new CreateUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_createUniqueConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(CypherParser.CREATE);
        this.state = 825;
        this.match(CypherParser.SP);
        this.state = 826;
        this.uniqueConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateNodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodeKeyConstraint;
    return this;
}

CreateNodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateNodeKeyConstraintContext.prototype.constructor = CreateNodeKeyConstraintContext;

CreateNodeKeyConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateNodeKeyConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateNodeKeyConstraintContext.prototype.nodeKeyConstraint = function() {
    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
};

CreateNodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateNodeKeyConstraint(this);
	}
};

CreateNodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateNodeKeyConstraint(this);
	}
};




CypherParser.CreateNodeKeyConstraintContext = CreateNodeKeyConstraintContext;

CypherParser.prototype.createNodeKeyConstraint = function() {

    var localctx = new CreateNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_createNodeKeyConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this.match(CypherParser.CREATE);
        this.state = 829;
        this.match(CypherParser.SP);
        this.state = 830;
        this.nodeKeyConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateNodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodePropertyExistenceConstraint;
    return this;
}

CreateNodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateNodePropertyExistenceConstraintContext.prototype.constructor = CreateNodePropertyExistenceConstraintContext;

CreateNodePropertyExistenceConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateNodePropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
};

CreateNodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateNodePropertyExistenceConstraint(this);
	}
};

CreateNodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateNodePropertyExistenceConstraint(this);
	}
};




CypherParser.CreateNodePropertyExistenceConstraintContext = CreateNodePropertyExistenceConstraintContext;

CypherParser.prototype.createNodePropertyExistenceConstraint = function() {

    var localctx = new CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_createNodePropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(CypherParser.CREATE);
        this.state = 833;
        this.match(CypherParser.SP);
        this.state = 834;
        this.nodePropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateRelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createRelationshipPropertyExistenceConstraint;
    return this;
}

CreateRelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRelationshipPropertyExistenceConstraintContext.prototype.constructor = CreateRelationshipPropertyExistenceConstraintContext;

CreateRelationshipPropertyExistenceConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateRelationshipPropertyExistenceConstraint(this);
	}
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.CreateRelationshipPropertyExistenceConstraintContext = CreateRelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.createRelationshipPropertyExistenceConstraint = function() {

    var localctx = new CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_createRelationshipPropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 836;
        this.match(CypherParser.CREATE);
        this.state = 837;
        this.match(CypherParser.SP);
        this.state = 838;
        this.relationshipPropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createIndex;
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateIndexContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateIndexContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateIndex(this);
	}
};




CypherParser.CreateIndexContext = CreateIndexContext;

CypherParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_createIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.match(CypherParser.CREATE);
        this.state = 841;
        this.match(CypherParser.SP);
        this.state = 842;
        this.index();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropUniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropUniqueConstraint;
    return this;
}

DropUniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUniqueConstraintContext.prototype.constructor = DropUniqueConstraintContext;

DropUniqueConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropUniqueConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropUniqueConstraintContext.prototype.uniqueConstraint = function() {
    return this.getTypedRuleContext(UniqueConstraintContext,0);
};

DropUniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropUniqueConstraint(this);
	}
};

DropUniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropUniqueConstraint(this);
	}
};




CypherParser.DropUniqueConstraintContext = DropUniqueConstraintContext;

CypherParser.prototype.dropUniqueConstraint = function() {

    var localctx = new DropUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_dropUniqueConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.match(CypherParser.DROP);
        this.state = 845;
        this.match(CypherParser.SP);
        this.state = 846;
        this.uniqueConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropNodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodeKeyConstraint;
    return this;
}

DropNodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropNodeKeyConstraintContext.prototype.constructor = DropNodeKeyConstraintContext;

DropNodeKeyConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropNodeKeyConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropNodeKeyConstraintContext.prototype.nodeKeyConstraint = function() {
    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
};

DropNodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropNodeKeyConstraint(this);
	}
};

DropNodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropNodeKeyConstraint(this);
	}
};




CypherParser.DropNodeKeyConstraintContext = DropNodeKeyConstraintContext;

CypherParser.prototype.dropNodeKeyConstraint = function() {

    var localctx = new DropNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_dropNodeKeyConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(CypherParser.DROP);
        this.state = 849;
        this.match(CypherParser.SP);
        this.state = 850;
        this.nodeKeyConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropNodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodePropertyExistenceConstraint;
    return this;
}

DropNodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropNodePropertyExistenceConstraintContext.prototype.constructor = DropNodePropertyExistenceConstraintContext;

DropNodePropertyExistenceConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropNodePropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
};

DropNodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropNodePropertyExistenceConstraint(this);
	}
};

DropNodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropNodePropertyExistenceConstraint(this);
	}
};




CypherParser.DropNodePropertyExistenceConstraintContext = DropNodePropertyExistenceConstraintContext;

CypherParser.prototype.dropNodePropertyExistenceConstraint = function() {

    var localctx = new DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_dropNodePropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 852;
        this.match(CypherParser.DROP);
        this.state = 853;
        this.match(CypherParser.SP);
        this.state = 854;
        this.nodePropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropRelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;
    return this;
}

DropRelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRelationshipPropertyExistenceConstraintContext.prototype.constructor = DropRelationshipPropertyExistenceConstraintContext;

DropRelationshipPropertyExistenceConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropRelationshipPropertyExistenceConstraint(this);
	}
};

DropRelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.DropRelationshipPropertyExistenceConstraintContext = DropRelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.dropRelationshipPropertyExistenceConstraint = function() {

    var localctx = new DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this.match(CypherParser.DROP);
        this.state = 857;
        this.match(CypherParser.SP);
        this.state = 858;
        this.relationshipPropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropIndex;
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropIndexContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropIndexContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropIndex(this);
	}
};




CypherParser.DropIndexContext = DropIndexContext;

CypherParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_dropIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.match(CypherParser.DROP);
        this.state = 861;
        this.match(CypherParser.SP);
        this.state = 862;
        this.index();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_index;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

IndexContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


IndexContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

IndexContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

IndexContext.prototype.propertyKeys = function() {
    return this.getTypedRuleContext(PropertyKeysContext,0);
};

IndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIndex(this);
	}
};

IndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIndex(this);
	}
};




CypherParser.IndexContext = IndexContext;

CypherParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 864;
        this.match(CypherParser.INDEX);
        this.state = 865;
        this.match(CypherParser.SP);
        this.state = 866;
        this.match(CypherParser.ON);
        this.state = 868;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 867;
            this.match(CypherParser.SP);
        }

        this.state = 870;
        this.nodeLabel();
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 871;
            this.match(CypherParser.SP);
        }

        this.state = 874;
        this.match(CypherParser.T__18);
        this.state = 876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 875;
            this.match(CypherParser.SP);
        }

        this.state = 878;
        this.propertyKeys();
        this.state = 880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 879;
            this.match(CypherParser.SP);
        }

        this.state = 882;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uniqueConstraint;
    return this;
}

UniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueConstraintContext.prototype.constructor = UniqueConstraintContext;

UniqueConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

UniqueConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UniqueConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

UniqueConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

UniqueConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

UniqueConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

UniqueConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

UniqueConstraintContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

UniqueConstraintContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

UniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUniqueConstraint(this);
	}
};

UniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUniqueConstraint(this);
	}
};




CypherParser.UniqueConstraintContext = UniqueConstraintContext;

CypherParser.prototype.uniqueConstraint = function() {

    var localctx = new UniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_uniqueConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this.match(CypherParser.CONSTRAINT);
        this.state = 885;
        this.match(CypherParser.SP);
        this.state = 886;
        this.match(CypherParser.ON);
        this.state = 888;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 887;
            this.match(CypherParser.SP);
        }

        this.state = 890;
        this.match(CypherParser.T__18);
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 891;
            this.match(CypherParser.SP);
        }

        this.state = 894;
        this.variable();
        this.state = 895;
        this.nodeLabel();
        this.state = 897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 896;
            this.match(CypherParser.SP);
        }

        this.state = 899;
        this.match(CypherParser.T__19);
        this.state = 901;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 900;
            this.match(CypherParser.SP);
        }

        this.state = 903;
        this.match(CypherParser.ASSERT);
        this.state = 904;
        this.match(CypherParser.SP);
        this.state = 905;
        this.propertyExpression();
        this.state = 906;
        this.match(CypherParser.SP);
        this.state = 907;
        this.match(CypherParser.IS);
        this.state = 908;
        this.match(CypherParser.SP);
        this.state = 909;
        this.match(CypherParser.UNIQUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeKeyConstraint;
    return this;
}

NodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeKeyConstraintContext.prototype.constructor = NodeKeyConstraintContext;

NodeKeyConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

NodeKeyConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodeKeyConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

NodeKeyConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodeKeyConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

NodeKeyConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

NodeKeyConstraintContext.prototype.propertyExpressions = function() {
    return this.getTypedRuleContext(PropertyExpressionsContext,0);
};

NodeKeyConstraintContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

NodeKeyConstraintContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

NodeKeyConstraintContext.prototype.KEY = function() {
    return this.getToken(CypherParser.KEY, 0);
};

NodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeKeyConstraint(this);
	}
};

NodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeKeyConstraint(this);
	}
};




CypherParser.NodeKeyConstraintContext = NodeKeyConstraintContext;

CypherParser.prototype.nodeKeyConstraint = function() {

    var localctx = new NodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_nodeKeyConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.match(CypherParser.CONSTRAINT);
        this.state = 912;
        this.match(CypherParser.SP);
        this.state = 913;
        this.match(CypherParser.ON);
        this.state = 915;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 914;
            this.match(CypherParser.SP);
        }

        this.state = 917;
        this.match(CypherParser.T__18);
        this.state = 919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 918;
            this.match(CypherParser.SP);
        }

        this.state = 921;
        this.variable();
        this.state = 922;
        this.nodeLabel();
        this.state = 924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 923;
            this.match(CypherParser.SP);
        }

        this.state = 926;
        this.match(CypherParser.T__19);
        this.state = 928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 927;
            this.match(CypherParser.SP);
        }

        this.state = 930;
        this.match(CypherParser.ASSERT);
        this.state = 931;
        this.match(CypherParser.SP);
        this.state = 932;
        this.match(CypherParser.T__18);
        this.state = 934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 933;
            this.match(CypherParser.SP);
        }

        this.state = 936;
        this.propertyExpressions();
        this.state = 938;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 937;
            this.match(CypherParser.SP);
        }

        this.state = 940;
        this.match(CypherParser.T__19);
        this.state = 941;
        this.match(CypherParser.SP);
        this.state = 942;
        this.match(CypherParser.IS);
        this.state = 943;
        this.match(CypherParser.SP);
        this.state = 944;
        this.match(CypherParser.NODE);
        this.state = 945;
        this.match(CypherParser.SP);
        this.state = 946;
        this.match(CypherParser.KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePropertyExistenceConstraint;
    return this;
}

NodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodePropertyExistenceConstraintContext.prototype.constructor = NodePropertyExistenceConstraintContext;

NodePropertyExistenceConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

NodePropertyExistenceConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodePropertyExistenceConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

NodePropertyExistenceConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodePropertyExistenceConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

NodePropertyExistenceConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

NodePropertyExistenceConstraintContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

NodePropertyExistenceConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

NodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodePropertyExistenceConstraint(this);
	}
};

NodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodePropertyExistenceConstraint(this);
	}
};




CypherParser.NodePropertyExistenceConstraintContext = NodePropertyExistenceConstraintContext;

CypherParser.prototype.nodePropertyExistenceConstraint = function() {

    var localctx = new NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_nodePropertyExistenceConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        this.match(CypherParser.CONSTRAINT);
        this.state = 949;
        this.match(CypherParser.SP);
        this.state = 950;
        this.match(CypherParser.ON);
        this.state = 952;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 951;
            this.match(CypherParser.SP);
        }

        this.state = 954;
        this.match(CypherParser.T__18);
        this.state = 955;
        this.variable();
        this.state = 956;
        this.nodeLabel();
        this.state = 957;
        this.match(CypherParser.T__19);
        this.state = 959;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 958;
            this.match(CypherParser.SP);
        }

        this.state = 961;
        this.match(CypherParser.ASSERT);
        this.state = 962;
        this.match(CypherParser.SP);
        this.state = 963;
        this.match(CypherParser.EXISTS);
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 964;
            this.match(CypherParser.SP);
        }

        this.state = 967;
        this.match(CypherParser.T__18);
        this.state = 968;
        this.propertyExpression();
        this.state = 969;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPropertyExistenceConstraint;
    return this;
}

RelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPropertyExistenceConstraintContext.prototype.constructor = RelationshipPropertyExistenceConstraintContext;

RelationshipPropertyExistenceConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPropertyExistenceConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.relationshipPatternSyntax = function() {
    return this.getTypedRuleContext(RelationshipPatternSyntaxContext,0);
};

RelationshipPropertyExistenceConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

RelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPropertyExistenceConstraint(this);
	}
};

RelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.RelationshipPropertyExistenceConstraintContext = RelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.relationshipPropertyExistenceConstraint = function() {

    var localctx = new RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_relationshipPropertyExistenceConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        this.match(CypherParser.CONSTRAINT);
        this.state = 972;
        this.match(CypherParser.SP);
        this.state = 973;
        this.match(CypherParser.ON);
        this.state = 975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 974;
            this.match(CypherParser.SP);
        }

        this.state = 977;
        this.relationshipPatternSyntax();
        this.state = 979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 978;
            this.match(CypherParser.SP);
        }

        this.state = 981;
        this.match(CypherParser.ASSERT);
        this.state = 982;
        this.match(CypherParser.SP);
        this.state = 983;
        this.match(CypherParser.EXISTS);
        this.state = 985;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 984;
            this.match(CypherParser.SP);
        }

        this.state = 987;
        this.match(CypherParser.T__18);
        this.state = 988;
        this.propertyExpression();
        this.state = 989;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternSyntaxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternSyntax;
    return this;
}

RelationshipPatternSyntaxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternSyntaxContext.prototype.constructor = RelationshipPatternSyntaxContext;

RelationshipPatternSyntaxContext.prototype.dash = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DashContext);
    } else {
        return this.getTypedRuleContext(DashContext,i);
    }
};

RelationshipPatternSyntaxContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RelationshipPatternSyntaxContext.prototype.relType = function() {
    return this.getTypedRuleContext(RelTypeContext,0);
};

RelationshipPatternSyntaxContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPatternSyntaxContext.prototype.rightArrowHead = function() {
    return this.getTypedRuleContext(RightArrowHeadContext,0);
};

RelationshipPatternSyntaxContext.prototype.leftArrowHead = function() {
    return this.getTypedRuleContext(LeftArrowHeadContext,0);
};

RelationshipPatternSyntaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternSyntax(this);
	}
};

RelationshipPatternSyntaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternSyntax(this);
	}
};




CypherParser.RelationshipPatternSyntaxContext = RelationshipPatternSyntaxContext;

CypherParser.prototype.relationshipPatternSyntax = function() {

    var localctx = new RelationshipPatternSyntaxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_relationshipPatternSyntax);
    var _la = 0; // Token type
    try {
        this.state = 1044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 991;
            this.match(CypherParser.T__18);
            this.state = 993;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 992;
                this.match(CypherParser.SP);
            }

            this.state = 995;
            this.match(CypherParser.T__19);
            this.state = 996;
            this.dash();
            this.state = 997;
            this.match(CypherParser.T__16);
            this.state = 998;
            this.variable();
            this.state = 999;
            this.relType();
            this.state = 1000;
            this.match(CypherParser.T__17);
            this.state = 1001;
            this.dash();
            this.state = 1002;
            this.match(CypherParser.T__18);
            this.state = 1004;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1003;
                this.match(CypherParser.SP);
            }

            this.state = 1006;
            this.match(CypherParser.T__19);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1008;
            this.match(CypherParser.T__18);
            this.state = 1010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1009;
                this.match(CypherParser.SP);
            }

            this.state = 1012;
            this.match(CypherParser.T__19);
            this.state = 1013;
            this.dash();
            this.state = 1014;
            this.match(CypherParser.T__16);
            this.state = 1015;
            this.variable();
            this.state = 1016;
            this.relType();
            this.state = 1017;
            this.match(CypherParser.T__17);
            this.state = 1018;
            this.dash();
            this.state = 1019;
            this.rightArrowHead();
            this.state = 1020;
            this.match(CypherParser.T__18);
            this.state = 1022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1021;
                this.match(CypherParser.SP);
            }

            this.state = 1024;
            this.match(CypherParser.T__19);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1026;
            this.match(CypherParser.T__18);
            this.state = 1028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1027;
                this.match(CypherParser.SP);
            }

            this.state = 1030;
            this.match(CypherParser.T__19);
            this.state = 1031;
            this.leftArrowHead();
            this.state = 1032;
            this.dash();
            this.state = 1033;
            this.match(CypherParser.T__16);
            this.state = 1034;
            this.variable();
            this.state = 1035;
            this.relType();
            this.state = 1036;
            this.match(CypherParser.T__17);
            this.state = 1037;
            this.dash();
            this.state = 1038;
            this.match(CypherParser.T__18);
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1039;
                this.match(CypherParser.SP);
            }

            this.state = 1042;
            this.match(CypherParser.T__19);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadCSVClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVClause;
    return this;
}

LoadCSVClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadCSVClauseContext.prototype.constructor = LoadCSVClauseContext;

LoadCSVClauseContext.prototype.LOAD = function() {
    return this.getToken(CypherParser.LOAD, 0);
};

LoadCSVClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LoadCSVClauseContext.prototype.CSV = function() {
    return this.getToken(CypherParser.CSV, 0);
};

LoadCSVClauseContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

LoadCSVClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LoadCSVClauseContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

LoadCSVClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

LoadCSVClauseContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

LoadCSVClauseContext.prototype.HEADERS = function() {
    return this.getToken(CypherParser.HEADERS, 0);
};

LoadCSVClauseContext.prototype.FIELDTERMINATOR = function() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
};

LoadCSVClauseContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

LoadCSVClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLoadCSVClause(this);
	}
};

LoadCSVClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLoadCSVClause(this);
	}
};




CypherParser.LoadCSVClauseContext = LoadCSVClauseContext;

CypherParser.prototype.loadCSVClause = function() {

    var localctx = new LoadCSVClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_loadCSVClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        this.match(CypherParser.LOAD);
        this.state = 1047;
        this.match(CypherParser.SP);
        this.state = 1048;
        this.match(CypherParser.CSV);
        this.state = 1049;
        this.match(CypherParser.SP);
        this.state = 1054;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WITH) {
            this.state = 1050;
            this.match(CypherParser.WITH);
            this.state = 1051;
            this.match(CypherParser.SP);
            this.state = 1052;
            this.match(CypherParser.HEADERS);
            this.state = 1053;
            this.match(CypherParser.SP);
        }

        this.state = 1056;
        this.match(CypherParser.FROM);
        this.state = 1057;
        this.match(CypherParser.SP);
        this.state = 1058;
        this.expression();
        this.state = 1059;
        this.match(CypherParser.SP);
        this.state = 1060;
        this.match(CypherParser.AS);
        this.state = 1061;
        this.match(CypherParser.SP);
        this.state = 1062;
        this.variable();
        this.state = 1063;
        this.match(CypherParser.SP);
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.FIELDTERMINATOR) {
            this.state = 1064;
            this.match(CypherParser.FIELDTERMINATOR);
            this.state = 1065;
            this.match(CypherParser.SP);
            this.state = 1066;
            this.match(CypherParser.StringLiteral);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_matchClause;
    return this;
}

MatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MatchClauseContext.prototype.constructor = MatchClauseContext;

MatchClauseContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

MatchClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

MatchClauseContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

MatchClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MatchClauseContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};

MatchClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

MatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMatchClause(this);
	}
};

MatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMatchClause(this);
	}
};




CypherParser.MatchClauseContext = MatchClauseContext;

CypherParser.prototype.matchClause = function() {

    var localctx = new MatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_matchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1071;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.OPTIONAL) {
            this.state = 1069;
            this.match(CypherParser.OPTIONAL);
            this.state = 1070;
            this.match(CypherParser.SP);
        }

        this.state = 1073;
        this.match(CypherParser.MATCH);
        this.state = 1075;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1074;
            this.match(CypherParser.SP);
        }

        this.state = 1077;
        this.pattern();
        this.state = 1081;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1078;
                this.hint(); 
            }
            this.state = 1083;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

        this.state = 1088;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 1085;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1084;
                this.match(CypherParser.SP);
            }

            this.state = 1087;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnwindClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unwindClause;
    return this;
}

UnwindClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnwindClauseContext.prototype.constructor = UnwindClauseContext;

UnwindClauseContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

UnwindClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnwindClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnwindClauseContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

UnwindClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

UnwindClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnwindClause(this);
	}
};

UnwindClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnwindClause(this);
	}
};




CypherParser.UnwindClauseContext = UnwindClauseContext;

CypherParser.prototype.unwindClause = function() {

    var localctx = new UnwindClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_unwindClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this.match(CypherParser.UNWIND);
        this.state = 1092;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1091;
            this.match(CypherParser.SP);
        }

        this.state = 1094;
        this.expression();
        this.state = 1095;
        this.match(CypherParser.SP);
        this.state = 1096;
        this.match(CypherParser.AS);
        this.state = 1097;
        this.match(CypherParser.SP);
        this.state = 1098;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MergeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeClause;
    return this;
}

MergeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeClauseContext.prototype.constructor = MergeClauseContext;

MergeClauseContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

MergeClauseContext.prototype.patternPart = function() {
    return this.getTypedRuleContext(PatternPartContext,0);
};

MergeClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MergeClauseContext.prototype.mergeAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeActionContext);
    } else {
        return this.getTypedRuleContext(MergeActionContext,i);
    }
};

MergeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMergeClause(this);
	}
};

MergeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMergeClause(this);
	}
};




CypherParser.MergeClauseContext = MergeClauseContext;

CypherParser.prototype.mergeClause = function() {

    var localctx = new MergeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_mergeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this.match(CypherParser.MERGE);
        this.state = 1102;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1101;
            this.match(CypherParser.SP);
        }

        this.state = 1104;
        this.patternPart();
        this.state = 1109;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1105;
                this.match(CypherParser.SP);
                this.state = 1106;
                this.mergeAction(); 
            }
            this.state = 1111;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MergeActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeAction;
    return this;
}

MergeActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeActionContext.prototype.constructor = MergeActionContext;

MergeActionContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

MergeActionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MergeActionContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

MergeActionContext.prototype.setClause = function() {
    return this.getTypedRuleContext(SetClauseContext,0);
};

MergeActionContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

MergeActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMergeAction(this);
	}
};

MergeActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMergeAction(this);
	}
};




CypherParser.MergeActionContext = MergeActionContext;

CypherParser.prototype.mergeAction = function() {

    var localctx = new MergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_mergeAction);
    try {
        this.state = 1122;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1112;
            this.match(CypherParser.ON);
            this.state = 1113;
            this.match(CypherParser.SP);
            this.state = 1114;
            this.match(CypherParser.MATCH);
            this.state = 1115;
            this.match(CypherParser.SP);
            this.state = 1116;
            this.setClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1117;
            this.match(CypherParser.ON);
            this.state = 1118;
            this.match(CypherParser.SP);
            this.state = 1119;
            this.match(CypherParser.CREATE);
            this.state = 1120;
            this.match(CypherParser.SP);
            this.state = 1121;
            this.setClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createClause;
    return this;
}

CreateClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateClauseContext.prototype.constructor = CreateClauseContext;

CreateClauseContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

CreateClauseContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateClause(this);
	}
};

CreateClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateClause(this);
	}
};




CypherParser.CreateClauseContext = CreateClauseContext;

CypherParser.prototype.createClause = function() {

    var localctx = new CreateClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_createClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1124;
        this.match(CypherParser.CREATE);
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1125;
            this.match(CypherParser.SP);
        }

        this.state = 1128;
        this.pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUniqueClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueClause;
    return this;
}

CreateUniqueClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUniqueClauseContext.prototype.constructor = CreateUniqueClauseContext;

CreateUniqueClauseContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateUniqueClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CreateUniqueClauseContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

CreateUniqueClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

CreateUniqueClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateUniqueClause(this);
	}
};

CreateUniqueClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateUniqueClause(this);
	}
};




CypherParser.CreateUniqueClauseContext = CreateUniqueClauseContext;

CypherParser.prototype.createUniqueClause = function() {

    var localctx = new CreateUniqueClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_createUniqueClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1130;
        this.match(CypherParser.CREATE);
        this.state = 1131;
        this.match(CypherParser.SP);
        this.state = 1132;
        this.match(CypherParser.UNIQUE);
        this.state = 1134;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1133;
            this.match(CypherParser.SP);
        }

        this.state = 1136;
        this.pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setClause;
    return this;
}

SetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetClauseContext.prototype.constructor = SetClauseContext;

SetClauseContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

SetClauseContext.prototype.setItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetItemContext);
    } else {
        return this.getTypedRuleContext(SetItemContext,i);
    }
};

SetClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetClause(this);
	}
};

SetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetClause(this);
	}
};




CypherParser.SetClauseContext = SetClauseContext;

CypherParser.prototype.setClause = function() {

    var localctx = new SetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_setClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.match(CypherParser.SET);
        this.state = 1140;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1139;
            this.match(CypherParser.SP);
        }

        this.state = 1142;
        this.setItem();
        this.state = 1153;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1144;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1143;
                    this.match(CypherParser.SP);
                }

                this.state = 1146;
                this.match(CypherParser.T__14);
                this.state = 1148;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1147;
                    this.match(CypherParser.SP);
                }

                this.state = 1150;
                this.setItem(); 
            }
            this.state = 1155;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setItem;
    return this;
}

SetItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetItemContext.prototype.constructor = SetItemContext;

SetItemContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

SetItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SetItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

SetItemContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

SetItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetItem(this);
	}
};

SetItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetItem(this);
	}
};




CypherParser.SetItemContext = SetItemContext;

CypherParser.prototype.setItem = function() {

    var localctx = new SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_setItem);
    var _la = 0; // Token type
    try {
        this.state = 1192;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1156;
            this.propertyExpression();
            this.state = 1158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1157;
                this.match(CypherParser.SP);
            }

            this.state = 1160;
            this.match(CypherParser.T__11);
            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1161;
                this.match(CypherParser.SP);
            }

            this.state = 1164;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1166;
            this.variable();
            this.state = 1168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1167;
                this.match(CypherParser.SP);
            }

            this.state = 1170;
            this.match(CypherParser.T__11);
            this.state = 1172;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1171;
                this.match(CypherParser.SP);
            }

            this.state = 1174;
            this.expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1176;
            this.variable();
            this.state = 1178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1177;
                this.match(CypherParser.SP);
            }

            this.state = 1180;
            this.match(CypherParser.T__20);
            this.state = 1182;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1181;
                this.match(CypherParser.SP);
            }

            this.state = 1184;
            this.expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1186;
            this.variable();
            this.state = 1188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1187;
                this.match(CypherParser.SP);
            }

            this.state = 1190;
            this.nodeLabels();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_deleteClause;
    return this;
}

DeleteClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteClauseContext.prototype.constructor = DeleteClauseContext;

DeleteClauseContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

DeleteClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

DeleteClauseContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

DeleteClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DeleteClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDeleteClause(this);
	}
};

DeleteClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDeleteClause(this);
	}
};




CypherParser.DeleteClauseContext = DeleteClauseContext;

CypherParser.prototype.deleteClause = function() {

    var localctx = new DeleteClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_deleteClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.DETACH) {
            this.state = 1194;
            this.match(CypherParser.DETACH);
            this.state = 1195;
            this.match(CypherParser.SP);
        }

        this.state = 1198;
        this.match(CypherParser.DELETE);
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1199;
            this.match(CypherParser.SP);
        }

        this.state = 1202;
        this.expression();
        this.state = 1213;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1204;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1203;
                    this.match(CypherParser.SP);
                }

                this.state = 1206;
                this.match(CypherParser.T__14);
                this.state = 1208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1207;
                    this.match(CypherParser.SP);
                }

                this.state = 1210;
                this.expression(); 
            }
            this.state = 1215;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RemoveClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeClause;
    return this;
}

RemoveClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemoveClauseContext.prototype.constructor = RemoveClauseContext;

RemoveClauseContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

RemoveClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RemoveClauseContext.prototype.removeItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RemoveItemContext);
    } else {
        return this.getTypedRuleContext(RemoveItemContext,i);
    }
};

RemoveClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRemoveClause(this);
	}
};

RemoveClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRemoveClause(this);
	}
};




CypherParser.RemoveClauseContext = RemoveClauseContext;

CypherParser.prototype.removeClause = function() {

    var localctx = new RemoveClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_removeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1216;
        this.match(CypherParser.REMOVE);
        this.state = 1217;
        this.match(CypherParser.SP);
        this.state = 1218;
        this.removeItem();
        this.state = 1229;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1220;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1219;
                    this.match(CypherParser.SP);
                }

                this.state = 1222;
                this.match(CypherParser.T__14);
                this.state = 1224;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1223;
                    this.match(CypherParser.SP);
                }

                this.state = 1226;
                this.removeItem(); 
            }
            this.state = 1231;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RemoveItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeItem;
    return this;
}

RemoveItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemoveItemContext.prototype.constructor = RemoveItemContext;

RemoveItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RemoveItemContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

RemoveItemContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

RemoveItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRemoveItem(this);
	}
};

RemoveItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRemoveItem(this);
	}
};




CypherParser.RemoveItemContext = RemoveItemContext;

CypherParser.prototype.removeItem = function() {

    var localctx = new RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_removeItem);
    try {
        this.state = 1236;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1232;
            this.variable();
            this.state = 1233;
            this.nodeLabels();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1235;
            this.propertyExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForeachClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_foreachClause;
    return this;
}

ForeachClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachClauseContext.prototype.constructor = ForeachClauseContext;

ForeachClauseContext.prototype.FOREACH = function() {
    return this.getToken(CypherParser.FOREACH, 0);
};

ForeachClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ForeachClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ForeachClauseContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

ForeachClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachClauseContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

ForeachClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterForeachClause(this);
	}
};

ForeachClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitForeachClause(this);
	}
};




CypherParser.ForeachClauseContext = ForeachClauseContext;

CypherParser.prototype.foreachClause = function() {

    var localctx = new ForeachClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_foreachClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1238;
        this.match(CypherParser.FOREACH);
        this.state = 1240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1239;
            this.match(CypherParser.SP);
        }

        this.state = 1242;
        this.match(CypherParser.T__18);
        this.state = 1244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1243;
            this.match(CypherParser.SP);
        }

        this.state = 1246;
        this.variable();
        this.state = 1247;
        this.match(CypherParser.SP);
        this.state = 1248;
        this.match(CypherParser.IN);
        this.state = 1249;
        this.match(CypherParser.SP);
        this.state = 1250;
        this.expression();
        this.state = 1252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1251;
            this.match(CypherParser.SP);
        }

        this.state = 1254;
        this.match(CypherParser.T__21);
        this.state = 1257; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1255;
        		this.match(CypherParser.SP);
        		this.state = 1256;
        		this.clause();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1259; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,134, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1262;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1261;
            this.match(CypherParser.SP);
        }

        this.state = 1264;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

WithClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


WithClauseContext.prototype.returnBody = function() {
    return this.getTypedRuleContext(ReturnBodyContext,0);
};

WithClauseContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

WithClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitWithClause(this);
	}
};




CypherParser.WithClauseContext = WithClauseContext;

CypherParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_withClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        this.match(CypherParser.WITH);
        this.state = 1271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        if(la_===1) {
            this.state = 1268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1267;
                this.match(CypherParser.SP);
            }

            this.state = 1270;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 1273;
        this.match(CypherParser.SP);
        this.state = 1274;
        this.returnBody();
        this.state = 1279;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        if(la_===1) {
            this.state = 1276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1275;
                this.match(CypherParser.SP);
            }

            this.state = 1278;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnClause;
    return this;
}

ReturnClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnClauseContext.prototype.constructor = ReturnClauseContext;

ReturnClauseContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

ReturnClauseContext.prototype.returnBody = function() {
    return this.getTypedRuleContext(ReturnBodyContext,0);
};

ReturnClauseContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

ReturnClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnClause(this);
	}
};

ReturnClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnClause(this);
	}
};




CypherParser.ReturnClauseContext = ReturnClauseContext;

CypherParser.prototype.returnClause = function() {

    var localctx = new ReturnClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_returnClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1281;
        this.match(CypherParser.RETURN);
        this.state = 1286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1282;
                this.match(CypherParser.SP);
            }

            this.state = 1285;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 1289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1288;
            this.match(CypherParser.SP);
        }

        this.state = 1291;
        this.returnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnBody;
    return this;
}

ReturnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnBodyContext.prototype.constructor = ReturnBodyContext;

ReturnBodyContext.prototype.returnItems = function() {
    return this.getTypedRuleContext(ReturnItemsContext,0);
};

ReturnBodyContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnBodyContext.prototype.order = function() {
    return this.getTypedRuleContext(OrderContext,0);
};

ReturnBodyContext.prototype.skip = function() {
    return this.getTypedRuleContext(SkipContext,0);
};

ReturnBodyContext.prototype.limit = function() {
    return this.getTypedRuleContext(LimitContext,0);
};

ReturnBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnBody(this);
	}
};

ReturnBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnBody(this);
	}
};




CypherParser.ReturnBodyContext = ReturnBodyContext;

CypherParser.prototype.returnBody = function() {

    var localctx = new ReturnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_returnBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1293;
        this.returnItems();
        this.state = 1296;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        if(la_===1) {
            this.state = 1294;
            this.match(CypherParser.SP);
            this.state = 1295;
            this.order();

        }
        this.state = 1300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        if(la_===1) {
            this.state = 1298;
            this.match(CypherParser.SP);
            this.state = 1299;
            this.skip();

        }
        this.state = 1304;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        if(la_===1) {
            this.state = 1302;
            this.match(CypherParser.SP);
            this.state = 1303;
            this.limit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItems;
    return this;
}

ReturnItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnItemsContext.prototype.constructor = ReturnItemsContext;

ReturnItemsContext.prototype.returnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnItemContext);
    } else {
        return this.getTypedRuleContext(ReturnItemContext,i);
    }
};

ReturnItemsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnItems(this);
	}
};

ReturnItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnItems(this);
	}
};




CypherParser.ReturnItemsContext = ReturnItemsContext;

CypherParser.prototype.returnItems = function() {

    var localctx = new ReturnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_returnItems);
    var _la = 0; // Token type
    try {
        this.state = 1334;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__22:
            this.enterOuterAlt(localctx, 1);
            this.state = 1306;
            this.match(CypherParser.T__22);
            this.state = 1317;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1307;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1310;
                    this.match(CypherParser.T__14);
                    this.state = 1312;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1311;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1314;
                    this.returnItem(); 
                }
                this.state = 1319;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
            }

            break;
        case CypherParser.T__2:
        case CypherParser.T__12:
        case CypherParser.T__13:
        case CypherParser.T__16:
        case CypherParser.T__18:
        case CypherParser.T__33:
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.StringLiteral:
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.HexLetter:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 2);
            this.state = 1320;
            this.returnItem();
            this.state = 1331;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1322;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1321;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1324;
                    this.match(CypherParser.T__14);
                    this.state = 1326;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1325;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1328;
                    this.returnItem(); 
                }
                this.state = 1333;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItem;
    return this;
}

ReturnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnItemContext.prototype.constructor = ReturnItemContext;

ReturnItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnItemContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

ReturnItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ReturnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnItem(this);
	}
};

ReturnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnItem(this);
	}
};




CypherParser.ReturnItemContext = ReturnItemContext;

CypherParser.prototype.returnItem = function() {

    var localctx = new ReturnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_returnItem);
    try {
        this.state = 1343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1336;
            this.expression();
            this.state = 1337;
            this.match(CypherParser.SP);
            this.state = 1338;
            this.match(CypherParser.AS);
            this.state = 1339;
            this.match(CypherParser.SP);
            this.state = 1340;
            this.variable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1342;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_call;
    return this;
}

CallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallContext.prototype.constructor = CallContext;

CallContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

CallContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CallContext.prototype.procedureInvocation = function() {
    return this.getTypedRuleContext(ProcedureInvocationContext,0);
};

CallContext.prototype.procedureResults = function() {
    return this.getTypedRuleContext(ProcedureResultsContext,0);
};

CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCall(this);
	}
};




CypherParser.CallContext = CallContext;

CypherParser.prototype.call = function() {

    var localctx = new CallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1345;
        this.match(CypherParser.CALL);
        this.state = 1346;
        this.match(CypherParser.SP);
        this.state = 1347;
        this.procedureInvocation();
        this.state = 1349;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        if(la_===1) {
            this.state = 1348;
            this.match(CypherParser.SP);

        }
        this.state = 1352;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.YIELD) {
            this.state = 1351;
            this.procedureResults();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocation;
    return this;
}

ProcedureInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureInvocationContext.prototype.constructor = ProcedureInvocationContext;

ProcedureInvocationContext.prototype.procedureInvocationBody = function() {
    return this.getTypedRuleContext(ProcedureInvocationBodyContext,0);
};

ProcedureInvocationContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

ProcedureInvocationContext.prototype.procedureArguments = function() {
    return this.getTypedRuleContext(ProcedureArgumentsContext,0);
};

ProcedureInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureInvocation(this);
	}
};

ProcedureInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureInvocation(this);
	}
};




CypherParser.ProcedureInvocationContext = ProcedureInvocationContext;

CypherParser.prototype.procedureInvocation = function() {

    var localctx = new ProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_procedureInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1354;
        this.procedureInvocationBody();
        this.state = 1356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 1355;
            this.match(CypherParser.SP);

        }
        this.state = 1359;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__18) {
            this.state = 1358;
            this.procedureArguments();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureInvocationBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocationBody;
    return this;
}

ProcedureInvocationBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureInvocationBodyContext.prototype.constructor = ProcedureInvocationBodyContext;

ProcedureInvocationBodyContext.prototype.namespace = function() {
    return this.getTypedRuleContext(NamespaceContext,0);
};

ProcedureInvocationBodyContext.prototype.procedureName = function() {
    return this.getTypedRuleContext(ProcedureNameContext,0);
};

ProcedureInvocationBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureInvocationBody(this);
	}
};

ProcedureInvocationBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureInvocationBody(this);
	}
};




CypherParser.ProcedureInvocationBodyContext = ProcedureInvocationBodyContext;

CypherParser.prototype.procedureInvocationBody = function() {

    var localctx = new ProcedureInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_procedureInvocationBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1361;
        this.namespace();
        this.state = 1362;
        this.procedureName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureArguments;
    return this;
}

ProcedureArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureArgumentsContext.prototype.constructor = ProcedureArgumentsContext;

ProcedureArgumentsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ProcedureArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ProcedureArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureArguments(this);
	}
};

ProcedureArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureArguments(this);
	}
};




CypherParser.ProcedureArgumentsContext = ProcedureArgumentsContext;

CypherParser.prototype.procedureArguments = function() {

    var localctx = new ProcedureArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_procedureArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1364;
        this.match(CypherParser.T__18);
        this.state = 1366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
        if(la_===1) {
            this.state = 1365;
            this.match(CypherParser.SP);

        }
        this.state = 1369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__18))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.StringLiteral - 130)) | (1 << (CypherParser.HexInteger - 130)) | (1 << (CypherParser.DecimalInteger - 130)) | (1 << (CypherParser.OctalInteger - 130)) | (1 << (CypherParser.HexLetter - 130)) | (1 << (CypherParser.ExponentDecimalReal - 130)) | (1 << (CypherParser.RegularDecimalReal - 130)) | (1 << (CypherParser.UnescapedSymbolicName - 130)) | (1 << (CypherParser.EscapedSymbolicName - 130)))) !== 0)) {
            this.state = 1368;
            this.expression();
        }

        this.state = 1381;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1371;
                    this.match(CypherParser.SP);
                }

                this.state = 1374;
                this.match(CypherParser.T__14);
                this.state = 1376;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1375;
                    this.match(CypherParser.SP);
                }

                this.state = 1378;
                this.expression(); 
            }
            this.state = 1383;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
        }

        this.state = 1385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1384;
            this.match(CypherParser.SP);
        }

        this.state = 1387;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureResultsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResults;
    return this;
}

ProcedureResultsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureResultsContext.prototype.constructor = ProcedureResultsContext;

ProcedureResultsContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

ProcedureResultsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ProcedureResultsContext.prototype.procedureResult = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureResultContext);
    } else {
        return this.getTypedRuleContext(ProcedureResultContext,i);
    }
};

ProcedureResultsContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ProcedureResultsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureResults(this);
	}
};

ProcedureResultsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureResults(this);
	}
};




CypherParser.ProcedureResultsContext = ProcedureResultsContext;

CypherParser.prototype.procedureResults = function() {

    var localctx = new ProcedureResultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_procedureResults);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1389;
        this.match(CypherParser.YIELD);
        this.state = 1390;
        this.match(CypherParser.SP);
        this.state = 1391;
        this.procedureResult();
        this.state = 1402;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1392;
                    this.match(CypherParser.SP);
                }

                this.state = 1395;
                this.match(CypherParser.T__14);
                this.state = 1397;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1396;
                    this.match(CypherParser.SP);
                }

                this.state = 1399;
                this.procedureResult(); 
            }
            this.state = 1404;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
        }

        this.state = 1407;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 1405;
            this.match(CypherParser.SP);
            this.state = 1406;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResult;
    return this;
}

ProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureResultContext.prototype.constructor = ProcedureResultContext;

ProcedureResultContext.prototype.aliasedProcedureResult = function() {
    return this.getTypedRuleContext(AliasedProcedureResultContext,0);
};

ProcedureResultContext.prototype.simpleProcedureResult = function() {
    return this.getTypedRuleContext(SimpleProcedureResultContext,0);
};

ProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureResult(this);
	}
};

ProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureResult(this);
	}
};




CypherParser.ProcedureResultContext = ProcedureResultContext;

CypherParser.prototype.procedureResult = function() {

    var localctx = new ProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_procedureResult);
    try {
        this.state = 1411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1409;
            this.aliasedProcedureResult();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1410;
            this.simpleProcedureResult();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasedProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_aliasedProcedureResult;
    return this;
}

AliasedProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedProcedureResultContext.prototype.constructor = AliasedProcedureResultContext;

AliasedProcedureResultContext.prototype.procedureOutput = function() {
    return this.getTypedRuleContext(ProcedureOutputContext,0);
};

AliasedProcedureResultContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AliasedProcedureResultContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

AliasedProcedureResultContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AliasedProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAliasedProcedureResult(this);
	}
};

AliasedProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAliasedProcedureResult(this);
	}
};




CypherParser.AliasedProcedureResultContext = AliasedProcedureResultContext;

CypherParser.prototype.aliasedProcedureResult = function() {

    var localctx = new AliasedProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_aliasedProcedureResult);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        this.procedureOutput();
        this.state = 1414;
        this.match(CypherParser.SP);
        this.state = 1415;
        this.match(CypherParser.AS);
        this.state = 1416;
        this.match(CypherParser.SP);
        this.state = 1417;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_simpleProcedureResult;
    return this;
}

SimpleProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleProcedureResultContext.prototype.constructor = SimpleProcedureResultContext;

SimpleProcedureResultContext.prototype.procedureOutput = function() {
    return this.getTypedRuleContext(ProcedureOutputContext,0);
};

SimpleProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSimpleProcedureResult(this);
	}
};

SimpleProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSimpleProcedureResult(this);
	}
};




CypherParser.SimpleProcedureResultContext = SimpleProcedureResultContext;

CypherParser.prototype.simpleProcedureResult = function() {

    var localctx = new SimpleProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_simpleProcedureResult);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.procedureOutput();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureOutputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureOutput;
    return this;
}

ProcedureOutputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureOutputContext.prototype.constructor = ProcedureOutputContext;

ProcedureOutputContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ProcedureOutputContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureOutput(this);
	}
};

ProcedureOutputContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureOutput(this);
	}
};




CypherParser.ProcedureOutputContext = ProcedureOutputContext;

CypherParser.prototype.procedureOutput = function() {

    var localctx = new ProcedureOutputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CypherParser.RULE_procedureOutput);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1421;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_order;
    return this;
}

OrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderContext.prototype.constructor = OrderContext;

OrderContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

OrderContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OrderContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

OrderContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

OrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOrder(this);
	}
};

OrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOrder(this);
	}
};




CypherParser.OrderContext = OrderContext;

CypherParser.prototype.order = function() {

    var localctx = new OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CypherParser.RULE_order);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1423;
        this.match(CypherParser.ORDER);
        this.state = 1424;
        this.match(CypherParser.SP);
        this.state = 1425;
        this.match(CypherParser.BY);
        this.state = 1426;
        this.match(CypherParser.SP);
        this.state = 1427;
        this.sortItem();
        this.state = 1438;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1429;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1428;
                    this.match(CypherParser.SP);
                }

                this.state = 1431;
                this.match(CypherParser.T__14);
                this.state = 1433;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1432;
                    this.match(CypherParser.SP);
                }

                this.state = 1435;
                this.sortItem(); 
            }
            this.state = 1440;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SkipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_skip;
    return this;
}

SkipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkipContext.prototype.constructor = SkipContext;

SkipContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

SkipContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

SkipContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSkip(this);
	}
};

SkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSkip(this);
	}
};




CypherParser.SkipContext = SkipContext;

CypherParser.prototype.skip = function() {

    var localctx = new SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CypherParser.RULE_skip);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1441;
        this.match(CypherParser.L_SKIP);
        this.state = 1442;
        this.match(CypherParser.SP);
        this.state = 1443;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_limit;
    return this;
}

LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitContext.prototype.constructor = LimitContext;

LimitContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

LimitContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

LimitContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLimit(this);
	}
};

LimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLimit(this);
	}
};




CypherParser.LimitContext = LimitContext;

CypherParser.prototype.limit = function() {

    var localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CypherParser.RULE_limit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1445;
        this.match(CypherParser.LIMIT);
        this.state = 1446;
        this.match(CypherParser.SP);
        this.state = 1447;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sortItem;
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

SortItemContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

SortItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSortItem(this);
	}
};




CypherParser.SortItemContext = SortItemContext;

CypherParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CypherParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1449;
        this.expression();
        this.state = 1457;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        if(la_===1) {
            this.state = 1451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1450;
                this.match(CypherParser.SP);
            }

            this.state = 1453;
            _la = this._input.LA(1);
            if(!(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CypherParser.ASCENDING - 94)) | (1 << (CypherParser.ASC - 94)) | (1 << (CypherParser.DESCENDING - 94)) | (1 << (CypherParser.DESC - 94)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1455;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
            if(la_===1) {
                this.state = 1454;
                this.match(CypherParser.SP);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hint;
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


HintContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

HintContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

HintContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

HintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

HintContext.prototype.propertyKeys = function() {
    return this.getTypedRuleContext(PropertyKeysContext,0);
};

HintContext.prototype.JOIN = function() {
    return this.getToken(CypherParser.JOIN, 0);
};

HintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

HintContext.prototype.SCAN = function() {
    return this.getToken(CypherParser.SCAN, 0);
};

HintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHint(this);
	}
};

HintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHint(this);
	}
};




CypherParser.HintContext = HintContext;

CypherParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CypherParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1459;
            this.match(CypherParser.SP);
        }

        this.state = 1508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1462;
            this.match(CypherParser.USING);
            this.state = 1463;
            this.match(CypherParser.SP);
            this.state = 1464;
            this.match(CypherParser.INDEX);
            this.state = 1465;
            this.match(CypherParser.SP);
            this.state = 1466;
            this.variable();
            this.state = 1467;
            this.nodeLabel();
            this.state = 1469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1468;
                this.match(CypherParser.SP);
            }

            this.state = 1471;
            this.match(CypherParser.T__18);
            this.state = 1473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1472;
                this.match(CypherParser.SP);
            }

            this.state = 1475;
            this.propertyKeys();
            this.state = 1477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1476;
                this.match(CypherParser.SP);
            }

            this.state = 1479;
            this.match(CypherParser.T__19);
            break;

        case 2:
            this.state = 1481;
            this.match(CypherParser.USING);
            this.state = 1482;
            this.match(CypherParser.SP);
            this.state = 1483;
            this.match(CypherParser.JOIN);
            this.state = 1484;
            this.match(CypherParser.SP);
            this.state = 1485;
            this.match(CypherParser.ON);
            this.state = 1486;
            this.match(CypherParser.SP);
            this.state = 1487;
            this.variable();
            this.state = 1498;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,181,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1489;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1488;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1491;
                    this.match(CypherParser.T__14);
                    this.state = 1493;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1492;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1495;
                    this.variable(); 
                }
                this.state = 1500;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,181,this._ctx);
            }

            break;

        case 3:
            this.state = 1501;
            this.match(CypherParser.USING);
            this.state = 1502;
            this.match(CypherParser.SP);
            this.state = 1503;
            this.match(CypherParser.SCAN);
            this.state = 1504;
            this.match(CypherParser.SP);
            this.state = 1505;
            this.variable();
            this.state = 1506;
            this.nodeLabel();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startClause;
    return this;
}

StartClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartClauseContext.prototype.constructor = StartClauseContext;

StartClauseContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

StartClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StartClauseContext.prototype.startPoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StartPointContext);
    } else {
        return this.getTypedRuleContext(StartPointContext,i);
    }
};

StartClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

StartClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStartClause(this);
	}
};

StartClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStartClause(this);
	}
};




CypherParser.StartClauseContext = StartClauseContext;

CypherParser.prototype.startClause = function() {

    var localctx = new StartClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CypherParser.RULE_startClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1510;
        this.match(CypherParser.START);
        this.state = 1511;
        this.match(CypherParser.SP);
        this.state = 1512;
        this.startPoint();
        this.state = 1523;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1514;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1513;
                    this.match(CypherParser.SP);
                }

                this.state = 1516;
                this.match(CypherParser.T__14);
                this.state = 1518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1517;
                    this.match(CypherParser.SP);
                }

                this.state = 1520;
                this.startPoint(); 
            }
            this.state = 1525;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
        }

        this.state = 1527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WHERE) {
            this.state = 1526;
            this.where();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartPointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startPoint;
    return this;
}

StartPointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartPointContext.prototype.constructor = StartPointContext;

StartPointContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

StartPointContext.prototype.lookup = function() {
    return this.getTypedRuleContext(LookupContext,0);
};

StartPointContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StartPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStartPoint(this);
	}
};

StartPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStartPoint(this);
	}
};




CypherParser.StartPointContext = StartPointContext;

CypherParser.prototype.startPoint = function() {

    var localctx = new StartPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CypherParser.RULE_startPoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1529;
        this.variable();
        this.state = 1531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1530;
            this.match(CypherParser.SP);
        }

        this.state = 1533;
        this.match(CypherParser.T__11);
        this.state = 1535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1534;
            this.match(CypherParser.SP);
        }

        this.state = 1537;
        this.lookup();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_lookup;
    return this;
}

LookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LookupContext.prototype.constructor = LookupContext;

LookupContext.prototype.nodeLookup = function() {
    return this.getTypedRuleContext(NodeLookupContext,0);
};

LookupContext.prototype.relationshipLookup = function() {
    return this.getTypedRuleContext(RelationshipLookupContext,0);
};

LookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLookup(this);
	}
};

LookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLookup(this);
	}
};




CypherParser.LookupContext = LookupContext;

CypherParser.prototype.lookup = function() {

    var localctx = new LookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CypherParser.RULE_lookup);
    try {
        this.state = 1541;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.NODE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1539;
            this.nodeLookup();
            break;
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1540;
            this.relationshipLookup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLookup;
    return this;
}

NodeLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLookupContext.prototype.constructor = NodeLookupContext;

NodeLookupContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

NodeLookupContext.prototype.identifiedIndexLookup = function() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
};

NodeLookupContext.prototype.indexQuery = function() {
    return this.getTypedRuleContext(IndexQueryContext,0);
};

NodeLookupContext.prototype.idLookup = function() {
    return this.getTypedRuleContext(IdLookupContext,0);
};

NodeLookupContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

NodeLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLookup(this);
	}
};

NodeLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLookup(this);
	}
};




CypherParser.NodeLookupContext = NodeLookupContext;

CypherParser.prototype.nodeLookup = function() {

    var localctx = new NodeLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CypherParser.RULE_nodeLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1543;
        this.match(CypherParser.NODE);
        this.state = 1545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1544;
            this.match(CypherParser.SP);
        }

        this.state = 1550;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1547;
            this.identifiedIndexLookup();
            break;

        case 2:
            this.state = 1548;
            this.indexQuery();
            break;

        case 3:
            this.state = 1549;
            this.idLookup();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipLookup;
    return this;
}

RelationshipLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipLookupContext.prototype.constructor = RelationshipLookupContext;

RelationshipLookupContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

RelationshipLookupContext.prototype.REL = function() {
    return this.getToken(CypherParser.REL, 0);
};

RelationshipLookupContext.prototype.identifiedIndexLookup = function() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
};

RelationshipLookupContext.prototype.indexQuery = function() {
    return this.getTypedRuleContext(IndexQueryContext,0);
};

RelationshipLookupContext.prototype.idLookup = function() {
    return this.getTypedRuleContext(IdLookupContext,0);
};

RelationshipLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipLookup(this);
	}
};

RelationshipLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipLookup(this);
	}
};




CypherParser.RelationshipLookupContext = RelationshipLookupContext;

CypherParser.prototype.relationshipLookup = function() {

    var localctx = new RelationshipLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CypherParser.RULE_relationshipLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1552;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.RELATIONSHIP || _la===CypherParser.REL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1553;
            this.identifiedIndexLookup();
            break;

        case 2:
            this.state = 1554;
            this.indexQuery();
            break;

        case 3:
            this.state = 1555;
            this.idLookup();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifiedIndexLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_identifiedIndexLookup;
    return this;
}

IdentifiedIndexLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifiedIndexLookupContext.prototype.constructor = IdentifiedIndexLookupContext;

IdentifiedIndexLookupContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

IdentifiedIndexLookupContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

IdentifiedIndexLookupContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IdentifiedIndexLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdentifiedIndexLookup(this);
	}
};

IdentifiedIndexLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdentifiedIndexLookup(this);
	}
};




CypherParser.IdentifiedIndexLookupContext = IdentifiedIndexLookupContext;

CypherParser.prototype.identifiedIndexLookup = function() {

    var localctx = new IdentifiedIndexLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CypherParser.RULE_identifiedIndexLookup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1558;
        this.match(CypherParser.T__1);
        this.state = 1559;
        this.symbolicName();
        this.state = 1560;
        this.match(CypherParser.T__18);
        this.state = 1561;
        this.symbolicName();
        this.state = 1562;
        this.match(CypherParser.T__11);
        this.state = 1565;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.state = 1563;
            this.match(CypherParser.StringLiteral);
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 1564;
            this.parameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1567;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_indexQuery;
    return this;
}

IndexQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexQueryContext.prototype.constructor = IndexQueryContext;

IndexQueryContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

IndexQueryContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

IndexQueryContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IndexQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIndexQuery(this);
	}
};

IndexQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIndexQuery(this);
	}
};




CypherParser.IndexQueryContext = IndexQueryContext;

CypherParser.prototype.indexQuery = function() {

    var localctx = new IndexQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CypherParser.RULE_indexQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1569;
        this.match(CypherParser.T__1);
        this.state = 1570;
        this.symbolicName();
        this.state = 1571;
        this.match(CypherParser.T__18);
        this.state = 1574;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.state = 1572;
            this.match(CypherParser.StringLiteral);
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 1573;
            this.parameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1576;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idLookup;
    return this;
}

IdLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdLookupContext.prototype.constructor = IdLookupContext;

IdLookupContext.prototype.literalIds = function() {
    return this.getTypedRuleContext(LiteralIdsContext,0);
};

IdLookupContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IdLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdLookup(this);
	}
};

IdLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdLookup(this);
	}
};




CypherParser.IdLookupContext = IdLookupContext;

CypherParser.prototype.idLookup = function() {

    var localctx = new IdLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CypherParser.RULE_idLookup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1578;
        this.match(CypherParser.T__18);
        this.state = 1582;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.state = 1579;
            this.literalIds();
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 1580;
            this.parameter();
            break;
        case CypherParser.T__22:
            this.state = 1581;
            this.match(CypherParser.T__22);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1584;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralIdsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalIds;
    return this;
}

LiteralIdsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralIdsContext.prototype.constructor = LiteralIdsContext;

LiteralIdsContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

LiteralIdsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LiteralIdsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteralIds(this);
	}
};

LiteralIdsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteralIds(this);
	}
};




CypherParser.LiteralIdsContext = LiteralIdsContext;

CypherParser.prototype.literalIds = function() {

    var localctx = new LiteralIdsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CypherParser.RULE_literalIds);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        this.integerLiteral();
        this.state = 1597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__14 || _la===CypherParser.SP) {
            this.state = 1588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1587;
                this.match(CypherParser.SP);
            }

            this.state = 1590;
            this.match(CypherParser.T__14);
            this.state = 1592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1591;
                this.match(CypherParser.SP);
            }

            this.state = 1594;
            this.integerLiteral();
            this.state = 1599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_where;
    return this;
}

WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereContext.prototype.constructor = WhereContext;

WhereContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

WhereContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

WhereContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterWhere(this);
	}
};

WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitWhere(this);
	}
};




CypherParser.WhereContext = WhereContext;

CypherParser.prototype.where = function() {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CypherParser.RULE_where);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1600;
        this.match(CypherParser.WHERE);
        this.state = 1601;
        this.match(CypherParser.SP);
        this.state = 1602;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;

PatternContext.prototype.patternPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternPartContext);
    } else {
        return this.getTypedRuleContext(PatternPartContext,i);
    }
};

PatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPattern(this);
	}
};

PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPattern(this);
	}
};




CypherParser.PatternContext = PatternContext;

CypherParser.prototype.pattern = function() {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CypherParser.RULE_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.patternPart();
        this.state = 1615;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1606;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1605;
                    this.match(CypherParser.SP);
                }

                this.state = 1608;
                this.match(CypherParser.T__14);
                this.state = 1610;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1609;
                    this.match(CypherParser.SP);
                }

                this.state = 1612;
                this.patternPart(); 
            }
            this.state = 1617;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternPart;
    return this;
}

PatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternPartContext.prototype.constructor = PatternPartContext;

PatternPartContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PatternPartContext.prototype.anonymousPatternPart = function() {
    return this.getTypedRuleContext(AnonymousPatternPartContext,0);
};

PatternPartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternPart(this);
	}
};

PatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternPart(this);
	}
};




CypherParser.PatternPartContext = PatternPartContext;

CypherParser.prototype.patternPart = function() {

    var localctx = new PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CypherParser.RULE_patternPart);
    var _la = 0; // Token type
    try {
        this.state = 1629;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1618;
            this.variable();
            this.state = 1620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1619;
                this.match(CypherParser.SP);
            }

            this.state = 1622;
            this.match(CypherParser.T__11);
            this.state = 1624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1623;
                this.match(CypherParser.SP);
            }

            this.state = 1626;
            this.anonymousPatternPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1628;
            this.anonymousPatternPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousPatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
    return this;
}

AnonymousPatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousPatternPartContext.prototype.constructor = AnonymousPatternPartContext;

AnonymousPatternPartContext.prototype.shortestPathPatternFunction = function() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
};

AnonymousPatternPartContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

AnonymousPatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnonymousPatternPart(this);
	}
};

AnonymousPatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnonymousPatternPart(this);
	}
};




CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext;

CypherParser.prototype.anonymousPatternPart = function() {

    var localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CypherParser.RULE_anonymousPatternPart);
    try {
        this.state = 1633;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1631;
            this.shortestPathPatternFunction();
            break;
        case CypherParser.T__18:
            this.enterOuterAlt(localctx, 2);
            this.state = 1632;
            this.patternElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElement;
    return this;
}

PatternElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternElementContext.prototype.constructor = PatternElementContext;

PatternElementContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

PatternElementContext.prototype.patternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(PatternElementChainContext,i);
    }
};

PatternElementContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternElementContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

PatternElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternElement(this);
	}
};

PatternElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternElement(this);
	}
};




CypherParser.PatternElementContext = PatternElementContext;

CypherParser.prototype.patternElement = function() {

    var localctx = new PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CypherParser.RULE_patternElement);
    var _la = 0; // Token type
    try {
        this.state = 1649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1635;
            this.nodePattern();
            this.state = 1642;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1637;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1636;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1639;
                    this.patternElementChain(); 
                }
                this.state = 1644;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1645;
            this.match(CypherParser.T__18);
            this.state = 1646;
            this.patternElement();
            this.state = 1647;
            this.match(CypherParser.T__19);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodePatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePattern;
    return this;
}

NodePatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodePatternContext.prototype.constructor = NodePatternContext;

NodePatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodePatternContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodePatternContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

NodePatternContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

NodePatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodePattern(this);
	}
};

NodePatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodePattern(this);
	}
};




CypherParser.NodePatternContext = NodePatternContext;

CypherParser.prototype.nodePattern = function() {

    var localctx = new NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CypherParser.RULE_nodePattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1651;
        this.match(CypherParser.T__18);
        this.state = 1653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1652;
            this.match(CypherParser.SP);
        }

        this.state = 1659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.HexLetter - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)))) !== 0) || _la===CypherParser.EscapedSymbolicName) {
            this.state = 1655;
            this.variable();
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1656;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 1661;
            this.nodeLabels();
            this.state = 1663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1662;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
            this.state = 1667;
            this.properties();
            this.state = 1669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1668;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1673;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternElementChainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElementChain;
    return this;
}

PatternElementChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternElementChainContext.prototype.constructor = PatternElementChainContext;

PatternElementChainContext.prototype.relationshipPattern = function() {
    return this.getTypedRuleContext(RelationshipPatternContext,0);
};

PatternElementChainContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

PatternElementChainContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PatternElementChainContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternElementChain(this);
	}
};

PatternElementChainContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternElementChain(this);
	}
};




CypherParser.PatternElementChainContext = PatternElementChainContext;

CypherParser.prototype.patternElementChain = function() {

    var localctx = new PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CypherParser.RULE_patternElementChain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1675;
        this.relationshipPattern();
        this.state = 1677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1676;
            this.match(CypherParser.SP);
        }

        this.state = 1679;
        this.nodePattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPattern;
    return this;
}

RelationshipPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternContext.prototype.constructor = RelationshipPatternContext;

RelationshipPatternContext.prototype.relationshipPatternStart = function() {
    return this.getTypedRuleContext(RelationshipPatternStartContext,0);
};

RelationshipPatternContext.prototype.relationshipPatternEnd = function() {
    return this.getTypedRuleContext(RelationshipPatternEndContext,0);
};

RelationshipPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPatternContext.prototype.relationshipDetail = function() {
    return this.getTypedRuleContext(RelationshipDetailContext,0);
};

RelationshipPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPattern(this);
	}
};

RelationshipPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPattern(this);
	}
};




CypherParser.RelationshipPatternContext = RelationshipPatternContext;

CypherParser.prototype.relationshipPattern = function() {

    var localctx = new RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CypherParser.RULE_relationshipPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1681;
        this.relationshipPatternStart();
        this.state = 1683;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
        if(la_===1) {
            this.state = 1682;
            this.match(CypherParser.SP);

        }
        this.state = 1686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__16) {
            this.state = 1685;
            this.relationshipDetail();
        }

        this.state = 1689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1688;
            this.match(CypherParser.SP);
        }

        this.state = 1691;
        this.relationshipPatternEnd();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternStartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternStart;
    return this;
}

RelationshipPatternStartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternStartContext.prototype.constructor = RelationshipPatternStartContext;

RelationshipPatternStartContext.prototype.leftArrowHead = function() {
    return this.getTypedRuleContext(LeftArrowHeadContext,0);
};

RelationshipPatternStartContext.prototype.dash = function() {
    return this.getTypedRuleContext(DashContext,0);
};

RelationshipPatternStartContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelationshipPatternStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternStart(this);
	}
};

RelationshipPatternStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternStart(this);
	}
};




CypherParser.RelationshipPatternStartContext = RelationshipPatternStartContext;

CypherParser.prototype.relationshipPatternStart = function() {

    var localctx = new RelationshipPatternStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CypherParser.RULE_relationshipPatternStart);
    var _la = 0; // Token type
    try {
        this.state = 1700;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__29:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
            this.enterOuterAlt(localctx, 1);
            this.state = 1693;
            this.leftArrowHead();
            this.state = 1695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1694;
                this.match(CypherParser.SP);
            }

            this.state = 1697;
            this.dash();
            break;
        case CypherParser.T__2:
        case CypherParser.T__42:
        case CypherParser.T__43:
        case CypherParser.T__44:
        case CypherParser.T__45:
        case CypherParser.T__46:
        case CypherParser.T__47:
        case CypherParser.T__48:
        case CypherParser.T__49:
        case CypherParser.T__50:
        case CypherParser.T__51:
        case CypherParser.T__52:
            this.enterOuterAlt(localctx, 2);
            this.state = 1699;
            this.dash();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternEndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternEnd;
    return this;
}

RelationshipPatternEndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternEndContext.prototype.constructor = RelationshipPatternEndContext;

RelationshipPatternEndContext.prototype.dash = function() {
    return this.getTypedRuleContext(DashContext,0);
};

RelationshipPatternEndContext.prototype.rightArrowHead = function() {
    return this.getTypedRuleContext(RightArrowHeadContext,0);
};

RelationshipPatternEndContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelationshipPatternEndContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternEnd(this);
	}
};

RelationshipPatternEndContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternEnd(this);
	}
};




CypherParser.RelationshipPatternEndContext = RelationshipPatternEndContext;

CypherParser.prototype.relationshipPatternEnd = function() {

    var localctx = new RelationshipPatternEndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CypherParser.RULE_relationshipPatternEnd);
    var _la = 0; // Token type
    try {
        this.state = 1709;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1702;
            this.dash();
            this.state = 1704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1703;
                this.match(CypherParser.SP);
            }

            this.state = 1706;
            this.rightArrowHead();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1708;
            this.dash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipDetailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipDetail;
    return this;
}

RelationshipDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipDetailContext.prototype.constructor = RelationshipDetailContext;

RelationshipDetailContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipDetailContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RelationshipDetailContext.prototype.relationshipTypes = function() {
    return this.getTypedRuleContext(RelationshipTypesContext,0);
};

RelationshipDetailContext.prototype.rangeLiteral = function() {
    return this.getTypedRuleContext(RangeLiteralContext,0);
};

RelationshipDetailContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

RelationshipDetailContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipDetail(this);
	}
};

RelationshipDetailContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipDetail(this);
	}
};




CypherParser.RelationshipDetailContext = RelationshipDetailContext;

CypherParser.prototype.relationshipDetail = function() {

    var localctx = new RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CypherParser.RULE_relationshipDetail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1711;
        this.match(CypherParser.T__16);
        this.state = 1713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1712;
            this.match(CypherParser.SP);
        }

        this.state = 1719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.HexLetter - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)))) !== 0) || _la===CypherParser.EscapedSymbolicName) {
            this.state = 1715;
            this.variable();
            this.state = 1717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1716;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 1721;
            this.relationshipTypes();
            this.state = 1723;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1722;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__22) {
            this.state = 1727;
            this.rangeLiteral();
        }

        this.state = 1734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
            this.state = 1730;
            this.properties();
            this.state = 1732;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1731;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1736;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_properties;
    return this;
}

PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertiesContext.prototype.constructor = PropertiesContext;

PropertiesContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

PropertiesContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

PropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProperties(this);
	}
};

PropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProperties(this);
	}
};




CypherParser.PropertiesContext = PropertiesContext;

CypherParser.prototype.properties = function() {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CypherParser.RULE_properties);
    try {
        this.state = 1740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1738;
            this.mapLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1739;
            this.parameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relType;
    return this;
}

RelTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelTypeContext.prototype.constructor = RelTypeContext;

RelTypeContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelTypeContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelType(this);
	}
};

RelTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelType(this);
	}
};




CypherParser.RelTypeContext = RelTypeContext;

CypherParser.prototype.relType = function() {

    var localctx = new RelTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CypherParser.RULE_relType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1742;
        this.match(CypherParser.T__1);
        this.state = 1744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1743;
            this.match(CypherParser.SP);
        }

        this.state = 1746;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypes;
    return this;
}

RelationshipTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypesContext.prototype.constructor = RelationshipTypesContext;

RelationshipTypesContext.prototype.relationshipType = function() {
    return this.getTypedRuleContext(RelationshipTypeContext,0);
};

RelationshipTypesContext.prototype.relationshipTypeOptionalColon = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);
    } else {
        return this.getTypedRuleContext(RelationshipTypeOptionalColonContext,i);
    }
};

RelationshipTypesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipTypes(this);
	}
};

RelationshipTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipTypes(this);
	}
};




CypherParser.RelationshipTypesContext = RelationshipTypesContext;

CypherParser.prototype.relationshipTypes = function() {

    var localctx = new RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CypherParser.RULE_relationshipTypes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this.relationshipType();
        this.state = 1756;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,235,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1750;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1749;
                    this.match(CypherParser.SP);
                }

                this.state = 1752;
                this.match(CypherParser.T__21);
                this.state = 1753;
                this.relationshipTypeOptionalColon(); 
            }
            this.state = 1758;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,235,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipType;
    return this;
}

RelationshipTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypeContext.prototype.constructor = RelationshipTypeContext;

RelationshipTypeContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelationshipTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipType(this);
	}
};

RelationshipTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipType(this);
	}
};




CypherParser.RelationshipTypeContext = RelationshipTypeContext;

CypherParser.prototype.relationshipType = function() {

    var localctx = new RelationshipTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CypherParser.RULE_relationshipType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1759;
        this.match(CypherParser.T__1);
        this.state = 1760;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypeOptionalColonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypeOptionalColon;
    return this;
}

RelationshipTypeOptionalColonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypeOptionalColonContext.prototype.constructor = RelationshipTypeOptionalColonContext;

RelationshipTypeOptionalColonContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelationshipTypeOptionalColonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipTypeOptionalColon(this);
	}
};

RelationshipTypeOptionalColonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipTypeOptionalColon(this);
	}
};




CypherParser.RelationshipTypeOptionalColonContext = RelationshipTypeOptionalColonContext;

CypherParser.prototype.relationshipTypeOptionalColon = function() {

    var localctx = new RelationshipTypeOptionalColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CypherParser.RULE_relationshipTypeOptionalColon);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 1762;
            this.match(CypherParser.T__1);
        }

        this.state = 1765;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabels;
    return this;
}

NodeLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLabelsContext.prototype.constructor = NodeLabelsContext;

NodeLabelsContext.prototype.nodeLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeLabelContext);
    } else {
        return this.getTypedRuleContext(NodeLabelContext,i);
    }
};

NodeLabelsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodeLabelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLabels(this);
	}
};

NodeLabelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLabels(this);
	}
};




CypherParser.NodeLabelsContext = NodeLabelsContext;

CypherParser.prototype.nodeLabels = function() {

    var localctx = new NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CypherParser.RULE_nodeLabels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1767;
        this.nodeLabel();
        this.state = 1774;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1768;
                    this.match(CypherParser.SP);
                }

                this.state = 1771;
                this.nodeLabel(); 
            }
            this.state = 1776;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabel;
    return this;
}

NodeLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLabelContext.prototype.constructor = NodeLabelContext;

NodeLabelContext.prototype.labelName = function() {
    return this.getTypedRuleContext(LabelNameContext,0);
};

NodeLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLabel(this);
	}
};

NodeLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLabel(this);
	}
};




CypherParser.NodeLabelContext = NodeLabelContext;

CypherParser.prototype.nodeLabel = function() {

    var localctx = new NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CypherParser.RULE_nodeLabel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1777;
        this.match(CypherParser.T__1);
        this.state = 1778;
        this.labelName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rangeLiteral;
    return this;
}

RangeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeLiteralContext.prototype.constructor = RangeLiteralContext;

RangeLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RangeLiteralContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

RangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRangeLiteral(this);
	}
};

RangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRangeLiteral(this);
	}
};




CypherParser.RangeLiteralContext = RangeLiteralContext;

CypherParser.prototype.rangeLiteral = function() {

    var localctx = new RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CypherParser.RULE_rangeLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1780;
        this.match(CypherParser.T__22);
        this.state = 1782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1781;
            this.match(CypherParser.SP);
        }

        this.state = 1788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CypherParser.HexInteger - 135)) | (1 << (CypherParser.DecimalInteger - 135)) | (1 << (CypherParser.OctalInteger - 135)))) !== 0)) {
            this.state = 1784;
            this.integerLiteral();
            this.state = 1786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1785;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1800;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__23) {
            this.state = 1790;
            this.match(CypherParser.T__23);
            this.state = 1792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1791;
                this.match(CypherParser.SP);
            }

            this.state = 1798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CypherParser.HexInteger - 135)) | (1 << (CypherParser.DecimalInteger - 135)) | (1 << (CypherParser.OctalInteger - 135)))) !== 0)) {
                this.state = 1794;
                this.integerLiteral();
                this.state = 1796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1795;
                    this.match(CypherParser.SP);
                }

            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_labelName;
    return this;
}

LabelNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelNameContext.prototype.constructor = LabelNameContext;

LabelNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

LabelNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLabelName(this);
	}
};

LabelNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLabelName(this);
	}
};




CypherParser.LabelNameContext = LabelNameContext;

CypherParser.prototype.labelName = function() {

    var localctx = new LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CypherParser.RULE_labelName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1802;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relTypeName;
    return this;
}

RelTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelTypeNameContext.prototype.constructor = RelTypeNameContext;

RelTypeNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

RelTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelTypeName(this);
	}
};

RelTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelTypeName(this);
	}
};




CypherParser.RelTypeNameContext = RelTypeNameContext;

CypherParser.prototype.relTypeName = function() {

    var localctx = new RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CypherParser.RULE_relTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1804;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.orExpression = function() {
    return this.getTypedRuleContext(OrExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExpression(this);
	}
};




CypherParser.ExpressionContext = ExpressionContext;

CypherParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CypherParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1806;
        this.orExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_orExpression;
    return this;
}

OrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OrExpressionContext.prototype.xorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XorExpressionContext);
    } else {
        return this.getTypedRuleContext(XorExpressionContext,i);
    }
};

OrExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OrExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.OR);
    } else {
        return this.getToken(CypherParser.OR, i);
    }
};


OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOrExpression(this);
	}
};




CypherParser.OrExpressionContext = OrExpressionContext;

CypherParser.prototype.orExpression = function() {

    var localctx = new OrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CypherParser.RULE_orExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1808;
        this.xorExpression();
        this.state = 1815;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1809;
                this.match(CypherParser.SP);
                this.state = 1810;
                this.match(CypherParser.OR);
                this.state = 1811;
                this.match(CypherParser.SP);
                this.state = 1812;
                this.xorExpression(); 
            }
            this.state = 1817;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function XorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_xorExpression;
    return this;
}

XorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XorExpressionContext.prototype.constructor = XorExpressionContext;

XorExpressionContext.prototype.andExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AndExpressionContext);
    } else {
        return this.getTypedRuleContext(AndExpressionContext,i);
    }
};

XorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


XorExpressionContext.prototype.XOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.XOR);
    } else {
        return this.getToken(CypherParser.XOR, i);
    }
};


XorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterXorExpression(this);
	}
};

XorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitXorExpression(this);
	}
};




CypherParser.XorExpressionContext = XorExpressionContext;

CypherParser.prototype.xorExpression = function() {

    var localctx = new XorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CypherParser.RULE_xorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1818;
        this.andExpression();
        this.state = 1825;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,247,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1819;
                this.match(CypherParser.SP);
                this.state = 1820;
                this.match(CypherParser.XOR);
                this.state = 1821;
                this.match(CypherParser.SP);
                this.state = 1822;
                this.andExpression(); 
            }
            this.state = 1827;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,247,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_andExpression;
    return this;
}

AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.notExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NotExpressionContext);
    } else {
        return this.getTypedRuleContext(NotExpressionContext,i);
    }
};

AndExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AndExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.AND);
    } else {
        return this.getToken(CypherParser.AND, i);
    }
};


AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAndExpression(this);
	}
};




CypherParser.AndExpressionContext = AndExpressionContext;

CypherParser.prototype.andExpression = function() {

    var localctx = new AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CypherParser.RULE_andExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1828;
        this.notExpression();
        this.state = 1835;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1829;
                this.match(CypherParser.SP);
                this.state = 1830;
                this.match(CypherParser.AND);
                this.state = 1831;
                this.match(CypherParser.SP);
                this.state = 1832;
                this.notExpression(); 
            }
            this.state = 1837;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_notExpression;
    return this;
}

NotExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.comparisonExpression = function() {
    return this.getTypedRuleContext(ComparisonExpressionContext,0);
};

NotExpressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NOT);
    } else {
        return this.getToken(CypherParser.NOT, i);
    }
};


NotExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNotExpression(this);
	}
};




CypherParser.NotExpressionContext = NotExpressionContext;

CypherParser.prototype.notExpression = function() {

    var localctx = new NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CypherParser.RULE_notExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1844;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,250,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1838;
                this.match(CypherParser.NOT);
                this.state = 1840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1839;
                    this.match(CypherParser.SP);
                }
         
            }
            this.state = 1846;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,250,this._ctx);
        }

        this.state = 1847;
        this.comparisonExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_comparisonExpression;
    return this;
}

ComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonExpressionContext.prototype.constructor = ComparisonExpressionContext;

ComparisonExpressionContext.prototype.addOrSubtractExpression = function() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
};

ComparisonExpressionContext.prototype.partialComparisonExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartialComparisonExpressionContext);
    } else {
        return this.getTypedRuleContext(PartialComparisonExpressionContext,i);
    }
};

ComparisonExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterComparisonExpression(this);
	}
};

ComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitComparisonExpression(this);
	}
};




CypherParser.ComparisonExpressionContext = ComparisonExpressionContext;

CypherParser.prototype.comparisonExpression = function() {

    var localctx = new ComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CypherParser.RULE_comparisonExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1849;
        this.addOrSubtractExpression();
        this.state = 1856;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,252,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1851;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1850;
                    this.match(CypherParser.SP);
                }

                this.state = 1853;
                this.partialComparisonExpression(); 
            }
            this.state = 1858;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,252,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_addOrSubtractExpression;
    return this;
}

AddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddOrSubtractExpressionContext.prototype.constructor = AddOrSubtractExpressionContext;

AddOrSubtractExpressionContext.prototype.multiplyDivideModuloExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext,i);
    }
};

AddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAddOrSubtractExpression(this);
	}
};

AddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAddOrSubtractExpression(this);
	}
};




CypherParser.AddOrSubtractExpressionContext = AddOrSubtractExpressionContext;

CypherParser.prototype.addOrSubtractExpression = function() {

    var localctx = new AddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CypherParser.RULE_addOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1859;
        this.multiplyDivideModuloExpression();
        this.state = 1878;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,258,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1876;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1861;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1860;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1863;
                    this.match(CypherParser.T__12);
                    this.state = 1865;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1864;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1867;
                    this.multiplyDivideModuloExpression();
                    break;

                case 2:
                    this.state = 1869;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1868;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1871;
                    this.match(CypherParser.T__2);
                    this.state = 1873;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1872;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1875;
                    this.multiplyDivideModuloExpression();
                    break;

                } 
            }
            this.state = 1880;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,258,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyDivideModuloExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_multiplyDivideModuloExpression;
    return this;
}

MultiplyDivideModuloExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyDivideModuloExpressionContext.prototype.constructor = MultiplyDivideModuloExpressionContext;

MultiplyDivideModuloExpressionContext.prototype.powerOfExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PowerOfExpressionContext);
    } else {
        return this.getTypedRuleContext(PowerOfExpressionContext,i);
    }
};

MultiplyDivideModuloExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MultiplyDivideModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMultiplyDivideModuloExpression(this);
	}
};

MultiplyDivideModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMultiplyDivideModuloExpression(this);
	}
};




CypherParser.MultiplyDivideModuloExpressionContext = MultiplyDivideModuloExpressionContext;

CypherParser.prototype.multiplyDivideModuloExpression = function() {

    var localctx = new MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CypherParser.RULE_multiplyDivideModuloExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1881;
        this.powerOfExpression();
        this.state = 1908;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,266,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1906;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1883;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1882;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1885;
                    this.match(CypherParser.T__22);
                    this.state = 1887;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1886;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1889;
                    this.powerOfExpression();
                    break;

                case 2:
                    this.state = 1891;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1890;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1893;
                    this.match(CypherParser.T__5);
                    this.state = 1895;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1894;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1897;
                    this.powerOfExpression();
                    break;

                case 3:
                    this.state = 1899;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1898;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1901;
                    this.match(CypherParser.T__24);
                    this.state = 1903;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1902;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1905;
                    this.powerOfExpression();
                    break;

                } 
            }
            this.state = 1910;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,266,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerOfExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_powerOfExpression;
    return this;
}

PowerOfExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerOfExpressionContext.prototype.constructor = PowerOfExpressionContext;

PowerOfExpressionContext.prototype.unaryAddOrSubtractExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);
    } else {
        return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext,i);
    }
};

PowerOfExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PowerOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPowerOfExpression(this);
	}
};

PowerOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPowerOfExpression(this);
	}
};




CypherParser.PowerOfExpressionContext = PowerOfExpressionContext;

CypherParser.prototype.powerOfExpression = function() {

    var localctx = new PowerOfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CypherParser.RULE_powerOfExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1911;
        this.unaryAddOrSubtractExpression();
        this.state = 1922;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,269,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1913;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1912;
                    this.match(CypherParser.SP);
                }

                this.state = 1915;
                this.match(CypherParser.T__25);
                this.state = 1917;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1916;
                    this.match(CypherParser.SP);
                }

                this.state = 1919;
                this.unaryAddOrSubtractExpression(); 
            }
            this.state = 1924;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,269,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryAddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unaryAddOrSubtractExpression;
    return this;
}

UnaryAddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryAddOrSubtractExpressionContext.prototype.constructor = UnaryAddOrSubtractExpressionContext;

UnaryAddOrSubtractExpressionContext.prototype.stringListNullOperatorExpression = function() {
    return this.getTypedRuleContext(StringListNullOperatorExpressionContext,0);
};

UnaryAddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnaryAddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnaryAddOrSubtractExpression(this);
	}
};

UnaryAddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnaryAddOrSubtractExpression(this);
	}
};




CypherParser.UnaryAddOrSubtractExpressionContext = UnaryAddOrSubtractExpressionContext;

CypherParser.prototype.unaryAddOrSubtractExpression = function() {

    var localctx = new UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CypherParser.RULE_unaryAddOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1931;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2 || _la===CypherParser.T__12) {
            this.state = 1925;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.T__2 || _la===CypherParser.T__12)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1926;
                this.match(CypherParser.SP);
            }

            this.state = 1933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1934;
        this.stringListNullOperatorExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringListNullOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringListNullOperatorExpression;
    return this;
}

StringListNullOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringListNullOperatorExpressionContext.prototype.constructor = StringListNullOperatorExpressionContext;

StringListNullOperatorExpressionContext.prototype.propertyOrLabelsExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);
    } else {
        return this.getTypedRuleContext(PropertyOrLabelsExpressionContext,i);
    }
};

StringListNullOperatorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StringListNullOperatorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StringListNullOperatorExpressionContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.IS);
    } else {
        return this.getToken(CypherParser.IS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NULL);
    } else {
        return this.getToken(CypherParser.NULL, i);
    }
};


StringListNullOperatorExpressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NOT);
    } else {
        return this.getToken(CypherParser.NOT, i);
    }
};


StringListNullOperatorExpressionContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.IN);
    } else {
        return this.getToken(CypherParser.IN, i);
    }
};


StringListNullOperatorExpressionContext.prototype.STARTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.STARTS);
    } else {
        return this.getToken(CypherParser.STARTS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.WITH);
    } else {
        return this.getToken(CypherParser.WITH, i);
    }
};


StringListNullOperatorExpressionContext.prototype.ENDS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.ENDS);
    } else {
        return this.getToken(CypherParser.ENDS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.CONTAINS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.CONTAINS);
    } else {
        return this.getToken(CypherParser.CONTAINS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStringListNullOperatorExpression(this);
	}
};

StringListNullOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStringListNullOperatorExpression(this);
	}
};




CypherParser.StringListNullOperatorExpressionContext = StringListNullOperatorExpressionContext;

CypherParser.prototype.stringListNullOperatorExpression = function() {

    var localctx = new StringListNullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CypherParser.RULE_stringListNullOperatorExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1936;
        this.propertyOrLabelsExpression();
        this.state = 1990;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1988;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1938;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1937;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1940;
                    this.match(CypherParser.T__16);
                    this.state = 1941;
                    this.expression();
                    this.state = 1942;
                    this.match(CypherParser.T__17);
                    break;

                case 2:
                    this.state = 1945;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1944;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1947;
                    this.match(CypherParser.T__16);
                    this.state = 1949;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__18))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.StringLiteral - 130)) | (1 << (CypherParser.HexInteger - 130)) | (1 << (CypherParser.DecimalInteger - 130)) | (1 << (CypherParser.OctalInteger - 130)) | (1 << (CypherParser.HexLetter - 130)) | (1 << (CypherParser.ExponentDecimalReal - 130)) | (1 << (CypherParser.RegularDecimalReal - 130)) | (1 << (CypherParser.UnescapedSymbolicName - 130)) | (1 << (CypherParser.EscapedSymbolicName - 130)))) !== 0)) {
                        this.state = 1948;
                        this.expression();
                    }

                    this.state = 1951;
                    this.match(CypherParser.T__23);
                    this.state = 1953;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__18))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.StringLiteral - 130)) | (1 << (CypherParser.HexInteger - 130)) | (1 << (CypherParser.DecimalInteger - 130)) | (1 << (CypherParser.OctalInteger - 130)) | (1 << (CypherParser.HexLetter - 130)) | (1 << (CypherParser.ExponentDecimalReal - 130)) | (1 << (CypherParser.RegularDecimalReal - 130)) | (1 << (CypherParser.UnescapedSymbolicName - 130)) | (1 << (CypherParser.EscapedSymbolicName - 130)))) !== 0)) {
                        this.state = 1952;
                        this.expression();
                    }

                    this.state = 1955;
                    this.match(CypherParser.T__17);
                    break;

                case 3:
                    this.state = 1972;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1957;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===CypherParser.SP) {
                            this.state = 1956;
                            this.match(CypherParser.SP);
                        }

                        this.state = 1959;
                        this.match(CypherParser.T__26);
                        break;

                    case 2:
                        this.state = 1960;
                        this.match(CypherParser.SP);
                        this.state = 1961;
                        this.match(CypherParser.IN);
                        break;

                    case 3:
                        this.state = 1962;
                        this.match(CypherParser.SP);
                        this.state = 1963;
                        this.match(CypherParser.STARTS);
                        this.state = 1964;
                        this.match(CypherParser.SP);
                        this.state = 1965;
                        this.match(CypherParser.WITH);
                        break;

                    case 4:
                        this.state = 1966;
                        this.match(CypherParser.SP);
                        this.state = 1967;
                        this.match(CypherParser.ENDS);
                        this.state = 1968;
                        this.match(CypherParser.SP);
                        this.state = 1969;
                        this.match(CypherParser.WITH);
                        break;

                    case 5:
                        this.state = 1970;
                        this.match(CypherParser.SP);
                        this.state = 1971;
                        this.match(CypherParser.CONTAINS);
                        break;

                    }
                    this.state = 1975;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1974;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1977;
                    this.propertyOrLabelsExpression();
                    break;

                case 4:
                    this.state = 1978;
                    this.match(CypherParser.SP);
                    this.state = 1979;
                    this.match(CypherParser.IS);
                    this.state = 1980;
                    this.match(CypherParser.SP);
                    this.state = 1981;
                    this.match(CypherParser.NULL);
                    break;

                case 5:
                    this.state = 1982;
                    this.match(CypherParser.SP);
                    this.state = 1983;
                    this.match(CypherParser.IS);
                    this.state = 1984;
                    this.match(CypherParser.SP);
                    this.state = 1985;
                    this.match(CypherParser.NOT);
                    this.state = 1986;
                    this.match(CypherParser.SP);
                    this.state = 1987;
                    this.match(CypherParser.NULL);
                    break;

                } 
            }
            this.state = 1992;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyOrLabelsExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyOrLabelsExpression;
    return this;
}

PropertyOrLabelsExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyOrLabelsExpressionContext.prototype.constructor = PropertyOrLabelsExpressionContext;

PropertyOrLabelsExpressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

PropertyOrLabelsExpressionContext.prototype.propertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(PropertyLookupContext,i);
    }
};

PropertyOrLabelsExpressionContext.prototype.nodeLabels = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeLabelsContext);
    } else {
        return this.getTypedRuleContext(NodeLabelsContext,i);
    }
};

PropertyOrLabelsExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyOrLabelsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyOrLabelsExpression(this);
	}
};

PropertyOrLabelsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyOrLabelsExpression(this);
	}
};




CypherParser.PropertyOrLabelsExpressionContext = PropertyOrLabelsExpressionContext;

CypherParser.prototype.propertyOrLabelsExpression = function() {

    var localctx = new PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CypherParser.RULE_propertyOrLabelsExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1993;
        this.atom();
        this.state = 2003;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,283,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1995;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1994;
                    this.match(CypherParser.SP);
                }

                this.state = 1999;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CypherParser.T__6:
                    this.state = 1997;
                    this.propertyLookup();
                    break;
                case CypherParser.T__1:
                    this.state = 1998;
                    this.nodeLabels();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2005;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,283,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunction;
    return this;
}

FilterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterFunctionContext.prototype.constructor = FilterFunctionContext;

FilterFunctionContext.prototype.filterFunctionName = function() {
    return this.getTypedRuleContext(FilterFunctionNameContext,0);
};

FilterFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

FilterFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


FilterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterFunction(this);
	}
};

FilterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterFunction(this);
	}
};




CypherParser.FilterFunctionContext = FilterFunctionContext;

CypherParser.prototype.filterFunction = function() {

    var localctx = new FilterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CypherParser.RULE_filterFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2006;
        this.filterFunctionName();
        this.state = 2008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2007;
            this.match(CypherParser.SP);
        }

        this.state = 2010;
        this.match(CypherParser.T__18);
        this.state = 2012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2011;
            this.match(CypherParser.SP);
        }

        this.state = 2014;
        this.filterExpression();
        this.state = 2016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2015;
            this.match(CypherParser.SP);
        }

        this.state = 2018;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunctionName;
    return this;
}

FilterFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterFunctionNameContext.prototype.constructor = FilterFunctionNameContext;

FilterFunctionNameContext.prototype.FILTER = function() {
    return this.getToken(CypherParser.FILTER, 0);
};

FilterFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterFunctionName(this);
	}
};

FilterFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterFunctionName(this);
	}
};




CypherParser.FilterFunctionNameContext = FilterFunctionNameContext;

CypherParser.prototype.filterFunctionName = function() {

    var localctx = new FilterFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CypherParser.RULE_filterFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2020;
        this.match(CypherParser.FILTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunction;
    return this;
}

ExistsFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFunctionContext.prototype.constructor = ExistsFunctionContext;

ExistsFunctionContext.prototype.existsFunctionName = function() {
    return this.getTypedRuleContext(ExistsFunctionNameContext,0);
};

ExistsFunctionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExistsFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ExistsFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExistsFunction(this);
	}
};

ExistsFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExistsFunction(this);
	}
};




CypherParser.ExistsFunctionContext = ExistsFunctionContext;

CypherParser.prototype.existsFunction = function() {

    var localctx = new ExistsFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CypherParser.RULE_existsFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2022;
        this.existsFunctionName();
        this.state = 2024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2023;
            this.match(CypherParser.SP);
        }

        this.state = 2026;
        this.match(CypherParser.T__18);
        this.state = 2028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2027;
            this.match(CypherParser.SP);
        }

        this.state = 2030;
        this.expression();
        this.state = 2032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2031;
            this.match(CypherParser.SP);
        }

        this.state = 2034;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunctionName;
    return this;
}

ExistsFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFunctionNameContext.prototype.constructor = ExistsFunctionNameContext;

ExistsFunctionNameContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

ExistsFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExistsFunctionName(this);
	}
};

ExistsFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExistsFunctionName(this);
	}
};




CypherParser.ExistsFunctionNameContext = ExistsFunctionNameContext;

CypherParser.prototype.existsFunctionName = function() {

    var localctx = new ExistsFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CypherParser.RULE_existsFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2036;
        this.match(CypherParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunction;
    return this;
}

AllFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllFunctionContext.prototype.constructor = AllFunctionContext;

AllFunctionContext.prototype.allFunctionName = function() {
    return this.getTypedRuleContext(AllFunctionNameContext,0);
};

AllFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

AllFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AllFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllFunction(this);
	}
};

AllFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllFunction(this);
	}
};




CypherParser.AllFunctionContext = AllFunctionContext;

CypherParser.prototype.allFunction = function() {

    var localctx = new AllFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CypherParser.RULE_allFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2038;
        this.allFunctionName();
        this.state = 2040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2039;
            this.match(CypherParser.SP);
        }

        this.state = 2042;
        this.match(CypherParser.T__18);
        this.state = 2044;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2043;
            this.match(CypherParser.SP);
        }

        this.state = 2046;
        this.filterExpression();
        this.state = 2048;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2047;
            this.match(CypherParser.SP);
        }

        this.state = 2050;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunctionName;
    return this;
}

AllFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllFunctionNameContext.prototype.constructor = AllFunctionNameContext;

AllFunctionNameContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

AllFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllFunctionName(this);
	}
};

AllFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllFunctionName(this);
	}
};




CypherParser.AllFunctionNameContext = AllFunctionNameContext;

CypherParser.prototype.allFunctionName = function() {

    var localctx = new AllFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CypherParser.RULE_allFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2052;
        this.match(CypherParser.ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunction;
    return this;
}

AnyFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyFunctionContext.prototype.constructor = AnyFunctionContext;

AnyFunctionContext.prototype.anyFunctionName = function() {
    return this.getTypedRuleContext(AnyFunctionNameContext,0);
};

AnyFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

AnyFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AnyFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyFunction(this);
	}
};

AnyFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyFunction(this);
	}
};




CypherParser.AnyFunctionContext = AnyFunctionContext;

CypherParser.prototype.anyFunction = function() {

    var localctx = new AnyFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CypherParser.RULE_anyFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2054;
        this.anyFunctionName();
        this.state = 2056;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2055;
            this.match(CypherParser.SP);
        }

        this.state = 2058;
        this.match(CypherParser.T__18);
        this.state = 2060;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2059;
            this.match(CypherParser.SP);
        }

        this.state = 2062;
        this.filterExpression();
        this.state = 2064;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2063;
            this.match(CypherParser.SP);
        }

        this.state = 2066;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunctionName;
    return this;
}

AnyFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyFunctionNameContext.prototype.constructor = AnyFunctionNameContext;

AnyFunctionNameContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

AnyFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyFunctionName(this);
	}
};

AnyFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyFunctionName(this);
	}
};




CypherParser.AnyFunctionNameContext = AnyFunctionNameContext;

CypherParser.prototype.anyFunctionName = function() {

    var localctx = new AnyFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CypherParser.RULE_anyFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2068;
        this.match(CypherParser.ANY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunction;
    return this;
}

NoneFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneFunctionContext.prototype.constructor = NoneFunctionContext;

NoneFunctionContext.prototype.noneFunctionName = function() {
    return this.getTypedRuleContext(NoneFunctionNameContext,0);
};

NoneFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

NoneFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NoneFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNoneFunction(this);
	}
};

NoneFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNoneFunction(this);
	}
};




CypherParser.NoneFunctionContext = NoneFunctionContext;

CypherParser.prototype.noneFunction = function() {

    var localctx = new NoneFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CypherParser.RULE_noneFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2070;
        this.noneFunctionName();
        this.state = 2072;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2071;
            this.match(CypherParser.SP);
        }

        this.state = 2074;
        this.match(CypherParser.T__18);
        this.state = 2076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2075;
            this.match(CypherParser.SP);
        }

        this.state = 2078;
        this.filterExpression();
        this.state = 2080;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2079;
            this.match(CypherParser.SP);
        }

        this.state = 2082;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunctionName;
    return this;
}

NoneFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneFunctionNameContext.prototype.constructor = NoneFunctionNameContext;

NoneFunctionNameContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

NoneFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNoneFunctionName(this);
	}
};

NoneFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNoneFunctionName(this);
	}
};




CypherParser.NoneFunctionNameContext = NoneFunctionNameContext;

CypherParser.prototype.noneFunctionName = function() {

    var localctx = new NoneFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CypherParser.RULE_noneFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2084;
        this.match(CypherParser.NONE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunction;
    return this;
}

SingleFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionContext.prototype.constructor = SingleFunctionContext;

SingleFunctionContext.prototype.singleFunctionName = function() {
    return this.getTypedRuleContext(SingleFunctionNameContext,0);
};

SingleFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

SingleFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SingleFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleFunction(this);
	}
};

SingleFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleFunction(this);
	}
};




CypherParser.SingleFunctionContext = SingleFunctionContext;

CypherParser.prototype.singleFunction = function() {

    var localctx = new SingleFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CypherParser.RULE_singleFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2086;
        this.singleFunctionName();
        this.state = 2088;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2087;
            this.match(CypherParser.SP);
        }

        this.state = 2090;
        this.match(CypherParser.T__18);
        this.state = 2092;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2091;
            this.match(CypherParser.SP);
        }

        this.state = 2094;
        this.filterExpression();
        this.state = 2096;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2095;
            this.match(CypherParser.SP);
        }

        this.state = 2098;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunctionName;
    return this;
}

SingleFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionNameContext.prototype.constructor = SingleFunctionNameContext;

SingleFunctionNameContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

SingleFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleFunctionName(this);
	}
};

SingleFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleFunctionName(this);
	}
};




CypherParser.SingleFunctionNameContext = SingleFunctionNameContext;

CypherParser.prototype.singleFunctionName = function() {

    var localctx = new SingleFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CypherParser.RULE_singleFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2100;
        this.match(CypherParser.SINGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtractFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunction;
    return this;
}

ExtractFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtractFunctionContext.prototype.constructor = ExtractFunctionContext;

ExtractFunctionContext.prototype.extractFunctionName = function() {
    return this.getTypedRuleContext(ExtractFunctionNameContext,0);
};

ExtractFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

ExtractFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ExtractFunctionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExtractFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExtractFunction(this);
	}
};

ExtractFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExtractFunction(this);
	}
};




CypherParser.ExtractFunctionContext = ExtractFunctionContext;

CypherParser.prototype.extractFunction = function() {

    var localctx = new ExtractFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CypherParser.RULE_extractFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2102;
        this.extractFunctionName();
        this.state = 2104;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2103;
            this.match(CypherParser.SP);
        }

        this.state = 2106;
        this.match(CypherParser.T__18);
        this.state = 2108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2107;
            this.match(CypherParser.SP);
        }

        this.state = 2110;
        this.filterExpression();
        this.state = 2119;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        if(la_===1) {
            this.state = 2112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2111;
                this.match(CypherParser.SP);
            }

            this.state = 2114;
            this.match(CypherParser.T__21);
            this.state = 2116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2115;
                this.match(CypherParser.SP);
            }

            this.state = 2118;
            this.expression();

        }
        this.state = 2122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2121;
            this.match(CypherParser.SP);
        }

        this.state = 2124;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtractFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunctionName;
    return this;
}

ExtractFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtractFunctionNameContext.prototype.constructor = ExtractFunctionNameContext;

ExtractFunctionNameContext.prototype.EXTRACT = function() {
    return this.getToken(CypherParser.EXTRACT, 0);
};

ExtractFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExtractFunctionName(this);
	}
};

ExtractFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExtractFunctionName(this);
	}
};




CypherParser.ExtractFunctionNameContext = ExtractFunctionNameContext;

CypherParser.prototype.extractFunctionName = function() {

    var localctx = new ExtractFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CypherParser.RULE_extractFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2126;
        this.match(CypherParser.EXTRACT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunction;
    return this;
}

ReduceFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceFunctionContext.prototype.constructor = ReduceFunctionContext;

ReduceFunctionContext.prototype.reduceFunctionName = function() {
    return this.getTypedRuleContext(ReduceFunctionNameContext,0);
};

ReduceFunctionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ReduceFunctionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ReduceFunctionContext.prototype.idInColl = function() {
    return this.getTypedRuleContext(IdInCollContext,0);
};

ReduceFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReduceFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReduceFunction(this);
	}
};

ReduceFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReduceFunction(this);
	}
};




CypherParser.ReduceFunctionContext = ReduceFunctionContext;

CypherParser.prototype.reduceFunction = function() {

    var localctx = new ReduceFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CypherParser.RULE_reduceFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2128;
        this.reduceFunctionName();
        this.state = 2130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2129;
            this.match(CypherParser.SP);
        }

        this.state = 2132;
        this.match(CypherParser.T__18);
        this.state = 2134;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2133;
            this.match(CypherParser.SP);
        }

        this.state = 2136;
        this.variable();
        this.state = 2138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2137;
            this.match(CypherParser.SP);
        }

        this.state = 2140;
        this.match(CypherParser.T__11);
        this.state = 2142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2141;
            this.match(CypherParser.SP);
        }

        this.state = 2144;
        this.expression();
        this.state = 2146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2145;
            this.match(CypherParser.SP);
        }

        this.state = 2148;
        this.match(CypherParser.T__14);
        this.state = 2150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2149;
            this.match(CypherParser.SP);
        }

        this.state = 2152;
        this.idInColl();
        this.state = 2154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2153;
            this.match(CypherParser.SP);
        }

        this.state = 2156;
        this.match(CypherParser.T__21);
        this.state = 2158;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2157;
            this.match(CypherParser.SP);
        }

        this.state = 2160;
        this.expression();
        this.state = 2162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2161;
            this.match(CypherParser.SP);
        }

        this.state = 2164;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunctionName;
    return this;
}

ReduceFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceFunctionNameContext.prototype.constructor = ReduceFunctionNameContext;

ReduceFunctionNameContext.prototype.REDUCE = function() {
    return this.getToken(CypherParser.REDUCE, 0);
};

ReduceFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReduceFunctionName(this);
	}
};

ReduceFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReduceFunctionName(this);
	}
};




CypherParser.ReduceFunctionNameContext = ReduceFunctionNameContext;

CypherParser.prototype.reduceFunctionName = function() {

    var localctx = new ReduceFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CypherParser.RULE_reduceFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2166;
        this.match(CypherParser.REDUCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortestPathPatternFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathPatternFunction;
    return this;
}

ShortestPathPatternFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortestPathPatternFunctionContext.prototype.constructor = ShortestPathPatternFunctionContext;

ShortestPathPatternFunctionContext.prototype.shortestPathFunctionName = function() {
    return this.getTypedRuleContext(ShortestPathFunctionNameContext,0);
};

ShortestPathPatternFunctionContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

ShortestPathPatternFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ShortestPathPatternFunctionContext.prototype.allShortestPathFunctionName = function() {
    return this.getTypedRuleContext(AllShortestPathFunctionNameContext,0);
};

ShortestPathPatternFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShortestPathPatternFunction(this);
	}
};

ShortestPathPatternFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShortestPathPatternFunction(this);
	}
};




CypherParser.ShortestPathPatternFunctionContext = ShortestPathPatternFunctionContext;

CypherParser.prototype.shortestPathPatternFunction = function() {

    var localctx = new ShortestPathPatternFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CypherParser.RULE_shortestPathPatternFunction);
    var _la = 0; // Token type
    try {
        this.state = 2196;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
            this.enterOuterAlt(localctx, 1);
            this.state = 2168;
            this.shortestPathFunctionName();
            this.state = 2170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2169;
                this.match(CypherParser.SP);
            }

            this.state = 2172;
            this.match(CypherParser.T__18);
            this.state = 2174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2173;
                this.match(CypherParser.SP);
            }

            this.state = 2176;
            this.patternElement();
            this.state = 2178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2177;
                this.match(CypherParser.SP);
            }

            this.state = 2180;
            this.match(CypherParser.T__19);
            break;
        case CypherParser.ALLSHORTESTPATHS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2182;
            this.allShortestPathFunctionName();
            this.state = 2184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2183;
                this.match(CypherParser.SP);
            }

            this.state = 2186;
            this.match(CypherParser.T__18);
            this.state = 2188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2187;
                this.match(CypherParser.SP);
            }

            this.state = 2190;
            this.patternElement();
            this.state = 2192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2191;
                this.match(CypherParser.SP);
            }

            this.state = 2194;
            this.match(CypherParser.T__19);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortestPathFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathFunctionName;
    return this;
}

ShortestPathFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortestPathFunctionNameContext.prototype.constructor = ShortestPathFunctionNameContext;

ShortestPathFunctionNameContext.prototype.SHORTESTPATH = function() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
};

ShortestPathFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShortestPathFunctionName(this);
	}
};

ShortestPathFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShortestPathFunctionName(this);
	}
};




CypherParser.ShortestPathFunctionNameContext = ShortestPathFunctionNameContext;

CypherParser.prototype.shortestPathFunctionName = function() {

    var localctx = new ShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CypherParser.RULE_shortestPathFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2198;
        this.match(CypherParser.SHORTESTPATH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllShortestPathFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allShortestPathFunctionName;
    return this;
}

AllShortestPathFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllShortestPathFunctionNameContext.prototype.constructor = AllShortestPathFunctionNameContext;

AllShortestPathFunctionNameContext.prototype.ALLSHORTESTPATHS = function() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
};

AllShortestPathFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllShortestPathFunctionName(this);
	}
};

AllShortestPathFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllShortestPathFunctionName(this);
	}
};




CypherParser.AllShortestPathFunctionNameContext = AllShortestPathFunctionNameContext;

CypherParser.prototype.allShortestPathFunctionName = function() {

    var localctx = new AllShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CypherParser.RULE_allShortestPathFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2200;
        this.match(CypherParser.ALLSHORTESTPATHS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

AtomContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

AtomContext.prototype.caseExpression = function() {
    return this.getTypedRuleContext(CaseExpressionContext,0);
};

AtomContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

AtomContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AtomContext.prototype.listComprehension = function() {
    return this.getTypedRuleContext(ListComprehensionContext,0);
};

AtomContext.prototype.patternComprehension = function() {
    return this.getTypedRuleContext(PatternComprehensionContext,0);
};

AtomContext.prototype.filterFunction = function() {
    return this.getTypedRuleContext(FilterFunctionContext,0);
};

AtomContext.prototype.extractFunction = function() {
    return this.getTypedRuleContext(ExtractFunctionContext,0);
};

AtomContext.prototype.reduceFunction = function() {
    return this.getTypedRuleContext(ReduceFunctionContext,0);
};

AtomContext.prototype.allFunction = function() {
    return this.getTypedRuleContext(AllFunctionContext,0);
};

AtomContext.prototype.anyFunction = function() {
    return this.getTypedRuleContext(AnyFunctionContext,0);
};

AtomContext.prototype.noneFunction = function() {
    return this.getTypedRuleContext(NoneFunctionContext,0);
};

AtomContext.prototype.singleFunction = function() {
    return this.getTypedRuleContext(SingleFunctionContext,0);
};

AtomContext.prototype.existsFunction = function() {
    return this.getTypedRuleContext(ExistsFunctionContext,0);
};

AtomContext.prototype.shortestPathPatternFunction = function() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
};

AtomContext.prototype.relationshipsPattern = function() {
    return this.getTypedRuleContext(RelationshipsPatternContext,0);
};

AtomContext.prototype.parenthesizedExpression = function() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
};

AtomContext.prototype.functionInvocation = function() {
    return this.getTypedRuleContext(FunctionInvocationContext,0);
};

AtomContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAtom(this);
	}
};




CypherParser.AtomContext = AtomContext;

CypherParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CypherParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.state = 2233;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2202;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2203;
            this.parameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2204;
            this.caseExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2205;
            this.match(CypherParser.COUNT);
            this.state = 2207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2206;
                this.match(CypherParser.SP);
            }

            this.state = 2209;
            this.match(CypherParser.T__18);
            this.state = 2211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2210;
                this.match(CypherParser.SP);
            }

            this.state = 2213;
            this.match(CypherParser.T__22);
            this.state = 2215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2214;
                this.match(CypherParser.SP);
            }

            this.state = 2217;
            this.match(CypherParser.T__19);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2218;
            this.listComprehension();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2219;
            this.patternComprehension();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2220;
            this.filterFunction();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2221;
            this.extractFunction();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2222;
            this.reduceFunction();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2223;
            this.allFunction();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2224;
            this.anyFunction();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2225;
            this.noneFunction();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2226;
            this.singleFunction();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2227;
            this.existsFunction();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2228;
            this.shortestPathPatternFunction();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2229;
            this.relationshipsPattern();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2230;
            this.parenthesizedExpression();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2231;
            this.functionInvocation();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2232;
            this.variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

LiteralContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

LiteralContext.prototype.listLiteral = function() {
    return this.getTypedRuleContext(ListLiteralContext,0);
};

LiteralContext.prototype.mapProjection = function() {
    return this.getTypedRuleContext(MapProjectionContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteral(this);
	}
};




CypherParser.LiteralContext = LiteralContext;

CypherParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CypherParser.RULE_literal);
    try {
        this.state = 2242;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2235;
            this.numberLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2236;
            this.stringLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2237;
            this.booleanLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2238;
            this.match(CypherParser.NULL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2239;
            this.mapLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2240;
            this.listLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2241;
            this.mapProjection();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStringLiteral(this);
	}
};




CypherParser.StringLiteralContext = StringLiteralContext;

CypherParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CypherParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2244;
        this.match(CypherParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitBooleanLiteral(this);
	}
};




CypherParser.BooleanLiteralContext = BooleanLiteralContext;

CypherParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CypherParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2246;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listLiteral;
    return this;
}

ListLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListLiteralContext.prototype.constructor = ListLiteralContext;

ListLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ListLiteralContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterListLiteral(this);
	}
};

ListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitListLiteral(this);
	}
};




CypherParser.ListLiteralContext = ListLiteralContext;

CypherParser.prototype.listLiteral = function() {

    var localctx = new ListLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CypherParser.RULE_listLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        this.match(CypherParser.T__16);
        this.state = 2250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2249;
            this.match(CypherParser.SP);
        }

        this.state = 2269;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__18))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.StringLiteral - 130)) | (1 << (CypherParser.HexInteger - 130)) | (1 << (CypherParser.DecimalInteger - 130)) | (1 << (CypherParser.OctalInteger - 130)) | (1 << (CypherParser.HexLetter - 130)) | (1 << (CypherParser.ExponentDecimalReal - 130)) | (1 << (CypherParser.RegularDecimalReal - 130)) | (1 << (CypherParser.UnescapedSymbolicName - 130)) | (1 << (CypherParser.EscapedSymbolicName - 130)))) !== 0)) {
            this.state = 2252;
            this.expression();
            this.state = 2254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2253;
                this.match(CypherParser.SP);
            }

            this.state = 2266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 2256;
                this.match(CypherParser.T__14);
                this.state = 2258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2257;
                    this.match(CypherParser.SP);
                }

                this.state = 2260;
                this.expression();
                this.state = 2262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2261;
                    this.match(CypherParser.SP);
                }

                this.state = 2268;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2271;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartialComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
    return this;
}

PartialComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialComparisonExpressionContext.prototype.constructor = PartialComparisonExpressionContext;

PartialComparisonExpressionContext.prototype.addOrSubtractExpression = function() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
};

PartialComparisonExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PartialComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPartialComparisonExpression(this);
	}
};

PartialComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPartialComparisonExpression(this);
	}
};




CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext;

CypherParser.prototype.partialComparisonExpression = function() {

    var localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CypherParser.RULE_partialComparisonExpression);
    var _la = 0; // Token type
    try {
        this.state = 2308;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 2273;
            this.match(CypherParser.T__11);
            this.state = 2275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2274;
                this.match(CypherParser.SP);
            }

            this.state = 2277;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__27:
            this.enterOuterAlt(localctx, 2);
            this.state = 2278;
            this.match(CypherParser.T__27);
            this.state = 2280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2279;
                this.match(CypherParser.SP);
            }

            this.state = 2282;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__28:
            this.enterOuterAlt(localctx, 3);
            this.state = 2283;
            this.match(CypherParser.T__28);
            this.state = 2285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2284;
                this.match(CypherParser.SP);
            }

            this.state = 2287;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__29:
            this.enterOuterAlt(localctx, 4);
            this.state = 2288;
            this.match(CypherParser.T__29);
            this.state = 2290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2289;
                this.match(CypherParser.SP);
            }

            this.state = 2292;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__30:
            this.enterOuterAlt(localctx, 5);
            this.state = 2293;
            this.match(CypherParser.T__30);
            this.state = 2295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2294;
                this.match(CypherParser.SP);
            }

            this.state = 2297;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__31:
            this.enterOuterAlt(localctx, 6);
            this.state = 2298;
            this.match(CypherParser.T__31);
            this.state = 2300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2299;
                this.match(CypherParser.SP);
            }

            this.state = 2302;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__32:
            this.enterOuterAlt(localctx, 7);
            this.state = 2303;
            this.match(CypherParser.T__32);
            this.state = 2305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2304;
                this.match(CypherParser.SP);
            }

            this.state = 2307;
            this.addOrSubtractExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParenthesizedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParenthesizedExpression(this);
	}
};




CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

CypherParser.prototype.parenthesizedExpression = function() {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CypherParser.RULE_parenthesizedExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2310;
        this.match(CypherParser.T__18);
        this.state = 2312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2311;
            this.match(CypherParser.SP);
        }

        this.state = 2314;
        this.expression();
        this.state = 2316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2315;
            this.match(CypherParser.SP);
        }

        this.state = 2318;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipsPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipsPattern;
    return this;
}

RelationshipsPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipsPatternContext.prototype.constructor = RelationshipsPatternContext;

RelationshipsPatternContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

RelationshipsPatternContext.prototype.patternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(PatternElementChainContext,i);
    }
};

RelationshipsPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipsPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipsPattern(this);
	}
};

RelationshipsPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipsPattern(this);
	}
};




CypherParser.RelationshipsPatternContext = RelationshipsPatternContext;

CypherParser.prototype.relationshipsPattern = function() {

    var localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CypherParser.RULE_relationshipsPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2320;
        this.nodePattern();
        this.state = 2325; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2322;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 2321;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 2324;
        		this.patternElementChain();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2327; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,346, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterExpression;
    return this;
}

FilterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterExpressionContext.prototype.constructor = FilterExpressionContext;

FilterExpressionContext.prototype.idInColl = function() {
    return this.getTypedRuleContext(IdInCollContext,0);
};

FilterExpressionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

FilterExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

FilterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterExpression(this);
	}
};

FilterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterExpression(this);
	}
};




CypherParser.FilterExpressionContext = FilterExpressionContext;

CypherParser.prototype.filterExpression = function() {

    var localctx = new FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CypherParser.RULE_filterExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2329;
        this.idInColl();
        this.state = 2334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
        if(la_===1) {
            this.state = 2331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2330;
                this.match(CypherParser.SP);
            }

            this.state = 2333;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdInCollContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idInColl;
    return this;
}

IdInCollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdInCollContext.prototype.constructor = IdInCollContext;

IdInCollContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

IdInCollContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


IdInCollContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

IdInCollContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IdInCollContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdInColl(this);
	}
};

IdInCollContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdInColl(this);
	}
};




CypherParser.IdInCollContext = IdInCollContext;

CypherParser.prototype.idInColl = function() {

    var localctx = new IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CypherParser.RULE_idInColl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2336;
        this.variable();
        this.state = 2337;
        this.match(CypherParser.SP);
        this.state = 2338;
        this.match(CypherParser.IN);
        this.state = 2339;
        this.match(CypherParser.SP);
        this.state = 2340;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocation;
    return this;
}

FunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionInvocationContext.prototype.constructor = FunctionInvocationContext;

FunctionInvocationContext.prototype.functionInvocationBody = function() {
    return this.getTypedRuleContext(FunctionInvocationBodyContext,0);
};

FunctionInvocationContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


FunctionInvocationContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

FunctionInvocationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionInvocation(this);
	}
};

FunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionInvocation(this);
	}
};




CypherParser.FunctionInvocationContext = FunctionInvocationContext;

CypherParser.prototype.functionInvocation = function() {

    var localctx = new FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CypherParser.RULE_functionInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2342;
        this.functionInvocationBody();
        this.state = 2344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2343;
            this.match(CypherParser.SP);
        }

        this.state = 2346;
        this.match(CypherParser.T__18);
        this.state = 2348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2347;
            this.match(CypherParser.SP);
        }

        this.state = 2354;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
        if(la_===1) {
            this.state = 2350;
            this.match(CypherParser.DISTINCT);
            this.state = 2352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2351;
                this.match(CypherParser.SP);
            }


        }
        this.state = 2373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__18))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.StringLiteral - 130)) | (1 << (CypherParser.HexInteger - 130)) | (1 << (CypherParser.DecimalInteger - 130)) | (1 << (CypherParser.OctalInteger - 130)) | (1 << (CypherParser.HexLetter - 130)) | (1 << (CypherParser.ExponentDecimalReal - 130)) | (1 << (CypherParser.RegularDecimalReal - 130)) | (1 << (CypherParser.UnescapedSymbolicName - 130)) | (1 << (CypherParser.EscapedSymbolicName - 130)))) !== 0)) {
            this.state = 2356;
            this.expression();
            this.state = 2358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2357;
                this.match(CypherParser.SP);
            }

            this.state = 2370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 2360;
                this.match(CypherParser.T__14);
                this.state = 2362;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2361;
                    this.match(CypherParser.SP);
                }

                this.state = 2364;
                this.expression();
                this.state = 2366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2365;
                    this.match(CypherParser.SP);
                }

                this.state = 2372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2375;
        this.match(CypherParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionInvocationBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocationBody;
    return this;
}

FunctionInvocationBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionInvocationBodyContext.prototype.constructor = FunctionInvocationBodyContext;

FunctionInvocationBodyContext.prototype.namespace = function() {
    return this.getTypedRuleContext(NamespaceContext,0);
};

FunctionInvocationBodyContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

FunctionInvocationBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionInvocationBody(this);
	}
};

FunctionInvocationBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionInvocationBody(this);
	}
};




CypherParser.FunctionInvocationBodyContext = FunctionInvocationBodyContext;

CypherParser.prototype.functionInvocationBody = function() {

    var localctx = new FunctionInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CypherParser.RULE_functionInvocationBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2377;
        this.namespace();
        this.state = 2378;
        this.functionName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionName;
    return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.UnescapedSymbolicName = function() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
};

FunctionNameContext.prototype.EscapedSymbolicName = function() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
};

FunctionNameContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionName(this);
	}
};

FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionName(this);
	}
};




CypherParser.FunctionNameContext = FunctionNameContext;

CypherParser.prototype.functionName = function() {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CypherParser.RULE_functionName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2380;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.COUNT || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureName;
    return this;
}

ProcedureNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureNameContext.prototype.constructor = ProcedureNameContext;

ProcedureNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ProcedureNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureName(this);
	}
};

ProcedureNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureName(this);
	}
};




CypherParser.ProcedureNameContext = ProcedureNameContext;

CypherParser.prototype.procedureName = function() {

    var localctx = new ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CypherParser.RULE_procedureName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2382;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listComprehension;
    return this;
}

ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListComprehensionContext.prototype.constructor = ListComprehensionContext;

ListComprehensionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

ListComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ListComprehensionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ListComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterListComprehension(this);
	}
};

ListComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitListComprehension(this);
	}
};




CypherParser.ListComprehensionContext = ListComprehensionContext;

CypherParser.prototype.listComprehension = function() {

    var localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CypherParser.RULE_listComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2384;
        this.match(CypherParser.T__16);
        this.state = 2386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2385;
            this.match(CypherParser.SP);
        }

        this.state = 2388;
        this.filterExpression();
        this.state = 2397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
        if(la_===1) {
            this.state = 2390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2389;
                this.match(CypherParser.SP);
            }

            this.state = 2392;
            this.match(CypherParser.T__21);
            this.state = 2394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2393;
                this.match(CypherParser.SP);
            }

            this.state = 2396;
            this.expression();

        }
        this.state = 2400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2399;
            this.match(CypherParser.SP);
        }

        this.state = 2402;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternComprehension;
    return this;
}

PatternComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternComprehensionContext.prototype.constructor = PatternComprehensionContext;

PatternComprehensionContext.prototype.relationshipsPattern = function() {
    return this.getTypedRuleContext(RelationshipsPatternContext,0);
};

PatternComprehensionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PatternComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternComprehensionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PatternComprehensionContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

PatternComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternComprehension(this);
	}
};

PatternComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternComprehension(this);
	}
};




CypherParser.PatternComprehensionContext = PatternComprehensionContext;

CypherParser.prototype.patternComprehension = function() {

    var localctx = new PatternComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CypherParser.RULE_patternComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2404;
        this.match(CypherParser.T__16);
        this.state = 2406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2405;
            this.match(CypherParser.SP);
        }

        this.state = 2416;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.HexLetter - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)))) !== 0) || _la===CypherParser.EscapedSymbolicName) {
            this.state = 2408;
            this.variable();
            this.state = 2410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2409;
                this.match(CypherParser.SP);
            }

            this.state = 2412;
            this.match(CypherParser.T__11);
            this.state = 2414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2413;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2418;
        this.relationshipsPattern();
        this.state = 2420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2419;
            this.match(CypherParser.SP);
        }

        this.state = 2430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WHERE) {
            this.state = 2422;
            this.match(CypherParser.WHERE);
            this.state = 2424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2423;
                this.match(CypherParser.SP);
            }

            this.state = 2426;
            this.expression();
            this.state = 2428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2427;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2432;
        this.match(CypherParser.T__21);
        this.state = 2434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2433;
            this.match(CypherParser.SP);
        }

        this.state = 2436;
        this.expression();
        this.state = 2438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2437;
            this.match(CypherParser.SP);
        }

        this.state = 2440;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyLookup;
    return this;
}

PropertyLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyLookupContext.prototype.constructor = PropertyLookupContext;

PropertyLookupContext.prototype.propertyKeyName = function() {
    return this.getTypedRuleContext(PropertyKeyNameContext,0);
};

PropertyLookupContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PropertyLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyLookup(this);
	}
};

PropertyLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyLookup(this);
	}
};




CypherParser.PropertyLookupContext = PropertyLookupContext;

CypherParser.prototype.propertyLookup = function() {

    var localctx = new PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CypherParser.RULE_propertyLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2442;
        this.match(CypherParser.T__6);
        this.state = 2444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2443;
            this.match(CypherParser.SP);
        }

        this.state = 2446;
        this.propertyKeyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseExpression;
    return this;
}

CaseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseExpressionContext.prototype.constructor = CaseExpressionContext;

CaseExpressionContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

CaseExpressionContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

CaseExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CaseExpressionContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

CaseExpressionContext.prototype.caseAlternatives = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseAlternativesContext);
    } else {
        return this.getTypedRuleContext(CaseAlternativesContext,i);
    }
};

CaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCaseExpression(this);
	}
};

CaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCaseExpression(this);
	}
};




CypherParser.CaseExpressionContext = CaseExpressionContext;

CypherParser.prototype.caseExpression = function() {

    var localctx = new CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CypherParser.RULE_caseExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2448;
            this.match(CypherParser.CASE);
            this.state = 2453; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2450;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 2449;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 2452;
            		this.caseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2455; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,375, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 2457;
            this.match(CypherParser.CASE);
            this.state = 2459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2458;
                this.match(CypherParser.SP);
            }

            this.state = 2461;
            this.expression();
            this.state = 2466; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2463;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 2462;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 2465;
            		this.caseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2468; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,378, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
        this.state = 2480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
        if(la_===1) {
            this.state = 2473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2472;
                this.match(CypherParser.SP);
            }

            this.state = 2475;
            this.match(CypherParser.ELSE);
            this.state = 2477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2476;
                this.match(CypherParser.SP);
            }

            this.state = 2479;
            this.expression();

        }
        this.state = 2483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2482;
            this.match(CypherParser.SP);
        }

        this.state = 2485;
        this.match(CypherParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseAlternativesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseAlternatives;
    return this;
}

CaseAlternativesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseAlternativesContext.prototype.constructor = CaseAlternativesContext;

CaseAlternativesContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

CaseAlternativesContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseAlternativesContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

CaseAlternativesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CaseAlternativesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCaseAlternatives(this);
	}
};

CaseAlternativesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCaseAlternatives(this);
	}
};




CypherParser.CaseAlternativesContext = CaseAlternativesContext;

CypherParser.prototype.caseAlternatives = function() {

    var localctx = new CaseAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CypherParser.RULE_caseAlternatives);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2487;
        this.match(CypherParser.WHEN);
        this.state = 2489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2488;
            this.match(CypherParser.SP);
        }

        this.state = 2491;
        this.expression();
        this.state = 2493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2492;
            this.match(CypherParser.SP);
        }

        this.state = 2495;
        this.match(CypherParser.THEN);
        this.state = 2497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2496;
            this.match(CypherParser.SP);
        }

        this.state = 2499;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVariable(this);
	}
};




CypherParser.VariableContext = VariableContext;

CypherParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CypherParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2501;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.doubleLiteral = function() {
    return this.getTypedRuleContext(DoubleLiteralContext,0);
};

NumberLiteralContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNumberLiteral(this);
	}
};




CypherParser.NumberLiteralContext = NumberLiteralContext;

CypherParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CypherParser.RULE_numberLiteral);
    try {
        this.state = 2505;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 1);
            this.state = 2503;
            this.doubleLiteral();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 2504;
            this.integerLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapLiteral;
    return this;
}

MapLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapLiteralContext.prototype.constructor = MapLiteralContext;

MapLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MapLiteralContext.prototype.literalEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralEntryContext);
    } else {
        return this.getTypedRuleContext(LiteralEntryContext,i);
    }
};

MapLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapLiteral(this);
	}
};

MapLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapLiteral(this);
	}
};




CypherParser.MapLiteralContext = MapLiteralContext;

CypherParser.prototype.mapLiteral = function() {

    var localctx = new MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CypherParser.RULE_mapLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2507;
        this.match(CypherParser.T__13);
        this.state = 2509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2508;
            this.match(CypherParser.SP);
        }

        this.state = 2528;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.HexLetter - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)))) !== 0) || _la===CypherParser.EscapedSymbolicName) {
            this.state = 2511;
            this.literalEntry();
            this.state = 2513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2512;
                this.match(CypherParser.SP);
            }

            this.state = 2525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 2515;
                this.match(CypherParser.T__14);
                this.state = 2517;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2516;
                    this.match(CypherParser.SP);
                }

                this.state = 2519;
                this.literalEntry();
                this.state = 2521;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2520;
                    this.match(CypherParser.SP);
                }

                this.state = 2527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2530;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapProjectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjection;
    return this;
}

MapProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapProjectionContext.prototype.constructor = MapProjectionContext;

MapProjectionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

MapProjectionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MapProjectionContext.prototype.mapProjectionVariants = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MapProjectionVariantsContext);
    } else {
        return this.getTypedRuleContext(MapProjectionVariantsContext,i);
    }
};

MapProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapProjection(this);
	}
};

MapProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapProjection(this);
	}
};




CypherParser.MapProjectionContext = MapProjectionContext;

CypherParser.prototype.mapProjection = function() {

    var localctx = new MapProjectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CypherParser.RULE_mapProjection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2532;
        this.variable();
        this.state = 2534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2533;
            this.match(CypherParser.SP);
        }

        this.state = 2536;
        this.match(CypherParser.T__13);
        this.state = 2538;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
        if(la_===1) {
            this.state = 2537;
            this.match(CypherParser.SP);

        }
        this.state = 2541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__6 || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.HexLetter - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)))) !== 0) || _la===CypherParser.EscapedSymbolicName) {
            this.state = 2540;
            this.mapProjectionVariants();
        }

        this.state = 2553;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,399,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2544;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2543;
                    this.match(CypherParser.SP);
                }

                this.state = 2546;
                this.match(CypherParser.T__14);
                this.state = 2548;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2547;
                    this.match(CypherParser.SP);
                }

                this.state = 2550;
                this.mapProjectionVariants(); 
            }
            this.state = 2555;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,399,this._ctx);
        }

        this.state = 2557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2556;
            this.match(CypherParser.SP);
        }

        this.state = 2559;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapProjectionVariantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjectionVariants;
    return this;
}

MapProjectionVariantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapProjectionVariantsContext.prototype.constructor = MapProjectionVariantsContext;

MapProjectionVariantsContext.prototype.literalEntry = function() {
    return this.getTypedRuleContext(LiteralEntryContext,0);
};

MapProjectionVariantsContext.prototype.propertySelector = function() {
    return this.getTypedRuleContext(PropertySelectorContext,0);
};

MapProjectionVariantsContext.prototype.variableSelector = function() {
    return this.getTypedRuleContext(VariableSelectorContext,0);
};

MapProjectionVariantsContext.prototype.allPropertiesSelector = function() {
    return this.getTypedRuleContext(AllPropertiesSelectorContext,0);
};

MapProjectionVariantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapProjectionVariants(this);
	}
};

MapProjectionVariantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapProjectionVariants(this);
	}
};




CypherParser.MapProjectionVariantsContext = MapProjectionVariantsContext;

CypherParser.prototype.mapProjectionVariants = function() {

    var localctx = new MapProjectionVariantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CypherParser.RULE_mapProjectionVariants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2565;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2561;
            this.literalEntry();
            break;

        case 2:
            this.state = 2562;
            this.propertySelector();
            break;

        case 3:
            this.state = 2563;
            this.variableSelector();
            break;

        case 4:
            this.state = 2564;
            this.allPropertiesSelector();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalEntry;
    return this;
}

LiteralEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralEntryContext.prototype.constructor = LiteralEntryContext;

LiteralEntryContext.prototype.propertyKeyName = function() {
    return this.getTypedRuleContext(PropertyKeyNameContext,0);
};

LiteralEntryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LiteralEntryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LiteralEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteralEntry(this);
	}
};

LiteralEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteralEntry(this);
	}
};




CypherParser.LiteralEntryContext = LiteralEntryContext;

CypherParser.prototype.literalEntry = function() {

    var localctx = new LiteralEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CypherParser.RULE_literalEntry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2567;
        this.propertyKeyName();
        this.state = 2569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2568;
            this.match(CypherParser.SP);
        }

        this.state = 2571;
        this.match(CypherParser.T__1);
        this.state = 2573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2572;
            this.match(CypherParser.SP);
        }

        this.state = 2575;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertySelector;
    return this;
}

PropertySelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySelectorContext.prototype.constructor = PropertySelectorContext;

PropertySelectorContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PropertySelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertySelector(this);
	}
};

PropertySelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertySelector(this);
	}
};




CypherParser.PropertySelectorContext = PropertySelectorContext;

CypherParser.prototype.propertySelector = function() {

    var localctx = new PropertySelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CypherParser.RULE_propertySelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2577;
        this.match(CypherParser.T__6);
        this.state = 2578;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variableSelector;
    return this;
}

VariableSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableSelectorContext.prototype.constructor = VariableSelectorContext;

VariableSelectorContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

VariableSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVariableSelector(this);
	}
};

VariableSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVariableSelector(this);
	}
};




CypherParser.VariableSelectorContext = VariableSelectorContext;

CypherParser.prototype.variableSelector = function() {

    var localctx = new VariableSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CypherParser.RULE_variableSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2580;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllPropertiesSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allPropertiesSelector;
    return this;
}

AllPropertiesSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllPropertiesSelectorContext.prototype.constructor = AllPropertiesSelectorContext;


AllPropertiesSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllPropertiesSelector(this);
	}
};

AllPropertiesSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllPropertiesSelector(this);
	}
};




CypherParser.AllPropertiesSelectorContext = AllPropertiesSelectorContext;

CypherParser.prototype.allPropertiesSelector = function() {

    var localctx = new AllPropertiesSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CypherParser.RULE_allPropertiesSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2582;
        this.match(CypherParser.T__6);
        this.state = 2583;
        this.match(CypherParser.T__22);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.legacyParameter = function() {
    return this.getTypedRuleContext(LegacyParameterContext,0);
};

ParameterContext.prototype.newParameter = function() {
    return this.getTypedRuleContext(NewParameterContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParameter(this);
	}
};




CypherParser.ParameterContext = ParameterContext;

CypherParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CypherParser.RULE_parameter);
    try {
        this.state = 2587;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__13:
            this.enterOuterAlt(localctx, 1);
            this.state = 2585;
            this.legacyParameter();
            break;
        case CypherParser.T__33:
            this.enterOuterAlt(localctx, 2);
            this.state = 2586;
            this.newParameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_legacyParameter;
    return this;
}

LegacyParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyParameterContext.prototype.constructor = LegacyParameterContext;

LegacyParameterContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

LegacyParameterContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LegacyParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLegacyParameter(this);
	}
};

LegacyParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLegacyParameter(this);
	}
};




CypherParser.LegacyParameterContext = LegacyParameterContext;

CypherParser.prototype.legacyParameter = function() {

    var localctx = new LegacyParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CypherParser.RULE_legacyParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2589;
        this.match(CypherParser.T__13);
        this.state = 2591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2590;
            this.match(CypherParser.SP);
        }

        this.state = 2593;
        this.parameterName();
        this.state = 2595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2594;
            this.match(CypherParser.SP);
        }

        this.state = 2597;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_newParameter;
    return this;
}

NewParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewParameterContext.prototype.constructor = NewParameterContext;

NewParameterContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

NewParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNewParameter(this);
	}
};

NewParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNewParameter(this);
	}
};




CypherParser.NewParameterContext = NewParameterContext;

CypherParser.prototype.newParameter = function() {

    var localctx = new NewParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CypherParser.RULE_newParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2599;
        this.match(CypherParser.T__33);
        this.state = 2600;
        this.parameterName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameterName;
    return this;
}

ParameterNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterNameContext.prototype.constructor = ParameterNameContext;

ParameterNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ParameterNameContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

ParameterNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParameterName(this);
	}
};

ParameterNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParameterName(this);
	}
};




CypherParser.ParameterNameContext = ParameterNameContext;

CypherParser.prototype.parameterName = function() {

    var localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CypherParser.RULE_parameterName);
    try {
        this.state = 2604;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.HexLetter:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 1);
            this.state = 2602;
            this.symbolicName();
            break;
        case CypherParser.DecimalInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 2603;
            this.match(CypherParser.DecimalInteger);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpressions;
    return this;
}

PropertyExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyExpressionsContext.prototype.constructor = PropertyExpressionsContext;

PropertyExpressionsContext.prototype.propertyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyExpressionContext);
    } else {
        return this.getTypedRuleContext(PropertyExpressionContext,i);
    }
};

PropertyExpressionsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyExpressions(this);
	}
};

PropertyExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyExpressions(this);
	}
};




CypherParser.PropertyExpressionsContext = PropertyExpressionsContext;

CypherParser.prototype.propertyExpressions = function() {

    var localctx = new PropertyExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CypherParser.RULE_propertyExpressions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2606;
        this.propertyExpression();
        this.state = 2617;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,410,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2607;
                    this.match(CypherParser.SP);
                }

                this.state = 2610;
                this.match(CypherParser.T__14);
                this.state = 2612;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2611;
                    this.match(CypherParser.SP);
                }

                this.state = 2614;
                this.propertyExpression(); 
            }
            this.state = 2619;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,410,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpression;
    return this;
}

PropertyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyExpressionContext.prototype.constructor = PropertyExpressionContext;

PropertyExpressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

PropertyExpressionContext.prototype.propertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(PropertyLookupContext,i);
    }
};

PropertyExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyExpression(this);
	}
};

PropertyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyExpression(this);
	}
};




CypherParser.PropertyExpressionContext = PropertyExpressionContext;

CypherParser.prototype.propertyExpression = function() {

    var localctx = new PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CypherParser.RULE_propertyExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2620;
        this.atom();
        this.state = 2625; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2622;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 2621;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 2624;
        		this.propertyLookup();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2627; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,412, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeys;
    return this;
}

PropertyKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyKeysContext.prototype.constructor = PropertyKeysContext;

PropertyKeysContext.prototype.propertyKeyName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyKeyNameContext);
    } else {
        return this.getTypedRuleContext(PropertyKeyNameContext,i);
    }
};

PropertyKeysContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyKeys(this);
	}
};

PropertyKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyKeys(this);
	}
};




CypherParser.PropertyKeysContext = PropertyKeysContext;

CypherParser.prototype.propertyKeys = function() {

    var localctx = new PropertyKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CypherParser.RULE_propertyKeys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2629;
        this.propertyKeyName();
        this.state = 2640;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,415,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2631;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2630;
                    this.match(CypherParser.SP);
                }

                this.state = 2633;
                this.match(CypherParser.T__14);
                this.state = 2635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2634;
                    this.match(CypherParser.SP);
                }

                this.state = 2637;
                this.propertyKeyName(); 
            }
            this.state = 2642;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,415,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyKeyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeyName;
    return this;
}

PropertyKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyKeyNameContext.prototype.constructor = PropertyKeyNameContext;

PropertyKeyNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

PropertyKeyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyKeyName(this);
	}
};

PropertyKeyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyKeyName(this);
	}
};




CypherParser.PropertyKeyNameContext = PropertyKeyNameContext;

CypherParser.prototype.propertyKeyName = function() {

    var localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CypherParser.RULE_propertyKeyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2643;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_integerLiteral;
    return this;
}

IntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.HexInteger = function() {
    return this.getToken(CypherParser.HexInteger, 0);
};

IntegerLiteralContext.prototype.OctalInteger = function() {
    return this.getToken(CypherParser.OctalInteger, 0);
};

IntegerLiteralContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIntegerLiteral(this);
	}
};




CypherParser.IntegerLiteralContext = IntegerLiteralContext;

CypherParser.prototype.integerLiteral = function() {

    var localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CypherParser.RULE_integerLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2645;
        _la = this._input.LA(1);
        if(!(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CypherParser.HexInteger - 135)) | (1 << (CypherParser.DecimalInteger - 135)) | (1 << (CypherParser.OctalInteger - 135)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoubleLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_doubleLiteral;
    return this;
}

DoubleLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

DoubleLiteralContext.prototype.ExponentDecimalReal = function() {
    return this.getToken(CypherParser.ExponentDecimalReal, 0);
};

DoubleLiteralContext.prototype.RegularDecimalReal = function() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
};

DoubleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDoubleLiteral(this);
	}
};

DoubleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDoubleLiteral(this);
	}
};




CypherParser.DoubleLiteralContext = DoubleLiteralContext;

CypherParser.prototype.doubleLiteral = function() {

    var localctx = new DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CypherParser.RULE_doubleLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2647;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_namespace;
    return this;
}

NamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceContext.prototype.constructor = NamespaceContext;

NamespaceContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

NamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNamespace(this);
	}
};

NamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNamespace(this);
	}
};




CypherParser.NamespaceContext = NamespaceContext;

CypherParser.prototype.namespace = function() {

    var localctx = new NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CypherParser.RULE_namespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2654;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,416,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2649;
                this.symbolicName();
                this.state = 2650;
                this.match(CypherParser.T__6); 
            }
            this.state = 2656;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,416,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_leftArrowHead;
    return this;
}

LeftArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftArrowHeadContext.prototype.constructor = LeftArrowHeadContext;


LeftArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLeftArrowHead(this);
	}
};

LeftArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLeftArrowHead(this);
	}
};




CypherParser.LeftArrowHeadContext = LeftArrowHeadContext;

CypherParser.prototype.leftArrowHead = function() {

    var localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CypherParser.RULE_leftArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2657;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rightArrowHead;
    return this;
}

RightArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightArrowHeadContext.prototype.constructor = RightArrowHeadContext;


RightArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRightArrowHead(this);
	}
};

RightArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRightArrowHead(this);
	}
};




CypherParser.RightArrowHeadContext = RightArrowHeadContext;

CypherParser.prototype.rightArrowHead = function() {

    var localctx = new RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CypherParser.RULE_rightArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2659;
        _la = this._input.LA(1);
        if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CypherParser.T__30 - 31)) | (1 << (CypherParser.T__38 - 31)) | (1 << (CypherParser.T__39 - 31)) | (1 << (CypherParser.T__40 - 31)) | (1 << (CypherParser.T__41 - 31)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dash;
    return this;
}

DashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DashContext.prototype.constructor = DashContext;


DashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDash(this);
	}
};

DashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDash(this);
	}
};




CypherParser.DashContext = DashContext;

CypherParser.prototype.dash = function() {

    var localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CypherParser.RULE_dash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2661;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.T__2 || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CypherParser.T__42 - 43)) | (1 << (CypherParser.T__43 - 43)) | (1 << (CypherParser.T__44 - 43)) | (1 << (CypherParser.T__45 - 43)) | (1 << (CypherParser.T__46 - 43)) | (1 << (CypherParser.T__47 - 43)) | (1 << (CypherParser.T__48 - 43)) | (1 << (CypherParser.T__49 - 43)) | (1 << (CypherParser.T__50 - 43)) | (1 << (CypherParser.T__51 - 43)) | (1 << (CypherParser.T__52 - 43)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SymbolicNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_symbolicName;
    return this;
}

SymbolicNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolicNameContext.prototype.constructor = SymbolicNameContext;

SymbolicNameContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

SymbolicNameContext.prototype.UnescapedSymbolicName = function() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
};

SymbolicNameContext.prototype.EscapedSymbolicName = function() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
};

SymbolicNameContext.prototype.HexLetter = function() {
    return this.getToken(CypherParser.HexLetter, 0);
};

SymbolicNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSymbolicName(this);
	}
};

SymbolicNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSymbolicName(this);
	}
};




CypherParser.SymbolicNameContext = SymbolicNameContext;

CypherParser.prototype.symbolicName = function() {

    var localctx = new SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CypherParser.RULE_symbolicName);
    try {
        this.state = 2667;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
            this.enterOuterAlt(localctx, 1);
            this.state = 2663;
            this.keyword();
            break;
        case CypherParser.UnescapedSymbolicName:
            this.enterOuterAlt(localctx, 2);
            this.state = 2664;
            this.match(CypherParser.UnescapedSymbolicName);
            break;
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 3);
            this.state = 2665;
            this.match(CypherParser.EscapedSymbolicName);
            break;
        case CypherParser.HexLetter:
            this.enterOuterAlt(localctx, 4);
            this.state = 2666;
            this.match(CypherParser.HexLetter);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.CYPHER = function() {
    return this.getToken(CypherParser.CYPHER, 0);
};

KeywordContext.prototype.EXPLAIN = function() {
    return this.getToken(CypherParser.EXPLAIN, 0);
};

KeywordContext.prototype.PROFILE = function() {
    return this.getToken(CypherParser.PROFILE, 0);
};

KeywordContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

KeywordContext.prototype.PERIODIC = function() {
    return this.getToken(CypherParser.PERIODIC, 0);
};

KeywordContext.prototype.COMMIT = function() {
    return this.getToken(CypherParser.COMMIT, 0);
};

KeywordContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

KeywordContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

KeywordContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

KeywordContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

KeywordContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

KeywordContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

KeywordContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

KeywordContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

KeywordContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

KeywordContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

KeywordContext.prototype.LOAD = function() {
    return this.getToken(CypherParser.LOAD, 0);
};

KeywordContext.prototype.CSV = function() {
    return this.getToken(CypherParser.CSV, 0);
};

KeywordContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

KeywordContext.prototype.HEADERS = function() {
    return this.getToken(CypherParser.HEADERS, 0);
};

KeywordContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

KeywordContext.prototype.FIELDTERMINATOR = function() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
};

KeywordContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

KeywordContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

KeywordContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

KeywordContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

KeywordContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

KeywordContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

KeywordContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

KeywordContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

KeywordContext.prototype.FOREACH = function() {
    return this.getToken(CypherParser.FOREACH, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

KeywordContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

KeywordContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

KeywordContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

KeywordContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

KeywordContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

KeywordContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

KeywordContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

KeywordContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

KeywordContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

KeywordContext.prototype.JOIN = function() {
    return this.getToken(CypherParser.JOIN, 0);
};

KeywordContext.prototype.SCAN = function() {
    return this.getToken(CypherParser.SCAN, 0);
};

KeywordContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

KeywordContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

KeywordContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

KeywordContext.prototype.REL = function() {
    return this.getToken(CypherParser.REL, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

KeywordContext.prototype.SHORTESTPATH = function() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
};

KeywordContext.prototype.ALLSHORTESTPATHS = function() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
};

KeywordContext.prototype.OR = function() {
    return this.getToken(CypherParser.OR, 0);
};

KeywordContext.prototype.XOR = function() {
    return this.getToken(CypherParser.XOR, 0);
};

KeywordContext.prototype.AND = function() {
    return this.getToken(CypherParser.AND, 0);
};

KeywordContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

KeywordContext.prototype.STARTS = function() {
    return this.getToken(CypherParser.STARTS, 0);
};

KeywordContext.prototype.ENDS = function() {
    return this.getToken(CypherParser.ENDS, 0);
};

KeywordContext.prototype.CONTAINS = function() {
    return this.getToken(CypherParser.CONTAINS, 0);
};

KeywordContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

KeywordContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

KeywordContext.prototype.FILTER = function() {
    return this.getToken(CypherParser.FILTER, 0);
};

KeywordContext.prototype.EXTRACT = function() {
    return this.getToken(CypherParser.EXTRACT, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

KeywordContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

KeywordContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

KeywordContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

KeywordContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

KeywordContext.prototype.REDUCE = function() {
    return this.getToken(CypherParser.REDUCE, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

KeywordContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

KeywordContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

KeywordContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

KeywordContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

KeywordContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

KeywordContext.prototype.KEY = function() {
    return this.getToken(CypherParser.KEY, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitKeyword(this);
	}
};




CypherParser.KeywordContext = KeywordContext;

CypherParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CypherParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2669;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.CypherParser = CypherParser;
